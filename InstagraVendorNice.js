window.v = function(orig) {
  /**
   * @param {number} i
   * @return {?}
   */
  function self(i) {
    if (t[i]) {
      return t[i].exports;
    }
    var m = t[i] = {
      i : i,
      l : false,
      exports : {}
    };
    return orig[i].call(m.exports, m, m.exports, self), m.l = true, m.exports;
  }
  var t = {};
  return self.m = orig, self.c = t, self.d = function(ctx, name, opts) {
    if (!self.o(ctx, name)) {
      Object.defineProperty(ctx, name, {
        configurable : false,
        enumerable : true,
        /** @type {Function} */
        get : opts
      });
    }
  }, self.n = function(object) {
    /** @type {function (): ?} */
    var value = object && object.__esModule ? function() {
      return object.default;
    } : function() {
      return object;
    };
    return self.d(value, "a", value), value;
  }, self.o = function(action, options) {
    return Object.prototype.hasOwnProperty.call(action, options);
  }, self.p = "", self(self.s = 37);
}([function(module, dataAndEvents, factory) {
  module.exports = factory(45);
}, function(module, dataAndEvents, deepDataAndEvents) {
  /**
   * @return {undefined}
   */
  var JsDiff = function() {
  };
  /** @type {function (): undefined} */
  module.exports = JsDiff;
}, function(module, dataAndEvents, $sanitize) {
  module.exports = $sanitize(58)();
}, function(module, dataAndEvents, deepDataAndEvents) {
  /**
   * @param {?} expectedHashCode
   * @param {string} value
   * @param {Object} expectedNumberOfNonCommentArgs
   * @param {string} def
   * @param {?} chai
   * @param {?} z
   * @param {?} h
   * @param {?} includeAll
   * @return {undefined}
   */
  module.exports = function(expectedHashCode, value, expectedNumberOfNonCommentArgs, def, chai, z, h, includeAll) {
    if (!expectedHashCode) {
      var err;
      if (void 0 === value) {
        /** @type {Error} */
        err = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        /** @type {Array} */
        var seq1 = [expectedNumberOfNonCommentArgs, def, chai, z, h, includeAll];
        /** @type {number} */
        var l = 0;
        /** @type {string} */
        (err = new Error(value.replace(/%s/g, function() {
          return seq1[l++];
        }))).name = "Invariant Violation";
      }
      throw err.framesToPop = 1, err;
    }
  };
}, function(dataAndEvents, s, deepDataAndEvents) {
  /** @type {boolean} */
  s.__esModule = true;
  /**
   * @param {string} child
   * @return {?}
   */
  s.addLeadingSlash = function(child) {
    return "/" === child.charAt(0) ? child : "/" + child;
  };
  /**
   * @param {?} selector
   * @return {?}
   */
  s.stripLeadingSlash = function(selector) {
    return "/" === selector.charAt(0) ? selector.substr(1) : selector;
  };
  /** @type {function (string, string): ?} */
  var isPlainObject = s.hasBasename = function(qualifier, object) {
    return(new RegExp("^" + object + "(\\/|\\?|#|$)", "i")).test(qualifier);
  };
  /**
   * @param {string} selector
   * @param {string} matcher
   * @return {?}
   */
  s.stripBasename = function(selector, matcher) {
    return isPlainObject(selector, matcher) ? selector.substr(matcher.length) : selector;
  };
  /**
   * @param {string} buffer
   * @return {?}
   */
  s.stripTrailingSlash = function(buffer) {
    return "/" === buffer.charAt(buffer.length - 1) ? buffer.slice(0, -1) : buffer;
  };
  /**
   * @param {string} path
   * @return {?}
   */
  s.parsePath = function(path) {
    var url = path || "/";
    /** @type {string} */
    var value = "";
    /** @type {string} */
    var buffer = "";
    var hashIndex = url.indexOf("#");
    if (-1 !== hashIndex) {
      buffer = url.substr(hashIndex);
      url = url.substr(0, hashIndex);
    }
    var index = url.indexOf("?");
    return-1 !== index && (value = url.substr(index), url = url.substr(0, index)), {
      pathname : url,
      search : "?" === value ? "" : value,
      hash : "#" === buffer ? "" : buffer
    };
  };
  /**
   * @param {?} expectedHashCode
   * @return {?}
   */
  s.createPath = function(expectedHashCode) {
    var path = expectedHashCode.pathname;
    var query = expectedHashCode.search;
    var hash = expectedHashCode.hash;
    var editing_default = path || "/";
    return query && ("?" !== query && (editing_default += "?" === query.charAt(0) ? query : "?" + query)), hash && ("#" !== hash && (editing_default += "#" === hash.charAt(0) ? hash : "#" + hash)), editing_default;
  };
}, function(dataAndEvents, ctx, path) {
  Object.defineProperty(ctx, "__esModule", {
    value : true
  });
  path.d(ctx, "addLeadingSlash", function() {
    return token;
  });
  path.d(ctx, "stripLeadingSlash", function() {
    return ltrim;
  });
  path.d(ctx, "hasBasename", function() {
    return _hasClass;
  });
  path.d(ctx, "stripBasename", function() {
    return add;
  });
  path.d(ctx, "stripTrailingSlash", function() {
    return read;
  });
  path.d(ctx, "parsePath", function() {
    return next;
  });
  path.d(ctx, "createPath", function() {
    return url;
  });
  /**
   * @param {string} value
   * @return {?}
   */
  var token = function(value) {
    return "/" === value.charAt(0) ? value : "/" + value;
  };
  /**
   * @param {string} str
   * @return {?}
   */
  var ltrim = function(str) {
    return "/" === str.charAt(0) ? str.substr(1) : str;
  };
  /**
   * @param {string} el
   * @param {string} className
   * @return {?}
   */
  var _hasClass = function(el, className) {
    return(new RegExp("^" + className + "(\\/|\\?|#|$)", "i")).test(el);
  };
  /**
   * @param {string} block
   * @param {string} m
   * @return {?}
   */
  var add = function(block, m) {
    return _hasClass(block, m) ? block.substr(m.length) : block;
  };
  /**
   * @param {string} buffer
   * @return {?}
   */
  var read = function(buffer) {
    return "/" === buffer.charAt(buffer.length - 1) ? buffer.slice(0, -1) : buffer;
  };
  /**
   * @param {string} param
   * @return {?}
   */
  var next = function(param) {
    var ret = param || "/";
    /** @type {string} */
    var value = "";
    /** @type {string} */
    var buffer = "";
    var idx = ret.indexOf("#");
    if (-1 !== idx) {
      buffer = ret.substr(idx);
      ret = ret.substr(0, idx);
    }
    var length = ret.indexOf("?");
    return-1 !== length && (value = ret.substr(length), ret = ret.substr(0, length)), {
      pathname : ret,
      search : "?" === value ? "" : value,
      hash : "#" === buffer ? "" : buffer
    };
  };
  /**
   * @param {string} location
   * @return {?}
   */
  var url = function(location) {
    var pathname = location.pathname;
    var query = location.search;
    var hash = location.hash;
    var key = pathname || "/";
    return query && ("?" !== query && (key += "?" === query.charAt(0) ? query : "?" + query)), hash && ("#" !== hash && (key += "#" === hash.charAt(0) ? hash : "#" + hash)), key;
  };
}, function(module, dataAndEvents, deepDataAndEvents) {
  /**
   * @param {Object} recurring
   * @return {?}
   */
  function tokenString(recurring) {
    return function() {
      return recurring;
    };
  }
  /**
   * @return {undefined}
   */
  var state = function() {
  };
  /** @type {function (Object): ?} */
  state.thatReturns = tokenString;
  state.thatReturnsFalse = tokenString(false);
  state.thatReturnsTrue = tokenString(true);
  state.thatReturnsNull = tokenString(null);
  /**
   * @return {?}
   */
  state.thatReturnsThis = function() {
    return this;
  };
  /**
   * @param {?} arg
   * @return {?}
   */
  state.thatReturnsArgument = function(arg) {
    return arg;
  };
  /** @type {function (): undefined} */
  module.exports = state;
}, function(dataAndEvents, ctx, $) {
  Object.defineProperty(ctx, "__esModule", {
    value : true
  });
  $.d(ctx, "createLocation", function() {
    return load;
  });
  $.d(ctx, "locationsAreEqual", function() {
    return Parser;
  });
  var obj = $(30);
  var options = $(31);
  var frame = $(5);
  var merge = Object.assign || function(expectedHashCode) {
    /** @type {number} */
    var i = 1;
    for (;i < arguments.length;i++) {
      var iterable = arguments[i];
      var key;
      for (key in iterable) {
        if (Object.prototype.hasOwnProperty.call(iterable, key)) {
          expectedHashCode[key] = iterable[key];
        }
      }
    }
    return expectedHashCode;
  };
  /**
   * @param {string} pdataOld
   * @param {?} opt
   * @param {?} id
   * @param {boolean} url
   * @return {?}
   */
  var load = function(pdataOld, opt, id, url) {
    var options = void 0;
    if ("string" == typeof pdataOld) {
      (options = Object(frame.parsePath)(pdataOld)).state = opt;
    } else {
      if (void 0 === (options = merge({}, pdataOld)).pathname) {
        /** @type {string} */
        options.pathname = "";
      }
      if (options.search) {
        if ("?" !== options.search.charAt(0)) {
          /** @type {string} */
          options.search = "?" + options.search;
        }
      } else {
        /** @type {string} */
        options.search = "";
      }
      if (options.hash) {
        if ("#" !== options.hash.charAt(0)) {
          /** @type {string} */
          options.hash = "#" + options.hash;
        }
      } else {
        /** @type {string} */
        options.hash = "";
      }
      if (void 0 !== opt) {
        if (void 0 === options.state) {
          options.state = opt;
        }
      }
    }
    try {
      /** @type {string} */
      options.pathname = decodeURI(options.pathname);
    } catch (err) {
      throw err instanceof URIError ? new URIError('Pathname "' + options.pathname + '" could not be decoded. This is likely caused by an invalid percent-encoding.') : err;
    }
    return id && (options.key = id), url ? options.pathname ? "/" !== options.pathname.charAt(0) && (options.pathname = Object(obj.default)(options.pathname, url.pathname)) : options.pathname = url.pathname : options.pathname || (options.pathname = "/"), options;
  };
  /**
   * @param {Object} data
   * @param {Object} self
   * @return {?}
   */
  var Parser = function(data, self) {
    return data.pathname === self.pathname && (data.search === self.search && (data.hash === self.hash && (data.key === self.key && Object(options.default)(data.state, self.state))));
  };
}, function(module, dataAndEvents, deepDataAndEvents) {
  /**
   * @param {string} varname
   * @return {undefined}
   */
  var register = function(varname) {
  };
  /**
   * @param {?} expectedHashCode
   * @param {string} value
   * @param {Object} expectedNumberOfNonCommentArgs
   * @param {string} def
   * @param {?} chai
   * @param {?} z
   * @param {?} h
   * @param {?} includeAll
   * @return {undefined}
   */
  module.exports = function(expectedHashCode, value, expectedNumberOfNonCommentArgs, def, chai, z, h, includeAll) {
    if (register(value), !expectedHashCode) {
      var err;
      if (void 0 === value) {
        /** @type {Error} */
        err = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        /** @type {Array} */
        var seq1 = [expectedNumberOfNonCommentArgs, def, chai, z, h, includeAll];
        /** @type {number} */
        var f = 0;
        /** @type {string} */
        (err = new Error(value.replace(/%s/g, function() {
          return seq1[f++];
        }))).name = "Invariant Violation";
      }
      throw err.framesToPop = 1, err;
    }
  };
}, function(dataAndEvents, object, deepDataAndEvents) {
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  /**
   * @param {?} expectedHashCode
   * @return {undefined}
   */
  object.default = function(expectedHashCode) {
    if ("undefined" != typeof console) {
      if ("function" == typeof console.error) {
        console.error(expectedHashCode);
      }
    }
    try {
      throw new Error(expectedHashCode);
    } catch (t) {
    }
  };
}, function(dataAndEvents, object, merge) {
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  var options = merge(64);
  var obj = merge(69);
  var opts = merge(71);
  /** @type {string} */
  var a = "[object Object]";
  var p = Function.prototype;
  var ObjProto = Object.prototype;
  /** @type {function (this:Function): string} */
  var ostring = p.toString;
  /** @type {function (this:Object, *): boolean} */
  var hasOwnProperty = ObjProto.hasOwnProperty;
  /** @type {string} */
  var arrayMarker = ostring.call(Object);
  /**
   * @param {?} expectedHashCode
   * @return {?}
   */
  object.default = function(expectedHashCode) {
    if (!Object(opts.default)(expectedHashCode) || Object(options.default)(expectedHashCode) != a) {
      return false;
    }
    var constructor = Object(obj.default)(expectedHashCode);
    if (null === constructor) {
      return true;
    }
    var it = hasOwnProperty.call(constructor, "constructor") && constructor.constructor;
    return "function" == typeof it && (it instanceof it && ostring.call(it) == arrayMarker);
  };
}, function(deepDataAndEvents, dataAndEvents, require) {
  /**
   * @param {Object} options
   * @return {?}
   */
  function getOptions(options) {
    return options && options.__esModule ? options : {
      default : options
    };
  }
  /** @type {boolean} */
  dataAndEvents.__esModule = true;
  dataAndEvents.locationsAreEqual = dataAndEvents.createLocation = void 0;
  var compileOptions = Object.assign || function(expectedHashCode) {
    /** @type {number} */
    var i = 1;
    for (;i < arguments.length;i++) {
      var iterable = arguments[i];
      var key;
      for (key in iterable) {
        if (Object.prototype.hasOwnProperty.call(iterable, key)) {
          expectedHashCode[key] = iterable[key];
        }
      }
    }
    return expectedHashCode;
  };
  var obj = getOptions(require(30));
  var opts = getOptions(require(31));
  var Block = require(4);
  /**
   * @param {string} pdataOld
   * @param {?} s
   * @param {?} k
   * @param {boolean} url
   * @return {?}
   */
  dataAndEvents.createLocation = function(pdataOld, s, k, url) {
    var options = void 0;
    if ("string" == typeof pdataOld) {
      (options = (0, Block.parsePath)(pdataOld)).state = s;
    } else {
      if (void 0 === (options = compileOptions({}, pdataOld)).pathname) {
        /** @type {string} */
        options.pathname = "";
      }
      if (options.search) {
        if ("?" !== options.search.charAt(0)) {
          /** @type {string} */
          options.search = "?" + options.search;
        }
      } else {
        /** @type {string} */
        options.search = "";
      }
      if (options.hash) {
        if ("#" !== options.hash.charAt(0)) {
          /** @type {string} */
          options.hash = "#" + options.hash;
        }
      } else {
        /** @type {string} */
        options.hash = "";
      }
      if (void 0 !== s) {
        if (void 0 === options.state) {
          options.state = s;
        }
      }
    }
    try {
      /** @type {string} */
      options.pathname = decodeURI(options.pathname);
    } catch (err) {
      throw err instanceof URIError ? new URIError('Pathname "' + options.pathname + '" could not be decoded. This is likely caused by an invalid percent-encoding.') : err;
    }
    return k && (options.key = k), url ? options.pathname ? "/" !== options.pathname.charAt(0) && (options.pathname = (0, obj.default)(options.pathname, url.pathname)) : options.pathname = url.pathname : options.pathname || (options.pathname = "/"), options;
  };
  /**
   * @param {Object} data
   * @param {Object} self
   * @return {?}
   */
  dataAndEvents.locationsAreEqual = function(data, self) {
    return data.pathname === self.pathname && (data.search === self.search && (data.hash === self.hash && (data.key === self.key && (0, opts.default)(data.state, self.state))));
  };
}, function(dataAndEvents, obj, $sanitize) {
  /** @type {boolean} */
  obj.__esModule = true;
  var opts = function(d) {
    return d && d.__esModule ? d : {
      default : d
    };
  }($sanitize(1));
  /**
   * @return {?}
   */
  obj.default = function() {
    /** @type {null} */
    var fn = null;
    /** @type {Array} */
    var filenames = [];
    return{
      /**
       * @param {Object} length
       * @return {?}
       */
      setPrompt : function(length) {
        return(0, opts.default)(null == fn, "A history supports only one prompt at a time"), fn = length, function() {
          if (fn === length) {
            /** @type {null} */
            fn = null;
          }
        };
      },
      /**
       * @param {?} test
       * @param {string} type
       * @param {?} handler
       * @param {Function} next
       * @return {undefined}
       */
      confirmTransitionTo : function(test, type, handler, next) {
        if (null != fn) {
          var err = "function" == typeof fn ? fn(test, type) : fn;
          if ("string" == typeof err) {
            if ("function" == typeof handler) {
              handler(err, next);
            } else {
              (0, opts.default)(false, "A history needs a getUserConfirmation function in order to use a prompt message");
              next(true);
            }
          } else {
            next(false !== err);
          }
        } else {
          next(true);
        }
      },
      /**
       * @param {Function} clicked
       * @return {?}
       */
      appendListener : function(clicked) {
        /** @type {boolean} */
        var n = true;
        /**
         * @return {undefined}
         */
        var expectedHashCode = function() {
          if (n) {
            clicked.apply(void 0, arguments);
          }
        };
        return filenames.push(expectedHashCode), function() {
          /** @type {boolean} */
          n = false;
          filenames = filenames.filter(function(dataAndEvents) {
            return dataAndEvents !== expectedHashCode;
          });
        };
      },
      /**
       * @return {undefined}
       */
      notifyListeners : function() {
        /** @type {number} */
        var l = arguments.length;
        /** @type {Array} */
        var args = Array(l);
        /** @type {number} */
        var i = 0;
        for (;i < l;i++) {
          args[i] = arguments[i];
        }
        filenames.forEach(function(wrapper) {
          return wrapper.apply(void 0, args);
        });
      }
    };
  };
}, function(dataAndEvents, item, expression) {
  Object.defineProperty(item, "__esModule", {
    value : true
  });
  var obj = expression(14);
  item.default = obj.default;
}, function(dataAndEvents, prototype, jQuery) {
  /**
   * @param {?} dataAndEvents
   * @param {Function} deepDataAndEvents
   * @return {undefined}
   */
  function clone(dataAndEvents, deepDataAndEvents) {
    if (!(dataAndEvents instanceof deepDataAndEvents)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  /**
   * @param {string} object
   * @param {?} obj
   * @return {?}
   */
  function keys(object, obj) {
    if (!object) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return!obj || "object" != typeof obj && "function" != typeof obj ? object : obj;
  }
  /**
   * @param {Object} m
   * @param {Object} b
   * @return {undefined}
   */
  function create(m, b) {
    if ("function" != typeof b && null !== b) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof b);
    }
    /** @type {Object} */
    m.prototype = Object.create(b && b.prototype, {
      constructor : {
        value : m,
        enumerable : false,
        writable : true,
        configurable : true
      }
    });
    if (b) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(m, b);
      } else {
        /** @type {Object} */
        m.__proto__ = b;
      }
    }
  }
  Object.defineProperty(prototype, "__esModule", {
    value : true
  });
  var scripts = jQuery(1);
  var mapped = jQuery.n(scripts);
  var which = jQuery(3);
  var ch = jQuery.n(which);
  var elems = jQuery(0);
  var dom = jQuery.n(elems);
  var content = jQuery(2);
  var obj = jQuery.n(content);
  var router = Object.assign || function(expectedHashCode) {
    /** @type {number} */
    var i = 1;
    for (;i < arguments.length;i++) {
      var iterable = arguments[i];
      var key;
      for (key in iterable) {
        if (Object.prototype.hasOwnProperty.call(iterable, key)) {
          expectedHashCode[key] = iterable[key];
        }
      }
    }
    return expectedHashCode;
  };
  var Constructor = function(f) {
    /**
     * @return {?}
     */
    function e() {
      var promise;
      var self;
      var suiteView;
      clone(this, e);
      /** @type {number} */
      var l = arguments.length;
      /** @type {Array} */
      var args = Array(l);
      /** @type {number} */
      var i = 0;
      for (;i < l;i++) {
        args[i] = arguments[i];
      }
      return promise = self = keys(this, f.call.apply(f, [this].concat(args))), self.state = {
        match : self.computeMatch(self.props.history.location.pathname)
      }, suiteView = promise, keys(self, suiteView);
    }
    return create(e, f), e.prototype.getChildContext = function() {
      return{
        router : router({}, this.context.router, {
          history : this.props.history,
          route : {
            location : this.props.history.location,
            match : this.state.match
          }
        })
      };
    }, e.prototype.computeMatch = function(val) {
      return{
        path : "/",
        url : "/",
        params : {},
        isExact : "/" === val
      };
    }, e.prototype.componentWillMount = function() {
      var node = this;
      var instance = this.props;
      var nodes = instance.children;
      var options = instance.history;
      ch()(null == nodes || 1 === dom.a.Children.count(nodes), "A <Router> may have only one child element");
      this.unlisten = options.listen(function() {
        node.setState({
          match : node.computeMatch(options.location.pathname)
        });
      });
    }, e.prototype.componentWillReceiveProps = function(keepData) {
      mapped()(this.props.history === keepData.history, "You cannot change <Router history>");
    }, e.prototype.componentWillUnmount = function() {
      this.unlisten();
    }, e.prototype.render = function() {
      var name = this.props.children;
      return name ? dom.a.Children.only(name) : null;
    }, e;
  }(dom.a.Component);
  Constructor.propTypes = {
    history : obj.a.object.isRequired,
    children : obj.a.node
  };
  Constructor.contextTypes = {
    router : obj.a.object
  };
  Constructor.childContextTypes = {
    router : obj.a.object.isRequired
  };
  prototype.default = Constructor;
}, function(dataAndEvents, object, $) {
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  var content = $(92);
  var next = $.n(content);
  var map = {};
  /** @type {number} */
  var a = 0;
  /**
   * @param {?} name
   * @param {Object} options
   * @return {?}
   */
  var compiler = function(name, options) {
    /** @type {string} */
    var objUid = "" + options.end + options.strict + options.sensitive;
    var benchmarks = map[objUid] || (map[objUid] = {});
    if (benchmarks[name]) {
      return benchmarks[name];
    }
    /** @type {Array} */
    var mapKeys = [];
    var ref = {
      re : next()(name, mapKeys, options),
      keys : mapKeys
    };
    return a < 1E4 && (benchmarks[name] = ref, a++), ref;
  };
  /**
   * @param {?} expectedHashCode
   * @return {?}
   */
  object.default = function(expectedHashCode) {
    var opts = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    if ("string" == typeof opts) {
      opts = {
        path : opts
      };
    }
    var options = opts;
    var value = options.path;
    var str = void 0 === value ? "/" : value;
    var exact = options.exact;
    var transitionEnd = void 0 !== exact && exact;
    var successCb = options.strict;
    var isStrict = void 0 !== successCb && successCb;
    var async = options.sensitive;
    var me = compiler(str, {
      end : transitionEnd,
      strict : isStrict,
      sensitive : void 0 !== async && async
    });
    var re = me.re;
    var keys = me.keys;
    var args = re.exec(expectedHashCode);
    if (!args) {
      return null;
    }
    var url = args[0];
    var buf = args.slice(1);
    /** @type {boolean} */
    var isImage = expectedHashCode === url;
    return transitionEnd && !isImage ? null : {
      path : str,
      url : "/" === str && "" === url ? "/" : url,
      isExact : isImage,
      params : keys.reduce(function(pair, element, off) {
        return pair[element.name] = buf[off], pair;
      }, {})
    };
  };
}, function(dataAndEvents, object, jQuery) {
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  var scripts = jQuery(1);
  var mapped = jQuery.n(scripts);
  /**
   * @return {?}
   */
  object.default = function() {
    /** @type {null} */
    var fn = null;
    /** @type {Array} */
    var filenames = [];
    return{
      /**
       * @param {Object} length
       * @return {?}
       */
      setPrompt : function(length) {
        return mapped()(null == fn, "A history supports only one prompt at a time"), fn = length, function() {
          if (fn === length) {
            /** @type {null} */
            fn = null;
          }
        };
      },
      /**
       * @param {?} test
       * @param {string} type
       * @param {?} handler
       * @param {Function} next
       * @return {undefined}
       */
      confirmTransitionTo : function(test, type, handler, next) {
        if (null != fn) {
          var err = "function" == typeof fn ? fn(test, type) : fn;
          if ("string" == typeof err) {
            if ("function" == typeof handler) {
              handler(err, next);
            } else {
              mapped()(false, "A history needs a getUserConfirmation function in order to use a prompt message");
              next(true);
            }
          } else {
            next(false !== err);
          }
        } else {
          next(true);
        }
      },
      /**
       * @param {Function} clicked
       * @return {?}
       */
      appendListener : function(clicked) {
        /** @type {boolean} */
        var n = true;
        /**
         * @return {undefined}
         */
        var expectedHashCode = function() {
          if (n) {
            clicked.apply(void 0, arguments);
          }
        };
        return filenames.push(expectedHashCode), function() {
          /** @type {boolean} */
          n = false;
          filenames = filenames.filter(function(dataAndEvents) {
            return dataAndEvents !== expectedHashCode;
          });
        };
      },
      /**
       * @return {undefined}
       */
      notifyListeners : function() {
        /** @type {number} */
        var l = arguments.length;
        /** @type {Array} */
        var args = Array(l);
        /** @type {number} */
        var i = 0;
        for (;i < l;i++) {
          args[i] = arguments[i];
        }
        filenames.forEach(function(wrapper) {
          return wrapper.apply(void 0, args);
        });
      }
    };
  };
}, function(module, dataAndEvents, deepDataAndEvents) {
  /**
   * @param {number} o
   * @return {?}
   */
  function toObject(o) {
    if (null === o || void 0 === o) {
      throw new TypeError("Object.assign cannot be called with null or undefined");
    }
    return Object(o);
  }
  var freeze = Object.getOwnPropertySymbols;
  /** @type {function (this:Object, *): boolean} */
  var own = Object.prototype.hasOwnProperty;
  /** @type {function (this:Object, string): boolean} */
  var fn = Object.prototype.propertyIsEnumerable;
  module.exports = function() {
    try {
      if (!Object.assign) {
        return false;
      }
      /** @type {String} */
      var s = new String("abc");
      if (s[5] = "de", "5" === Object.getOwnPropertyNames(s)[0]) {
        return false;
      }
      var value = {};
      /** @type {number} */
      var end = 0;
      for (;end < 10;end++) {
        /** @type {number} */
        value["_" + String.fromCharCode(end)] = end;
      }
      if ("0123456789" !== Object.getOwnPropertyNames(value).map(function(arrayIndex) {
        return value[arrayIndex];
      }).join("")) {
        return false;
      }
      var pdataOld = {};
      return "abcdefghijklmnopqrst".split("").forEach(function(testname) {
        /** @type {string} */
        pdataOld[testname] = testname;
      }), "abcdefghijklmnopqrst" === Object.keys(Object.assign({}, pdataOld)).join("");
    } catch (t) {
      return false;
    }
  }() ? Object.assign : function(expectedHashCode, value) {
    var self;
    var items;
    var obj = toObject(expectedHashCode);
    /** @type {number} */
    var aidx = 1;
    for (;aidx < arguments.length;aidx++) {
      self = Object(arguments[aidx]);
      var key;
      for (key in self) {
        if (own.call(self, key)) {
          obj[key] = self[key];
        }
      }
      if (freeze) {
        items = freeze(self);
        /** @type {number} */
        var i = 0;
        for (;i < items.length;i++) {
          if (fn.call(self, items[i])) {
            obj[items[i]] = self[items[i]];
          }
        }
      }
    }
    return obj;
  };
}, function(module, dataAndEvents, deepDataAndEvents) {
  var JsDiff = {};
  module.exports = JsDiff;
}, function(dataAndEvents, ctx, f) {
  Object.defineProperty(ctx, "__esModule", {
    value : true
  });
  f.d(ctx, "subscriptionShape", function() {
    return o;
  });
  f.d(ctx, "storeShape", function() {
    return a;
  });
  var s = f(2);
  var edge = f.n(s);
  var o = edge.a.shape({
    trySubscribe : edge.a.func.isRequired,
    tryUnsubscribe : edge.a.func.isRequired,
    notifyNestedSubs : edge.a.func.isRequired,
    isSubscribed : edge.a.func.isRequired
  });
  var a = edge.a.shape({
    subscribe : edge.a.func.isRequired,
    dispatch : edge.a.func.isRequired,
    getState : edge.a.func.isRequired
  });
}, function(dataAndEvents, object, jQuery) {
  /**
   * @param {?} memo
   * @param {Function} elem
   * @return {undefined}
   */
  function reduce(memo, elem) {
    if (!(memo instanceof elem)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  /**
   * @param {string} dataAndEvents
   * @param {?} deepDataAndEvents
   * @return {?}
   */
  function clone(dataAndEvents, deepDataAndEvents) {
    if (!dataAndEvents) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return!deepDataAndEvents || "object" != typeof deepDataAndEvents && "function" != typeof deepDataAndEvents ? dataAndEvents : deepDataAndEvents;
  }
  /**
   * @param {Object} self
   * @param {Object} b
   * @return {undefined}
   */
  function f(self, b) {
    if ("function" != typeof b && null !== b) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof b);
    }
    /** @type {Object} */
    self.prototype = Object.create(b && b.prototype, {
      constructor : {
        value : self,
        enumerable : false,
        writable : true,
        configurable : true
      }
    });
    if (b) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(self, b);
      } else {
        /** @type {Object} */
        self.__proto__ = b;
      }
    }
  }
  /**
   * @param {Object} data
   * @param {Array} arg
   * @return {?}
   */
  function isObject(data, arg) {
    var cache = {};
    var prop;
    for (prop in data) {
      if (!(arg.indexOf(prop) >= 0)) {
        if (Object.prototype.hasOwnProperty.call(data, prop)) {
          cache[prop] = data[prop];
        }
      }
    }
    return cache;
  }
  /**
   * @return {undefined}
   */
  function run() {
  }
  /**
   * @param {?} callback
   * @param {?} action
   * @return {?}
   */
  function unbind(callback, action) {
    var self = {
      /**
       * @param {?} expectedHashCode
       * @return {undefined}
       */
      run : function(expectedHashCode) {
        try {
          var value = callback(action.getState(), expectedHashCode);
          if (value !== self.props || self.error) {
            /** @type {boolean} */
            self.shouldComponentUpdate = true;
            self.props = value;
            /** @type {null} */
            self.error = null;
          }
        } catch (e) {
          /** @type {boolean} */
          self.shouldComponentUpdate = true;
          self.error = e;
        }
      }
    };
    return self;
  }
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  /**
   * @param {?} expectedHashCode
   * @return {?}
   */
  object.default = function(expectedHashCode) {
    var ids;
    var layerData;
    var config = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    var a = config.getDisplayName;
    var getName = void 0 === a ? function(putativeSpy) {
      return "ConnectAdvanced(" + putativeSpy + ")";
    } : a;
    var methodName = config.methodName;
    var action = void 0 === methodName ? "connectAdvanced" : methodName;
    var e = config.renderCountProp;
    var s = void 0 === e ? void 0 : e;
    var index = config.shouldHandleStateChanges;
    var id = void 0 === index || index;
    var type = config.storeKey;
    var key = void 0 === type ? "store" : type;
    var channel = config.withRef;
    var r20 = void 0 !== channel && channel;
    var camelKey = isObject(config, ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef"]);
    /** @type {string} */
    var i = key + "Subscription";
    /** @type {number} */
    var version = y++;
    var propTypes = (ids = {}, ids[key] = current.storeShape, ids[i] = current.subscriptionShape, ids);
    var childContextTypes = (layerData = {}, layerData[i] = current.subscriptionShape, layerData);
    return function(obj) {
      isArray()("function" == typeof obj, "You must pass a component to the function returned by connect. Instead received " + JSON.stringify(obj));
      var value = obj.displayName || (obj.name || "Component");
      var name = getName(value);
      var data = dataAttr({}, camelKey, {
        getDisplayName : getName,
        methodName : action,
        renderCountProp : s,
        shouldHandleStateChanges : id,
        storeKey : key,
        withRef : r20,
        displayName : name,
        wrappedComponentName : value,
        /** @type {Function} */
        WrappedComponent : obj
      });
      var Constructor = function(callback) {
        /**
         * @param {?} data
         * @param {?} value
         * @return {?}
         */
        function self(data, value) {
          reduce(this, self);
          var params = clone(this, callback.call(this, data, value));
          return params.version = version, params.state = {}, params.renderCount = 0, params.store = data[key] || value[key], params.propsMode = Boolean(data[key]), params.setWrappedInstance = params.setWrappedInstance.bind(params), isArray()(params.store, 'Could not find "' + key + '" in either the context or props of "' + name + '". Either wrap the root component in a <Provider>, or explicitly pass "' + key + '" as a prop to "' + name + '".'), params.initSelector(), params.initSubscription(), params;
        }
        return f(self, callback), self.prototype.getChildContext = function() {
          var prevSources;
          var newValues = this.propsMode ? null : this.subscription;
          return prevSources = {}, prevSources[i] = newValues || this.context[i], prevSources;
        }, self.prototype.componentDidMount = function() {
          if (id) {
            this.subscription.trySubscribe();
            this.selector.run(this.props);
            if (this.selector.shouldComponentUpdate) {
              this.forceUpdate();
            }
          }
        }, self.prototype.componentWillReceiveProps = function(expectedHashCode) {
          this.selector.run(expectedHashCode);
        }, self.prototype.shouldComponentUpdate = function() {
          return this.selector.shouldComponentUpdate;
        }, self.prototype.componentWillUnmount = function() {
          if (this.subscription) {
            this.subscription.tryUnsubscribe();
          }
          /** @type {null} */
          this.subscription = null;
          /** @type {function (): undefined} */
          this.notifyNestedSubs = run;
          /** @type {null} */
          this.store = null;
          /** @type {function (): undefined} */
          this.selector.run = run;
          /** @type {boolean} */
          this.selector.shouldComponentUpdate = false;
        }, self.prototype.getWrappedInstance = function() {
          return isArray()(r20, "To access the wrapped instance, you need to specify { withRef: true } in the options argument of the " + action + "() call."), this.wrappedInstance;
        }, self.prototype.setWrappedInstance = function(expectedHashCode) {
          this.wrappedInstance = expectedHashCode;
        }, self.prototype.initSelector = function() {
          var restoreScript = expectedHashCode(this.store.dispatch, data);
          this.selector = unbind(restoreScript, this.store);
          this.selector.run(this.props);
        }, self.prototype.initSubscription = function() {
          if (id) {
            var subscription = (this.propsMode ? this.props : this.context)[i];
            this.subscription = new obj.default(this.store, subscription, this.onStateChange.bind(this));
            this.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(this.subscription);
          }
        }, self.prototype.onStateChange = function() {
          this.selector.run(this.props);
          if (this.selector.shouldComponentUpdate) {
            this.componentDidUpdate = this.notifyNestedSubsOnComponentDidUpdate;
            this.setState(attributes);
          } else {
            this.notifyNestedSubs();
          }
        }, self.prototype.notifyNestedSubsOnComponentDidUpdate = function() {
          this.componentDidUpdate = void 0;
          this.notifyNestedSubs();
        }, self.prototype.isSubscribed = function() {
          return Boolean(this.subscription) && this.subscription.isSubscribed();
        }, self.prototype.addExtraProps = function(camelKey) {
          if (!(r20 || (s || this.propsMode && this.subscription))) {
            return camelKey;
          }
          var data = dataAttr({}, camelKey);
          return r20 && (data.ref = this.setWrappedInstance), s && (data[s] = this.renderCount++), this.propsMode && (this.subscription && (data[i] = this.subscription)), data;
        }, self.prototype.render = function() {
          var s = this.selector;
          if (s.shouldComponentUpdate = false, s.error) {
            throw s.error;
          }
          return Object(scripts.createElement)(obj, this.addExtraProps(s.props));
        }, self;
      }(scripts.Component);
      return Constructor.WrappedComponent = obj, Constructor.displayName = name, Constructor.childContextTypes = childContextTypes, Constructor.contextTypes = propTypes, Constructor.propTypes = propTypes, ch()(Constructor, obj);
    };
  };
  var which = jQuery(21);
  var ch = jQuery.n(which);
  var elems = jQuery(3);
  var isArray = jQuery.n(elems);
  var scripts = jQuery(0);
  var obj = (jQuery.n(scripts), jQuery(60));
  var current = jQuery(19);
  var dataAttr = Object.assign || function(expectedHashCode) {
    /** @type {number} */
    var i = 1;
    for (;i < arguments.length;i++) {
      var iterable = arguments[i];
      var key;
      for (key in iterable) {
        if (Object.prototype.hasOwnProperty.call(iterable, key)) {
          expectedHashCode[key] = iterable[key];
        }
      }
    }
    return expectedHashCode;
  };
  /** @type {number} */
  var y = 0;
  var attributes = {};
}, function(module, dataAndEvents, deepDataAndEvents) {
  var doc = {
    childContextTypes : true,
    contextTypes : true,
    defaultProps : true,
    displayName : true,
    getDefaultProps : true,
    mixins : true,
    propTypes : true,
    type : true
  };
  var obj = {
    name : true,
    length : true,
    prototype : true,
    caller : true,
    callee : true,
    arguments : true,
    arity : true
  };
  /** @type {function (Object, string, Object): Object} */
  var setDescriptor = Object.defineProperty;
  /** @type {function (Object): Array.<string>} */
  var getOwnPropertyNames = Object.getOwnPropertyNames;
  var func = Object.getOwnPropertySymbols;
  /** @type {function (Object, string): (ObjectPropertyDescriptor|undefined)} */
  var getDescriptor = Object.getOwnPropertyDescriptor;
  /** @type {function (Object): (Object|null)} */
  var getPrototypeOf = Object.getPrototypeOf;
  /** @type {(Object|null)} */
  var l = getPrototypeOf && getPrototypeOf(Object);
  /**
   * @param {?} expectedHashCode
   * @param {string} value
   * @param {Object} expectedNumberOfNonCommentArgs
   * @return {?}
   */
  module.exports = function listener(expectedHashCode, value, expectedNumberOfNonCommentArgs) {
    if ("string" != typeof value) {
      if (l) {
        /** @type {(Object|null)} */
        var pdataOld = getPrototypeOf(value);
        if (pdataOld) {
          if (pdataOld !== l) {
            listener(expectedHashCode, pdataOld, expectedNumberOfNonCommentArgs);
          }
        }
      }
      /** @type {Array.<string>} */
      var values = getOwnPropertyNames(value);
      if (func) {
        /** @type {Array} */
        values = values.concat(func(value));
      }
      /** @type {number} */
      var i = 0;
      for (;i < values.length;++i) {
        var key = values[i];
        if (!(doc[key] || (obj[key] || expectedNumberOfNonCommentArgs && expectedNumberOfNonCommentArgs[key]))) {
          /** @type {(ObjectPropertyDescriptor|undefined)} */
          var descriptor = getDescriptor(value, key);
          try {
            setDescriptor(expectedHashCode, key, descriptor);
          } catch (t) {
          }
        }
      }
      return expectedHashCode;
    }
    return expectedHashCode;
  };
}, function(dataAndEvents, ctx, $) {
  Object.defineProperty(ctx, "__esModule", {
    value : true
  });
  var obj = $(23);
  var opts = $(76);
  var property = $(77);
  var desc = $(78);
  var opt = $(27);
  $(26);
  $.d(ctx, "createStore", function() {
    return obj.default;
  });
  $.d(ctx, "combineReducers", function() {
    return opts.default;
  });
  $.d(ctx, "bindActionCreators", function() {
    return property.default;
  });
  $.d(ctx, "applyMiddleware", function() {
    return desc.default;
  });
  $.d(ctx, "compose", function() {
    return opt.default;
  });
}, function(dataAndEvents, self, $) {
  /**
   * @param {?} expectedHashCode
   * @param {string} value
   * @param {Object} expectedNumberOfNonCommentArgs
   * @return {?}
   */
  function set(expectedHashCode, value, expectedNumberOfNonCommentArgs) {
    /**
     * @return {undefined}
     */
    function callback() {
      if (result === collection) {
        result = collection.slice();
      }
    }
    /**
     * @return {?}
     */
    function setSrc() {
      return encodedValue;
    }
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    function subscribe(expectedHashCode) {
      if ("function" != typeof expectedHashCode) {
        throw new Error("Expected listener to be a function.");
      }
      /** @type {boolean} */
      var e = true;
      return callback(), result.push(expectedHashCode), function() {
        if (e) {
          /** @type {boolean} */
          e = false;
          callback();
          var index = result.indexOf(expectedHashCode);
          result.splice(index, 1);
        }
      };
    }
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    function encode(expectedHashCode) {
      if (!Object(options.default)(expectedHashCode)) {
        throw new Error("Actions must be plain objects. Use custom middleware for async actions.");
      }
      if (void 0 === expectedHashCode.type) {
        throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');
      }
      if (v) {
        throw new Error("Reducers may not dispatch actions.");
      }
      try {
        /** @type {boolean} */
        v = true;
        encodedValue = encodeURIComponent(encodedValue, expectedHashCode);
      } finally {
        /** @type {boolean} */
        v = false;
      }
      var codeSegments = collection = result;
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        (0, codeSegments[i])();
      }
      return expectedHashCode;
    }
    var _vertexPool;
    if ("function" == typeof value && (void 0 === expectedNumberOfNonCommentArgs && (expectedNumberOfNonCommentArgs = value, value = void 0)), void 0 !== expectedNumberOfNonCommentArgs) {
      if ("function" != typeof expectedNumberOfNonCommentArgs) {
        throw new Error("Expected the enhancer to be a function.");
      }
      return expectedNumberOfNonCommentArgs(set)(expectedHashCode, value);
    }
    if ("function" != typeof expectedHashCode) {
      throw new Error("Expected the reducer to be a function.");
    }
    /** @type {Function} */
    var encodeURIComponent = expectedHashCode;
    /** @type {string} */
    var encodedValue = value;
    /** @type {Array} */
    var collection = [];
    var result = collection;
    /** @type {boolean} */
    var v = false;
    return encode({
      type : env.INIT
    }), _vertexPool = {
      /** @type {function (?): ?} */
      dispatch : encode,
      /** @type {function (?): ?} */
      subscribe : subscribe,
      /** @type {function (): ?} */
      getState : setSrc,
      /**
       * @param {Function} fn
       * @return {undefined}
       */
      replaceReducer : function(fn) {
        if ("function" != typeof fn) {
          throw new Error("Expected the nextReducer to be a function.");
        }
        /** @type {Function} */
        encodeURIComponent = fn;
        encode({
          type : env.INIT
        });
      }
    }, _vertexPool[face.a] = function() {
      var _vertexPool;
      /** @type {function (?): ?} */
      var isFunction = subscribe;
      return _vertexPool = {
        /**
         * @param {?} expectedHashCode
         * @return {?}
         */
        subscribe : function(expectedHashCode) {
          /**
           * @return {undefined}
           */
          function resolve() {
            if (expectedHashCode.next) {
              expectedHashCode.next(setSrc());
            }
          }
          if ("object" != typeof expectedHashCode) {
            throw new TypeError("Expected the observer to be an object.");
          }
          return resolve(), {
            unsubscribe : isFunction(resolve)
          };
        }
      }, _vertexPool[face.a] = function() {
        return this;
      }, _vertexPool;
    }, _vertexPool;
  }
  Object.defineProperty(self, "__esModule", {
    value : true
  });
  $.d(self, "ActionTypes", function() {
    return env;
  });
  /** @type {function (?, string, Object): ?} */
  self.default = set;
  var options = $(10);
  var content = $(72);
  var face = $.n(content);
  var env = {
    INIT : "@@redux/INIT"
  };
}, function(dataAndEvents, obj, require) {
  Object.defineProperty(obj, "__esModule", {
    value : true
  });
  var value = require(65).default.Symbol;
  obj.default = value;
}, function(module, dataAndEvents) {
  var scope;
  scope = function() {
    return this;
  }();
  try {
    scope = scope || (Function("return this")() || (0, eval)("this"));
  } catch (t) {
    if ("object" == typeof window) {
      /** @type {Window} */
      scope = window;
    }
  }
  module.exports = scope;
}, function(dataAndEvents, object, deepDataAndEvents) {
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  /**
   * @param {?} expectedHashCode
   * @return {undefined}
   */
  object.default = function(expectedHashCode) {
    if ("undefined" != typeof console) {
      if ("function" == typeof console.error) {
        console.error(expectedHashCode);
      }
    }
    try {
      throw new Error(expectedHashCode);
    } catch (t) {
    }
  };
}, function(dataAndEvents, object, deepDataAndEvents) {
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  /**
   * @return {?}
   */
  object.default = function() {
    /** @type {number} */
    var l = arguments.length;
    /** @type {Array} */
    var args = Array(l);
    /** @type {number} */
    var i = 0;
    for (;i < l;i++) {
      args[i] = arguments[i];
    }
    return 0 === args.length ? function(dataAndEvents) {
      return dataAndEvents;
    } : 1 === args.length ? args[0] : args.reduce(function(resolved, matcherFunction) {
      return function() {
        return resolved(matcherFunction.apply(void 0, arguments));
      };
    });
  };
}, function(dataAndEvents, ctx, $sanitize) {
  /**
   * @param {string} obj
   * @return {?}
   */
  function _fn(obj) {
    return null !== obj.dependsOnOwnProps && void 0 !== obj.dependsOnOwnProps ? Boolean(obj.dependsOnOwnProps) : 1 !== obj.length;
  }
  Object.defineProperty(ctx, "__esModule", {
    value : true
  });
  /**
   * @param {?} b
   * @return {?}
   */
  ctx.wrapMapToPropsConstant = function(b) {
    return function(value, locals) {
      /**
       * @return {?}
       */
      function set() {
        return values;
      }
      var values = b(value, locals);
      return set.dependsOnOwnProps = false, set;
    };
  };
  /** @type {function (string): ?} */
  ctx.getDependsOnOwnProps = _fn;
  /**
   * @param {(RegExp|string)} walkers
   * @param {?} dataAndEvents
   * @return {?}
   */
  ctx.wrapMapToPropsFunc = function(walkers, dataAndEvents) {
    return function(dataAndEvents, member) {
      member.displayName;
      /**
       * @param {?} deepDataAndEvents
       * @param {?} opt_key
       * @return {?}
       */
      var getValues = function(deepDataAndEvents, opt_key) {
        return getValues.dependsOnOwnProps ? getValues.mapToProps(deepDataAndEvents, opt_key) : getValues.mapToProps(deepDataAndEvents);
      };
      return getValues.dependsOnOwnProps = true, getValues.mapToProps = function(deepDataAndEvents, key) {
        /** @type {(RegExp|string)} */
        getValues.mapToProps = walkers;
        getValues.dependsOnOwnProps = _fn(walkers);
        var wrapper = getValues(deepDataAndEvents, key);
        return "function" == typeof wrapper && (getValues.mapToProps = wrapper, getValues.dependsOnOwnProps = _fn(wrapper), wrapper = getValues(deepDataAndEvents, key)), wrapper;
      }, getValues;
    };
  };
  $sanitize(29);
}, function(dataAndEvents, object, expression) {
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  /**
   * @param {?} expectedHashCode
   * @param {string} value
   * @param {Object} expectedNumberOfNonCommentArgs
   * @return {undefined}
   */
  object.default = function(expectedHashCode, value, expectedNumberOfNonCommentArgs) {
    if (!Object(prop.default)(expectedHashCode)) {
      Object(obj.default)(expectedNumberOfNonCommentArgs + "() in " + value + " must return a plain object. Instead received " + expectedHashCode + ".");
    }
  };
  var prop = expression(10);
  var obj = expression(9);
}, function(dataAndEvents, object, deepDataAndEvents) {
  /**
   * @param {?} arg
   * @return {?}
   */
  function isObject(arg) {
    return "/" === arg.charAt(0);
  }
  /**
   * @param {Array} arr
   * @param {number} l
   * @return {undefined}
   */
  function makeArray(arr, l) {
    /** @type {number} */
    var i = l;
    var j = i + 1;
    var e = arr.length;
    for (;j < e;i += 1, j += 1) {
      arr[i] = arr[j];
    }
    arr.pop();
  }
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  /**
   * @param {?} expectedHashCode
   * @return {?}
   */
  object.default = function(expectedHashCode) {
    var src = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
    var _args = expectedHashCode && expectedHashCode.split("/") || [];
    var args = src && src.split("/") || [];
    var a = expectedHashCode && isObject(expectedHashCode);
    var b = src && isObject(src);
    var nb = a || b;
    if (expectedHashCode && isObject(expectedHashCode) ? args = _args : _args.length && (args.pop(), args = args.concat(_args)), !args.length) {
      return "/";
    }
    var round = void 0;
    if (args.length) {
      var value = args[args.length - 1];
      /** @type {boolean} */
      round = "." === value || (".." === value || "" === value);
    } else {
      /** @type {boolean} */
      round = false;
    }
    /** @type {number} */
    var f = 0;
    var l = args.length;
    for (;l >= 0;l--) {
      var parent = args[l];
      if ("." === parent) {
        makeArray(args, l);
      } else {
        if (".." === parent) {
          makeArray(args, l);
          f++;
        } else {
          if (f) {
            makeArray(args, l);
            f--;
          }
        }
      }
    }
    if (!nb) {
      for (;f--;f) {
        args.unshift("..");
      }
    }
    if (!!nb) {
      if (!("" === args[0])) {
        if (!(args[0] && isObject(args[0]))) {
          args.unshift("");
        }
      }
    }
    var num = args.join("/");
    return round && ("/" !== num.substr(-1) && (num += "/")), num;
  };
}, function(dataAndEvents, object, deepDataAndEvents) {
  /**
   * @param {?} expectedHashCode
   * @param {?} value
   * @return {?}
   */
  function each(expectedHashCode, value) {
    if (expectedHashCode === value) {
      return true;
    }
    if (null == expectedHashCode || null == value) {
      return false;
    }
    if (Array.isArray(expectedHashCode)) {
      return Array.isArray(value) && (expectedHashCode.length === value.length && expectedHashCode.every(function(expectedHashCode, arrayIndex) {
        return each(expectedHashCode, value[arrayIndex]);
      }));
    }
    var ret = void 0 === expectedHashCode ? "undefined" : isClassOf(expectedHashCode);
    if (ret !== (void 0 === value ? "undefined" : isClassOf(value))) {
      return false;
    }
    if ("object" === ret) {
      var funcs = expectedHashCode.valueOf();
      var pdataOld = value.valueOf();
      if (funcs !== expectedHashCode || pdataOld !== value) {
        return each(funcs, pdataOld);
      }
      /** @type {Array.<string>} */
      var e = Object.keys(expectedHashCode);
      /** @type {Array.<string>} */
      var keys = Object.keys(value);
      return e.length === keys.length && e.every(function(x) {
        return each(expectedHashCode[x], value[x]);
      });
    }
    return false;
  }
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  /** @type {function (?): ?} */
  var isClassOf = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(putativeSpy) {
    return typeof putativeSpy;
  } : function(b) {
    return b && ("function" == typeof Symbol && (b.constructor === Symbol && b !== Symbol.prototype)) ? "symbol" : typeof b;
  };
  /** @type {function (?, ?): ?} */
  object.default = each;
}, function(dataAndEvents, el, deepDataAndEvents) {
  /** @type {boolean} */
  el.__esModule = true;
  /** @type {boolean} */
  el.canUseDOM = !("undefined" == typeof window || (!window.document || !window.document.createElement));
  /**
   * @param {string} type
   * @param {Function} event
   * @param {boolean} recurring
   * @return {?}
   */
  el.addEventListener = function(type, event, recurring) {
    return type.addEventListener ? type.addEventListener(event, recurring, false) : type.attachEvent("on" + event, recurring);
  };
  /**
   * @param {Node} object
   * @param {string} type
   * @param {boolean} recurring
   * @return {?}
   */
  el.removeEventListener = function(object, type, recurring) {
    return object.removeEventListener ? object.removeEventListener(type, recurring, false) : object.detachEvent("on" + type, recurring);
  };
  /**
   * @param {?} expectedHashCode
   * @param {string} value
   * @return {?}
   */
  el.getConfirmation = function(expectedHashCode, value) {
    return value(window.confirm(expectedHashCode));
  };
  /**
   * @return {?}
   */
  el.supportsHistory = function() {
    /** @type {string} */
    var userAgent = window.navigator.userAgent;
    return(-1 === userAgent.indexOf("Android 2.") && -1 === userAgent.indexOf("Android 4.0") || (-1 === userAgent.indexOf("Mobile Safari") || (-1 !== userAgent.indexOf("Chrome") || -1 !== userAgent.indexOf("Windows Phone")))) && (window.history && "pushState" in window.history);
  };
  /**
   * @return {?}
   */
  el.supportsPopStateOnHashChange = function() {
    return-1 === window.navigator.userAgent.indexOf("Trident");
  };
  /**
   * @return {?}
   */
  el.supportsGoWithoutReloadUsingHash = function() {
    return-1 === window.navigator.userAgent.indexOf("Firefox");
  };
  /**
   * @param {Object} _xhr
   * @return {?}
   */
  el.isExtraneousPopstateEvent = function(_xhr) {
    return void 0 === _xhr.state && -1 === navigator.userAgent.indexOf("CriOS");
  };
}, function(dataAndEvents, prototype, $) {
  /**
   * @param {Object} iterable
   * @param {Array} arr
   * @return {?}
   */
  function each(iterable, arr) {
    var object = {};
    var key;
    for (key in iterable) {
      if (!(arr.indexOf(key) >= 0)) {
        if (Object.prototype.hasOwnProperty.call(iterable, key)) {
          object[key] = iterable[key];
        }
      }
    }
    return object;
  }
  /**
   * @param {?} dataAndEvents
   * @param {Function} n
   * @return {undefined}
   */
  function pow(dataAndEvents, n) {
    if (!(dataAndEvents instanceof n)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  /**
   * @param {string} object
   * @param {?} obj
   * @return {?}
   */
  function keys(object, obj) {
    if (!object) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return!obj || "object" != typeof obj && "function" != typeof obj ? object : obj;
  }
  /**
   * @param {Object} m
   * @param {Object} b
   * @return {undefined}
   */
  function create(m, b) {
    if ("function" != typeof b && null !== b) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof b);
    }
    /** @type {Object} */
    m.prototype = Object.create(b && b.prototype, {
      constructor : {
        value : m,
        enumerable : false,
        writable : true,
        configurable : true
      }
    });
    if (b) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(m, b);
      } else {
        /** @type {Object} */
        m.__proto__ = b;
      }
    }
  }
  Object.defineProperty(prototype, "__esModule", {
    value : true
  });
  var style = $(0);
  var target = $.n(style);
  var scripts = $(2);
  var self = $.n(scripts);
  var content = $(3);
  var tmpl = $.n(content);
  var declare = Object.assign || function(expectedHashCode) {
    /** @type {number} */
    var i = 1;
    for (;i < arguments.length;i++) {
      var iterable = arguments[i];
      var key;
      for (key in iterable) {
        if (Object.prototype.hasOwnProperty.call(iterable, key)) {
          expectedHashCode[key] = iterable[key];
        }
      }
    }
    return expectedHashCode;
  };
  /**
   * @param {Object} e
   * @return {?}
   */
  var click = function(e) {
    return!!(e.metaKey || (e.altKey || (e.ctrlKey || e.shiftKey)));
  };
  var Constructor = function(f) {
    /**
     * @return {?}
     */
    function e() {
      var promise;
      var self;
      var suiteView;
      pow(this, e);
      /** @type {number} */
      var l = arguments.length;
      /** @type {Array} */
      var args = Array(l);
      /** @type {number} */
      var i = 0;
      for (;i < l;i++) {
        args[i] = arguments[i];
      }
      return promise = self = keys(this, f.call.apply(f, [this].concat(args))), self.handleClick = function(expectedHashCode) {
        if (self.props.onClick && self.props.onClick(expectedHashCode), !expectedHashCode.defaultPrevented && (0 === expectedHashCode.button && (!self.props.target && !click(expectedHashCode)))) {
          expectedHashCode.preventDefault();
          var ret = self.context.router.history;
          var op = self.props;
          var ostring = op.replace;
          var rreturn = op.to;
          if (ostring) {
            ret.replace(rreturn);
          } else {
            ret.push(rreturn);
          }
        }
      }, suiteView = promise, keys(self, suiteView);
    }
    return create(e, f), e.prototype.render = function() {
      var args = this.props;
      var path = (args.replace, args.to);
      var content = args.innerRef;
      var pdataOld = each(args, ["replace", "to", "innerRef"]);
      tmpl()(this.context.router, "You should not use <Link> outside a <Router>");
      var link = this.context.router.history.createHref("string" == typeof path ? {
        pathname : path
      } : path);
      return target.a.createElement("a", declare({}, pdataOld, {
        onClick : this.handleClick,
        href : link,
        ref : content
      }));
    }, e;
  }(target.a.Component);
  Constructor.propTypes = {
    onClick : self.a.func,
    target : self.a.string,
    replace : self.a.bool,
    to : self.a.oneOfType([self.a.string, self.a.object]).isRequired,
    innerRef : self.a.oneOfType([self.a.string, self.a.func])
  };
  Constructor.defaultProps = {
    replace : false
  };
  Constructor.contextTypes = {
    router : self.a.shape({
      history : self.a.shape({
        push : self.a.func.isRequired,
        replace : self.a.func.isRequired,
        createHref : self.a.func.isRequired
      }).isRequired
    }).isRequired
  };
  prototype.default = Constructor;
}, function(dataAndEvents, item, expression) {
  Object.defineProperty(item, "__esModule", {
    value : true
  });
  var obj = expression(35);
  item.default = obj.default;
}, function(dataAndEvents, prototype, jQuery) {
  /**
   * @param {?} dataAndEvents
   * @param {Function} fn
   * @return {undefined}
   */
  function proxy(dataAndEvents, fn) {
    if (!(dataAndEvents instanceof fn)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  /**
   * @param {string} proto
   * @param {?} obj
   * @return {?}
   */
  function defineProperty(proto, obj) {
    if (!proto) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return!obj || "object" != typeof obj && "function" != typeof obj ? proto : obj;
  }
  /**
   * @param {Object} constructor
   * @param {Object} b
   * @return {undefined}
   */
  function inherits(constructor, b) {
    if ("function" != typeof b && null !== b) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof b);
    }
    /** @type {Object} */
    constructor.prototype = Object.create(b && b.prototype, {
      constructor : {
        value : constructor,
        enumerable : false,
        writable : true,
        configurable : true
      }
    });
    if (b) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(constructor, b);
      } else {
        /** @type {Object} */
        constructor.__proto__ = b;
      }
    }
  }
  Object.defineProperty(prototype, "__esModule", {
    value : true
  });
  var which = jQuery(1);
  var ch = jQuery.n(which);
  var scripts = jQuery(3);
  var $compile = jQuery.n(scripts);
  var elems = jQuery(0);
  var root = jQuery.n(elems);
  var node = jQuery(2);
  var self = jQuery.n(node);
  var obj = jQuery(15);
  var router = Object.assign || function(expectedHashCode) {
    /** @type {number} */
    var i = 1;
    for (;i < arguments.length;i++) {
      var iterable = arguments[i];
      var key;
      for (key in iterable) {
        if (Object.prototype.hasOwnProperty.call(iterable, key)) {
          expectedHashCode[key] = iterable[key];
        }
      }
    }
    return expectedHashCode;
  };
  /**
   * @param {string} callback
   * @return {?}
   */
  var update = function(callback) {
    return 0 === root.a.Children.count(callback);
  };
  var Constructor = function(_super) {
    /**
     * @return {?}
     */
    function Player() {
      var promise;
      var self;
      var suiteView;
      proxy(this, Player);
      /** @type {number} */
      var l = arguments.length;
      /** @type {Array} */
      var args = Array(l);
      /** @type {number} */
      var i = 0;
      for (;i < l;i++) {
        args[i] = arguments[i];
      }
      return promise = self = defineProperty(this, _super.call.apply(_super, [this].concat(args))), self.state = {
        match : self.computeMatch(self.props, self.context.router)
      }, suiteView = promise, defineProperty(self, suiteView);
    }
    return inherits(Player, _super), Player.prototype.getChildContext = function() {
      return{
        router : router({}, this.context.router, {
          route : {
            location : this.props.location || this.context.router.route.location,
            match : this.state.match
          }
        })
      };
    }, Player.prototype.computeMatch = function(options, $rootScope) {
      var async = options.computedMatch;
      var location = options.location;
      var p = options.path;
      var successCb = options.strict;
      var exact = options.exact;
      var thisArg = options.sensitive;
      if (async) {
        return async;
      }
      $compile()($rootScope, "You should not use <Route> or withRouter() outside a <Router>");
      var r = $rootScope.route;
      var originalPath = (location || r.location).pathname;
      return p ? Object(obj.default)(originalPath, {
        path : p,
        strict : successCb,
        exact : exact,
        sensitive : thisArg
      }) : r.match;
    }, Player.prototype.componentWillMount = function() {
      ch()(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored");
      ch()(!(this.props.component && (this.props.children && !update(this.props.children))), "You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored");
      ch()(!(this.props.render && (this.props.children && !update(this.props.children))), "You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored");
    }, Player.prototype.componentWillReceiveProps = function(t, source) {
      ch()(!(t.location && !this.props.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
      ch()(!(!t.location && this.props.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
      this.setState({
        match : this.computeMatch(t, source.router)
      });
    }, Player.prototype.render = function() {
      var match = this.state.match;
      var o = this.props;
      var id = o.children;
      var failuresLink = o.component;
      var render = o.render;
      var data = this.context.router;
      var history = data.history;
      var location = data.route;
      var method = data.staticContext;
      var expectedHashCode = {
        match : match,
        location : this.props.location || location.location,
        history : history,
        staticContext : method
      };
      return failuresLink ? match ? root.a.createElement(failuresLink, expectedHashCode) : null : render ? match ? render(expectedHashCode) : null : id ? "function" == typeof id ? id(expectedHashCode) : update(id) ? null : root.a.Children.only(id) : null;
    }, Player;
  }(root.a.Component);
  Constructor.propTypes = {
    computedMatch : self.a.object,
    path : self.a.string,
    exact : self.a.bool,
    strict : self.a.bool,
    sensitive : self.a.bool,
    component : self.a.func,
    render : self.a.func,
    children : self.a.oneOfType([self.a.func, self.a.node]),
    location : self.a.object
  };
  Constructor.contextTypes = {
    router : self.a.shape({
      history : self.a.object.isRequired,
      route : self.a.object.isRequired,
      staticContext : self.a.object
    })
  };
  Constructor.childContextTypes = {
    router : self.a.object.isRequired
  };
  prototype.default = Constructor;
}, function(dataAndEvents, env, val) {
  Object.defineProperty(env, "__esModule", {
    value : true
  });
  val.d(env, "canUseDOM", function() {
    return r;
  });
  val.d(env, "addEventListener", function() {
    return bind;
  });
  val.d(env, "removeEventListener", function() {
    return unbind;
  });
  val.d(env, "getConfirmation", function() {
    return after;
  });
  val.d(env, "supportsHistory", function() {
    return supportsBlobBuilding;
  });
  val.d(env, "supportsPopStateOnHashChange", function() {
    return workAroundWebkitBugIgnoringTheFirstRuleInCSS;
  });
  val.d(env, "supportsGoWithoutReloadUsingHash", function() {
    return _isFirefox;
  });
  val.d(env, "isExtraneousPopstateEvent", function() {
    return init;
  });
  /** @type {boolean} */
  var r = !("undefined" == typeof window || (!window.document || !window.document.createElement));
  /**
   * @param {HTMLElement} el
   * @param {string} ev
   * @param {Object} f
   * @return {?}
   */
  var bind = function(el, ev, f) {
    return el.addEventListener ? el.addEventListener(ev, f, false) : el.attachEvent("on" + ev, f);
  };
  /**
   * @param {HTMLDocument} el
   * @param {string} name
   * @param {string} f
   * @return {?}
   */
  var unbind = function(el, name, f) {
    return el.removeEventListener ? el.removeEventListener(name, f, false) : el.detachEvent("on" + name, f);
  };
  /**
   * @param {?} msg
   * @param {?} func
   * @return {?}
   */
  var after = function(msg, func) {
    return func(window.confirm(msg));
  };
  /**
   * @return {?}
   */
  var supportsBlobBuilding = function() {
    /** @type {string} */
    var userAgent = window.navigator.userAgent;
    return(-1 === userAgent.indexOf("Android 2.") && -1 === userAgent.indexOf("Android 4.0") || (-1 === userAgent.indexOf("Mobile Safari") || (-1 !== userAgent.indexOf("Chrome") || -1 !== userAgent.indexOf("Windows Phone")))) && (window.history && "pushState" in window.history);
  };
  /**
   * @return {?}
   */
  var workAroundWebkitBugIgnoringTheFirstRuleInCSS = function() {
    return-1 === window.navigator.userAgent.indexOf("Trident");
  };
  /**
   * @return {?}
   */
  var _isFirefox = function() {
    return-1 === window.navigator.userAgent.indexOf("Firefox");
  };
  /**
   * @param {Object} viewModel
   * @return {?}
   */
  var init = function(viewModel) {
    return void 0 === viewModel.state && -1 === navigator.userAgent.indexOf("CriOS");
  };
}, function(module, dataAndEvents, unique) {
  module.exports = unique;
}, function(dataAndEvents, deepDataAndEvents, $sanitize) {
  $sanitize(39);
  $sanitize(44);
  $sanitize(0);
  $sanitize(46);
  $sanitize(56);
  $sanitize(83);
  $sanitize(22);
  $sanitize(109);
  $sanitize(110);
  $sanitize(111);
}, function(module, dataAndEvents, $sanitize) {
  /**
   * @param {string} value
   * @param {string} text
   * @param {Object} opt
   * @return {undefined}
   */
  function set(value, text, opt) {
    opt = opt || {};
    /** @type {string} */
    var curCookie = encode(value) + "=" + encode(text);
    if (null == text) {
      /** @type {number} */
      opt.maxage = -1;
    }
    if (opt.maxage) {
      /** @type {Date} */
      opt.expires = new Date(+new Date + opt.maxage);
    }
    if (opt.path) {
      curCookie += "; path=" + opt.path;
    }
    if (opt.domain) {
      curCookie += "; domain=" + opt.domain;
    }
    if (opt.expires) {
      curCookie += "; expires=" + opt.expires.toUTCString();
    }
    if (opt.secure) {
      curCookie += "; secure";
    }
    /** @type {string} */
    document.cookie = curCookie;
  }
  /**
   * @return {?}
   */
  function parse() {
    var cookie;
    try {
      /** @type {string} */
      cookie = document.cookie;
    } catch (err) {
      return "undefined" != typeof console && ("function" == typeof console.error && console.error(err.stack || err)), {};
    }
    return read(cookie);
  }
  /**
   * @param {?} name
   * @return {?}
   */
  function ondata(name) {
    return parse()[name];
  }
  /**
   * @param {string} name
   * @return {?}
   */
  function read(name) {
    var param;
    var result = {};
    var codeSegments = name.split(/ *; */);
    if ("" == codeSegments[0]) {
      return result;
    }
    /** @type {number} */
    var i = 0;
    for (;i < codeSegments.length;++i) {
      result[decode((param = codeSegments[i].split("="))[0])] = decode(param[1]);
    }
    return result;
  }
  /**
   * @param {string} text
   * @return {?}
   */
  function encode(text) {
    try {
      return encodeURIComponent(text);
    } catch (visited) {
      write("error `encode(%o)` - %o", text, visited);
    }
  }
  /**
   * @param {?} data
   * @return {?}
   */
  function decode(data) {
    try {
      return decodeURIComponent(data);
    } catch (visited) {
      write("error `decode(%o)` - %o", data, visited);
    }
  }
  var write = $sanitize(40)("cookie");
  /**
   * @param {?} expectedHashCode
   * @param {string} value
   * @param {Object} expectedNumberOfNonCommentArgs
   * @return {?}
   */
  module.exports = function(expectedHashCode, value, expectedNumberOfNonCommentArgs) {
    switch(arguments.length) {
      case 3:
      ;
      case 2:
        return set(expectedHashCode, value, expectedNumberOfNonCommentArgs);
      case 1:
        return ondata(expectedHashCode);
      default:
        return parse();
    }
  };
}, function(module, self, fn) {
  (function(req) {
    /**
     * @return {?}
     */
    function callback() {
      var debug;
      try {
        debug = self.storage.debug;
      } catch (t) {
      }
      return "env" in (void 0 === req ? {} : req) && (debug = req.env.DEBUG), debug;
    }
    /**
     * @return {?}
     */
    (self = module.exports = fn(42)).log = function() {
      return "object" == typeof console && (console.log && Function.prototype.apply.call(console.log, console, arguments));
    };
    /**
     * @return {?}
     */
    self.formatArgs = function() {
      /** @type {Arguments} */
      var args = arguments;
      var namespace = this.useColors;
      if (args[0] = (namespace ? "%c" : "") + this.namespace + (namespace ? " %c" : " ") + args[0] + (namespace ? "%c " : " ") + "+" + self.humanize(this.diff), !namespace) {
        return args;
      }
      /** @type {string} */
      var command = "color: " + this.color;
      /** @type {number} */
      var startAt = 0;
      /** @type {number} */
      var idx = 0;
      return(args = [args[0], command, "color: inherit"].concat(Array.prototype.slice.call(args, 1)))[0].replace(/%[a-z%]/g, function(dataAndEvents) {
        if ("%%" !== dataAndEvents) {
          startAt++;
          if ("%c" === dataAndEvents) {
            idx = startAt;
          }
        }
      }), args.splice(idx, 0, command), args;
    };
    /**
     * @param {string} val
     * @return {undefined}
     */
    self.save = function(val) {
      try {
        if (null == val) {
          self.storage.removeItem("debug");
        } else {
          /** @type {string} */
          self.storage.debug = val;
        }
      } catch (t) {
      }
    };
    /** @type {function (): ?} */
    self.load = callback;
    /**
     * @return {?}
     */
    self.useColors = function() {
      return "undefined" != typeof document && "WebkitAppearance" in document.documentElement.style || (window.console && (console.firebug || console.exception && console.table) || navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
    };
    self.storage = "undefined" != typeof chrome && void 0 !== chrome.storage ? chrome.storage.local : function() {
      try {
        return window.localStorage;
      } catch (t) {
      }
    }();
    /** @type {Array} */
    self.colors = ["lightseagreen", "forestgreen", "goldenrod", "dodgerblue", "darkorchid", "crimson"];
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    self.formatters.j = function(expectedHashCode) {
      return JSON.stringify(expectedHashCode);
    };
    self.enable(callback());
  }).call(self, fn(41));
}, function(module, dataAndEvents) {
  /**
   * @return {?}
   */
  function none() {
    throw new Error("setTimeout has not been defined");
  }
  /**
   * @return {?}
   */
  function start() {
    throw new Error("clearTimeout has not been defined");
  }
  /**
   * @param {Function} fn
   * @return {?}
   */
  function requestAnimationFrame(fn) {
    if (display === setTimeout) {
      return setTimeout(fn, 0);
    }
    if ((display === none || !display) && setTimeout) {
      return display = setTimeout, setTimeout(fn, 0);
    }
    try {
      return display(fn, 0);
    } catch (e) {
      try {
        return display.call(null, fn, 0);
      } catch (e) {
        return display.call(this, fn, 0);
      }
    }
  }
  /**
   * @param {?} id
   * @return {?}
   */
  function cancelAnimationFrame(id) {
    if (state === clearTimeout) {
      return clearTimeout(id);
    }
    if ((state === start || !state) && clearTimeout) {
      return state = clearTimeout, clearTimeout(id);
    }
    try {
      return state(id);
    } catch (e) {
      try {
        return state.call(null, id);
      } catch (e) {
        return state.call(this, id);
      }
    }
  }
  /**
   * @return {undefined}
   */
  function update() {
    if (m) {
      if (received) {
        /** @type {boolean} */
        m = false;
        if (received.length) {
          data = received.concat(data);
        } else {
          /** @type {number} */
          index = -1;
        }
        if (data.length) {
          tick();
        }
      }
    }
  }
  /**
   * @return {undefined}
   */
  function tick() {
    if (!m) {
      var id = requestAnimationFrame(update);
      /** @type {boolean} */
      m = true;
      var length = data.length;
      for (;length;) {
        received = data;
        /** @type {Array} */
        data = [];
        for (;++index < length;) {
          if (received) {
            received[index].run();
          }
        }
        /** @type {number} */
        index = -1;
        /** @type {number} */
        length = data.length;
      }
      /** @type {null} */
      received = null;
      /** @type {boolean} */
      m = false;
      cancelAnimationFrame(id);
    }
  }
  /**
   * @param {Function} options
   * @param {?} array
   * @return {undefined}
   */
  function Animation(options, array) {
    /** @type {Function} */
    this.fun = options;
    this.array = array;
  }
  /**
   * @return {undefined}
   */
  function tmp() {
  }
  var display;
  var state;
  var process = module.exports = {};
  !function() {
    try {
      /** @type {Function} */
      display = "function" == typeof setTimeout ? setTimeout : none;
    } catch (t) {
      /** @type {function (): ?} */
      display = none;
    }
    try {
      /** @type {Function} */
      state = "function" == typeof clearTimeout ? clearTimeout : start;
    } catch (t) {
      /** @type {function (): ?} */
      state = start;
    }
  }();
  var received;
  /** @type {Array} */
  var data = [];
  /** @type {boolean} */
  var m = false;
  /** @type {number} */
  var index = -1;
  /**
   * @param {string} fn
   * @return {undefined}
   */
  process.nextTick = function(fn) {
    /** @type {Array} */
    var x = new Array(arguments.length - 1);
    if (arguments.length > 1) {
      /** @type {number} */
      var i = 1;
      for (;i < arguments.length;i++) {
        x[i - 1] = arguments[i];
      }
    }
    data.push(new Animation(fn, x));
    if (!(1 !== data.length)) {
      if (!m) {
        requestAnimationFrame(tick);
      }
    }
  };
  /**
   * @return {undefined}
   */
  Animation.prototype.run = function() {
    this.fun.apply(null, this.array);
  };
  /** @type {string} */
  process.title = "browser";
  /** @type {boolean} */
  process.browser = true;
  process.env = {};
  /** @type {Array} */
  process.argv = [];
  /** @type {string} */
  process.version = "";
  process.versions = {};
  /** @type {function (): undefined} */
  process.on = tmp;
  /** @type {function (): undefined} */
  process.addListener = tmp;
  /** @type {function (): undefined} */
  process.once = tmp;
  /** @type {function (): undefined} */
  process.off = tmp;
  /** @type {function (): undefined} */
  process.removeListener = tmp;
  /** @type {function (): undefined} */
  process.removeAllListeners = tmp;
  /** @type {function (): undefined} */
  process.emit = tmp;
  /**
   * @param {?} name
   * @return {?}
   */
  process.binding = function(name) {
    throw new Error("process.binding is not supported");
  };
  /**
   * @return {?}
   */
  process.cwd = function() {
    return "/";
  };
  /**
   * @param {?} dir
   * @return {?}
   */
  process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
  };
  /**
   * @return {?}
   */
  process.umask = function() {
    return 0;
  };
}, function(module, options, onComplete) {
  /**
   * @return {?}
   */
  function inspect() {
    return options.colors[bmi++ % options.colors.length];
  }
  /**
   * @param {string} value
   * @return {?}
   */
  function debug(value) {
    /**
     * @return {undefined}
     */
    function disabled() {
    }
    /**
     * @return {undefined}
     */
    function log() {
      /** @type {function (): undefined} */
      var self = log;
      /** @type {number} */
      var fx = +new Date;
      /** @type {number} */
      var buffer = fx - (type || fx);
      /** @type {number} */
      self.diff = buffer;
      self.prev = type;
      /** @type {number} */
      self.curr = fx;
      /** @type {number} */
      type = fx;
      if (null == self.useColors) {
        self.useColors = options.useColors();
      }
      if (null == self.color) {
        if (self.useColors) {
          self.color = inspect();
        }
      }
      /** @type {Array} */
      var params = new Array(arguments.length);
      /** @type {number} */
      var i = 0;
      for (;i < params.length;i++) {
        params[i] = arguments[i];
      }
      params[0] = options.coerce(params[0]);
      if ("string" != typeof params[0]) {
        /** @type {Array} */
        params = ["%o"].concat(params);
      }
      /** @type {number} */
      var index = 0;
      params[0] = params[0].replace(/%([a-z%])/g, function(value, name) {
        if ("%%" === value) {
          return value;
        }
        index++;
        var fn = options.formatters[name];
        if ("function" == typeof fn) {
          var text = params[index];
          value = fn.call(self, text);
          params.splice(index, 1);
          index--;
        }
        return value;
      });
      params = options.formatArgs.apply(self, params);
      (log.log || (options.log || console.log.bind(console))).apply(self, params);
    }
    /** @type {boolean} */
    disabled.enabled = false;
    /** @type {boolean} */
    log.enabled = true;
    /** @type {function (): undefined} */
    var element = options.enabled(value) ? log : disabled;
    return element.namespace = value, element;
  }
  /**
   * @param {?} err
   * @return {?}
   */
  (options = module.exports = debug.debug = debug).coerce = function(err) {
    return err instanceof Error ? err.stack || err.message : err;
  };
  /**
   * @return {undefined}
   */
  options.disable = function() {
    options.enable("");
  };
  /**
   * @param {string} type
   * @return {undefined}
   */
  options.enable = function(type) {
    options.save(type);
    var attrList = (type || "").split(/[\s,]+/);
    var valuesLen = attrList.length;
    /** @type {number} */
    var i = 0;
    for (;i < valuesLen;i++) {
      if (attrList[i]) {
        if ("-" === (type = attrList[i].replace(/[\\^$+?.()|[\]{}]/g, "\\$&").replace(/\*/g, ".*?"))[0]) {
          options.skips.push(new RegExp("^" + type.substr(1) + "$"));
        } else {
          options.names.push(new RegExp("^" + type + "$"));
        }
      }
    }
  };
  /**
   * @param {string} value
   * @return {?}
   */
  options.enabled = function(value) {
    var i;
    var valsLength;
    /** @type {number} */
    i = 0;
    valsLength = options.skips.length;
    for (;i < valsLength;i++) {
      if (options.skips[i].test(value)) {
        return false;
      }
    }
    /** @type {number} */
    i = 0;
    valsLength = options.names.length;
    for (;i < valsLength;i++) {
      if (options.names[i].test(value)) {
        return true;
      }
    }
    return false;
  };
  options.humanize = onComplete(43);
  /** @type {Array} */
  options.names = [];
  /** @type {Array} */
  options.skips = [];
  options.formatters = {};
  var type;
  /** @type {number} */
  var bmi = 0;
}, function(module, dataAndEvents) {
  /**
   * @param {string} code
   * @return {?}
   */
  function parse(code) {
    if (!((code = String(code)).length > 1E4)) {
      /** @type {(Array.<string>|null)} */
      var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(code);
      if (match) {
        /** @type {number} */
        var n = parseFloat(match[1]);
        switch((match[2] || "ms").toLowerCase()) {
          case "years":
          ;
          case "year":
          ;
          case "yrs":
          ;
          case "yr":
          ;
          case "y":
            return n * t;
          case "days":
          ;
          case "day":
          ;
          case "d":
            return n * s;
          case "hours":
          ;
          case "hour":
          ;
          case "hrs":
          ;
          case "hr":
          ;
          case "h":
            return n * d;
          case "minutes":
          ;
          case "minute":
          ;
          case "mins":
          ;
          case "min":
          ;
          case "m":
            return n * m;
          case "seconds":
          ;
          case "second":
          ;
          case "secs":
          ;
          case "sec":
          ;
          case "s":
            return n * h;
          case "milliseconds":
          ;
          case "millisecond":
          ;
          case "msecs":
          ;
          case "msec":
          ;
          case "ms":
            return n;
          default:
            return;
        }
      }
    }
  }
  /**
   * @param {number} ms
   * @return {?}
   */
  function shortFormat(ms) {
    return ms >= s ? Math.round(ms / s) + "d" : ms >= d ? Math.round(ms / d) + "h" : ms >= m ? Math.round(ms / m) + "m" : ms >= h ? Math.round(ms / h) + "s" : ms + "ms";
  }
  /**
   * @param {number} ms
   * @return {?}
   */
  function longFormat(ms) {
    return plural(ms, s, "day") || (plural(ms, d, "hour") || (plural(ms, m, "minute") || (plural(ms, h, "second") || ms + " ms")));
  }
  /**
   * @param {number} count
   * @param {number} num
   * @param {string} name
   * @return {?}
   */
  function plural(count, num, name) {
    if (!(count < num)) {
      return count < 1.5 * num ? Math.floor(count / num) + " " + name : Math.ceil(count / num) + " " + name + "s";
    }
  }
  /** @type {number} */
  var h = 1E3;
  /** @type {number} */
  var m = 60 * h;
  /** @type {number} */
  var d = 60 * m;
  /** @type {number} */
  var s = 24 * d;
  /** @type {number} */
  var t = 365.25 * s;
  /**
   * @param {?} expectedHashCode
   * @param {string} value
   * @return {?}
   */
  module.exports = function(expectedHashCode, value) {
    value = value || {};
    /** @type {string} */
    var kind = typeof expectedHashCode;
    if ("string" === kind && expectedHashCode.length > 0) {
      return parse(expectedHashCode);
    }
    if ("number" === kind && false === isNaN(expectedHashCode)) {
      return value.long ? longFormat(expectedHashCode) : shortFormat(expectedHashCode);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(expectedHashCode));
  };
}, function(module, dataAndEvents, deepDataAndEvents) {
  !function(recurring, factory) {
    module.exports = factory();
  }(0, function() {
    /**
     * @param {Function} obj
     * @param {Function} type
     * @return {undefined}
     */
    function $(obj, type) {
      if (type) {
        /** @type {Object} */
        obj.prototype = Object.create(type.prototype);
      }
      /** @type {Function} */
      obj.prototype.constructor = obj;
    }
    /**
     * @param {?} a
     * @return {?}
     */
    function e(a) {
      return isString(a) ? a : color(a);
    }
    /**
     * @param {?} args
     * @return {?}
     */
    function data(args) {
      return isFunction(args) ? args : f(args);
    }
    /**
     * @param {?} args
     * @return {?}
     */
    function m(args) {
      return isClassOf(args) ? args : add(args);
    }
    /**
     * @param {?} args
     * @return {?}
     */
    function el(args) {
      return isString(args) && !match(args) ? args : filter(args);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    function isString(obj) {
      return!(!obj || !obj[val]);
    }
    /**
     * @param {Object} actual
     * @return {?}
     */
    function isFunction(actual) {
      return!(!actual || !actual[index]);
    }
    /**
     * @param {Object} object
     * @return {?}
     */
    function isClassOf(object) {
      return!(!object || !object[propName]);
    }
    /**
     * @param {Object} value
     * @return {?}
     */
    function match(value) {
      return isFunction(value) || isClassOf(value);
    }
    /**
     * @param {Object} actual
     * @return {?}
     */
    function fail(actual) {
      return!(!actual || !actual[j]);
    }
    /**
     * @param {Attr} string
     * @return {?}
     */
    function trim(string) {
      return string.value = false, string;
    }
    /**
     * @param {?} selector
     * @return {undefined}
     */
    function jQuery(selector) {
      if (selector) {
        /** @type {boolean} */
        selector.value = true;
      }
    }
    /**
     * @return {undefined}
     */
    function Element() {
    }
    /**
     * @param {Arguments} array
     * @param {number} count
     * @return {?}
     */
    function makeArray(array, count) {
      count = count || 0;
      /** @type {number} */
      var length = Math.max(0, array.length - count);
      /** @type {Array} */
      var ret = new Array(length);
      /** @type {number} */
      var idx = 0;
      for (;idx < length;idx++) {
        ret[idx] = array[idx + count];
      }
      return ret;
    }
    /**
     * @param {?} d
     * @return {?}
     */
    function objectToString(d) {
      return void 0 === d.size && (d.size = d.__iterate(value)), d.size;
    }
    /**
     * @param {?} d
     * @param {?} a
     * @return {?}
     */
    function assertEquals(d, a) {
      if ("number" != typeof a) {
        /** @type {number} */
        var t = a >>> 0;
        if ("" + t !== a || 4294967295 === t) {
          return NaN;
        }
        /** @type {number} */
        a = t;
      }
      return a < 0 ? objectToString(d) + a : a;
    }
    /**
     * @return {?}
     */
    function value() {
      return true;
    }
    /**
     * @param {number} recurring
     * @param {number} expectedNumberOfNonCommentArgs
     * @param {number} x
     * @return {?}
     */
    function expect(recurring, expectedNumberOfNonCommentArgs, x) {
      return(0 === recurring || void 0 !== x && recurring <= -x) && (void 0 === expectedNumberOfNonCommentArgs || void 0 !== x && expectedNumberOfNonCommentArgs >= x);
    }
    /**
     * @param {number} recurring
     * @param {?} x
     * @return {?}
     */
    function min(recurring, x) {
      return slice(recurring, x, 0);
    }
    /**
     * @param {number} expectedNumberOfNonCommentArgs
     * @param {number} x
     * @return {?}
     */
    function argumentsIncludeComments(expectedNumberOfNonCommentArgs, x) {
      return slice(expectedNumberOfNonCommentArgs, x, x);
    }
    /**
     * @param {number} index
     * @param {number} value
     * @param {number} a
     * @return {?}
     */
    function slice(index, value, a) {
      return void 0 === index ? a : index < 0 ? Math.max(0, value + index) : void 0 === value ? index : Math.min(value, index);
    }
    /**
     * @param {?} next
     * @return {undefined}
     */
    function input(next) {
      this.next = next;
    }
    /**
     * @param {number} value
     * @param {number} o
     * @param {Object} val
     * @param {?} obj
     * @return {?}
     */
    function encodeUriQuery(value, o, val, obj) {
      var id = 0 === value ? o : 1 === value ? val : [o, val];
      return obj ? obj.value = id : obj = {
        value : id,
        done : false
      }, obj;
    }
    /**
     * @return {?}
     */
    function getType() {
      return{
        value : void 0,
        done : true
      };
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    function isUndefined(obj) {
      return!!isArraylike(obj);
    }
    /**
     * @param {?} stream
     * @return {?}
     */
    function successCallback(stream) {
      return stream && "function" == typeof stream.next;
    }
    /**
     * @param {string} obj
     * @return {?}
     */
    function require(obj) {
      var str = isArraylike(obj);
      return str && str.call(obj);
    }
    /**
     * @param {Object} obj
     * @return {?}
     */
    function isArraylike(obj) {
      var opts = obj && (special && obj[special] || obj[length]);
      if ("function" == typeof opts) {
        return opts;
      }
    }
    /**
     * @param {string} assertions
     * @return {?}
     */
    function done(assertions) {
      return assertions && "number" == typeof assertions.length;
    }
    /**
     * @param {Object} obj
     * @return {?}
     */
    function color(obj) {
      return null === obj || void 0 === obj ? is() : isString(obj) ? obj.toSeq() : traverse(obj);
    }
    /**
     * @param {?} args
     * @return {?}
     */
    function f(args) {
      return null === args || void 0 === args ? is().toKeyedSeq() : isString(args) ? isFunction(args) ? args.toSeq() : args.fromEntrySeq() : forEach(args);
    }
    /**
     * @param {?} args
     * @return {?}
     */
    function add(args) {
      return null === args || void 0 === args ? is() : isString(args) ? isFunction(args) ? args.entrySeq() : args.toIndexedSeq() : append(args);
    }
    /**
     * @param {?} args
     * @return {?}
     */
    function filter(args) {
      return(null === args || void 0 === args ? is() : isString(args) ? isFunction(args) ? args.entrySeq() : args : append(args)).toSetSeq();
    }
    /**
     * @param {(Array|number)} data
     * @return {undefined}
     */
    function User(data) {
      /** @type {(Array|number)} */
      this._array = data;
      this.size = data.length;
    }
    /**
     * @param {Object} obj
     * @return {undefined}
     */
    function result(obj) {
      /** @type {Array.<string>} */
      var keys = Object.keys(obj);
      /** @type {Object} */
      this._object = obj;
      /** @type {Array.<string>} */
      this._keys = keys;
      /** @type {number} */
      this.size = keys.length;
    }
    /**
     * @param {Array} file
     * @return {undefined}
     */
    function copy(file) {
      /** @type {Array} */
      this._iterable = file;
      this.size = file.length || file.size;
    }
    /**
     * @param {?} d
     * @return {undefined}
     */
    function b(d) {
      this._iterator = d;
      /** @type {Array} */
      this._iteratorCache = [];
    }
    /**
     * @param {Object} object
     * @return {?}
     */
    function keys(object) {
      return!(!object || !object[func]);
    }
    /**
     * @return {?}
     */
    function is() {
      return u || (u = new User([]));
    }
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    function forEach(expectedHashCode) {
      var context = Array.isArray(expectedHashCode) ? (new User(expectedHashCode)).fromEntrySeq() : successCallback(expectedHashCode) ? (new b(expectedHashCode)).fromEntrySeq() : isUndefined(expectedHashCode) ? (new copy(expectedHashCode)).fromEntrySeq() : "object" == typeof expectedHashCode ? new result(expectedHashCode) : void 0;
      if (!context) {
        throw new TypeError("Expected Array or iterable object of [k, v] entries, or keyed object: " + expectedHashCode);
      }
      return context;
    }
    /**
     * @param {string} obj
     * @return {?}
     */
    function append(obj) {
      var str = inspect(obj);
      if (!str) {
        throw new TypeError("Expected Array or iterable object of values: " + obj);
      }
      return str;
    }
    /**
     * @param {string} obj
     * @return {?}
     */
    function traverse(obj) {
      var elem = inspect(obj) || "object" == typeof obj && new result(obj);
      if (!elem) {
        throw new TypeError("Expected Array or iterable object of values, or keyed object: " + obj);
      }
      return elem;
    }
    /**
     * @param {string} obj
     * @return {?}
     */
    function inspect(obj) {
      return done(obj) ? new User(obj) : successCallback(obj) ? new b(obj) : isUndefined(obj) ? new copy(obj) : void 0;
    }
    /**
     * @param {?} obj
     * @param {Function} iterator
     * @param {boolean} func
     * @param {boolean} recurring
     * @return {?}
     */
    function findIndex(obj, iterator, func, recurring) {
      var a = obj._cache;
      if (a) {
        /** @type {number} */
        var right = a.length - 1;
        /** @type {number} */
        var left = 0;
        for (;left <= right;left++) {
          var arr = a[func ? right - left : left];
          if (false === iterator(arr[1], recurring ? arr[0] : left, obj)) {
            return left + 1;
          }
        }
        return left;
      }
      return obj.__iterateUncached(iterator, func);
    }
    /**
     * @param {?} target
     * @param {number} isXML
     * @param {boolean} config
     * @param {boolean} force
     * @return {?}
     */
    function mixin(target, isXML, config, force) {
      var node = target._cache;
      if (node) {
        /** @type {number} */
        var newTop = node.length - 1;
        /** @type {number} */
        var top = 0;
        return new input(function() {
          var rawParams = node[config ? newTop - top : top];
          return top++ > newTop ? getType() : encodeUriQuery(isXML, force ? rawParams[0] : top - 1, rawParams[1]);
        });
      }
      return target.__iteratorUncached(isXML, config);
    }
    /**
     * @param {string} value
     * @param {Function} last
     * @return {?}
     */
    function next(value, last) {
      return last ? process(last, value, "", {
        "" : value
      }) : init(value);
    }
    /**
     * @param {Function} last
     * @param {?} expectedHashCode
     * @param {?} data
     * @param {?} ev
     * @return {?}
     */
    function process(last, expectedHashCode, data, ev) {
      return Array.isArray(expectedHashCode) ? last.call(ev, data, add(expectedHashCode).map(function(modelData, x) {
        return process(last, modelData, x, expectedHashCode);
      })) : isObject(expectedHashCode) ? last.call(ev, data, f(expectedHashCode).map(function(modelData, x) {
        return process(last, modelData, x, expectedHashCode);
      })) : expectedHashCode;
    }
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    function init(expectedHashCode) {
      return Array.isArray(expectedHashCode) ? add(expectedHashCode).map(init).toList() : isObject(expectedHashCode) ? f(expectedHashCode).map(init).toMap() : expectedHashCode;
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    function isObject(arg) {
      return arg && (arg.constructor === Object || void 0 === arg.constructor);
    }
    /**
     * @param {?} obj
     * @param {?} v
     * @return {?}
     */
    function callback(obj, v) {
      if (obj === v || obj !== obj && v !== v) {
        return true;
      }
      if (!obj || !v) {
        return false;
      }
      if ("function" == typeof obj.valueOf && "function" == typeof v.valueOf) {
        if (obj = obj.valueOf(), v = v.valueOf(), obj === v || obj !== obj && v !== v) {
          return true;
        }
        if (!obj || !v) {
          return false;
        }
      }
      return!("function" != typeof obj.equals || ("function" != typeof v.equals || !obj.equals(v)));
    }
    /**
     * @param {Object} item
     * @param {Object} value
     * @return {?}
     */
    function handler(item, value) {
      if (item === value) {
        return true;
      }
      if (!isString(value) || (void 0 !== item.size && (void 0 !== value.size && item.size !== value.size) || (void 0 !== item.__hash && (void 0 !== value.__hash && item.__hash !== value.__hash) || (isFunction(item) !== isFunction(value) || (isClassOf(item) !== isClassOf(value) || fail(item) !== fail(value)))))) {
        return false;
      }
      if (0 === item.size && 0 === value.size) {
        return true;
      }
      /** @type {boolean} */
      var bulk = !match(item);
      if (fail(item)) {
        var stream = item.entries();
        return value.every(function(r, css) {
          var arr = stream.next().value;
          return arr && (callback(arr[1], r) && (bulk || callback(arr[0], css)));
        }) && stream.next().done;
      }
      /** @type {boolean} */
      var length = false;
      if (void 0 === item.size) {
        if (void 0 === value.size) {
          if ("function" == typeof item.cacheResult) {
            item.cacheResult();
          }
        } else {
          /** @type {boolean} */
          length = true;
          /** @type {Object} */
          var first = item;
          /** @type {Object} */
          item = value;
          value = first;
        }
      }
      /** @type {boolean} */
      var key = true;
      var string = value.__iterate(function(arg, expectedHashCode) {
        if (bulk ? !item.has(arg) : length ? !callback(arg, item.get(expectedHashCode, camelKey)) : !callback(item.get(expectedHashCode, camelKey), arg)) {
          return key = false, false;
        }
      });
      return key && item.size === string;
    }
    /**
     * @param {number} val
     * @param {number} n
     * @return {?}
     */
    function res(val, n) {
      if (!(this instanceof res)) {
        return new res(val, n);
      }
      if (this._value = val, this.size = void 0 === n ? 1 / 0 : Math.max(0, n), 0 === this.size) {
        if (On) {
          return On;
        }
        On = this;
      }
    }
    /**
     * @param {boolean} view
     * @param {string} message
     * @return {undefined}
     */
    function push(view, message) {
      if (!view) {
        throw new Error(message);
      }
    }
    /**
     * @param {number} n
     * @param {number} i
     * @param {number} v
     * @return {?}
     */
    function item(n, i, v) {
      if (!(this instanceof item)) {
        return new item(n, i, v);
      }
      if (push(0 !== v, "Cannot step a Range by 0"), n = n || 0, void 0 === i && (i = 1 / 0), v = void 0 === v ? 1 : Math.abs(v), i < n && (v = -v), this._start = n, this._end = i, this._step = v, this.size = Math.max(0, Math.ceil((i - n) / v - 1) + 1), 0 === this.size) {
        if (out) {
          return out;
        }
        out = this;
      }
    }
    /**
     * @return {?}
     */
    function clone() {
      throw TypeError("Abstract");
    }
    /**
     * @return {undefined}
     */
    function instance() {
    }
    /**
     * @return {undefined}
     */
    function c() {
    }
    /**
     * @return {undefined}
     */
    function o() {
    }
    /**
     * @param {number} str
     * @return {?}
     */
    function stringifyString(str) {
      return str >>> 1 & 1073741824 | 3221225471 & str;
    }
    /**
     * @param {number} value
     * @return {?}
     */
    function stringify(value) {
      if (false === value || (null === value || void 0 === value)) {
        return 0;
      }
      if ("function" == typeof value.valueOf && (false === (value = value.valueOf()) || (null === value || void 0 === value))) {
        return 0;
      }
      if (true === value) {
        return 1;
      }
      /** @type {string} */
      var type = typeof value;
      if ("number" === type) {
        if (value !== value || value === 1 / 0) {
          return 0;
        }
        /** @type {number} */
        var obj = 0 | value;
        if (obj !== value) {
          obj ^= 4294967295 * value;
        }
        for (;value > 4294967295;) {
          obj ^= value /= 4294967295;
        }
        return stringifyString(obj);
      }
      if ("string" === type) {
        return value.length > max ? toJSON(value) : escapeString(value);
      }
      if ("function" == typeof value.hashCode) {
        return value.hashCode();
      }
      if ("object" === type) {
        return constructor(value);
      }
      if ("function" == typeof value.toString) {
        return escapeString(value.toString());
      }
      throw new Error("Value type " + type + " cannot be hashed.");
    }
    /**
     * @param {(number|string)} key
     * @return {?}
     */
    function toJSON(key) {
      var value = flags[key];
      return void 0 === value && (value = escapeString(key), element === container && (element = 0, flags = {}), element++, flags[key] = value), value;
    }
    /**
     * @param {string} str
     * @return {?}
     */
    function escapeString(str) {
      /** @type {number} */
      var errStr = 0;
      /** @type {number} */
      var i = 0;
      for (;i < str.length;i++) {
        /** @type {number} */
        errStr = 31 * errStr + str.charCodeAt(i) | 0;
      }
      return stringifyString(errStr);
    }
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    function constructor(expectedHashCode) {
      var udataCur;
      if (fn && void 0 !== (udataCur = data_user.get(expectedHashCode))) {
        return udataCur;
      }
      if (void 0 !== (udataCur = expectedHashCode[style])) {
        return udataCur;
      }
      if (!Nn) {
        if (void 0 !== (udataCur = expectedHashCode.propertyIsEnumerable && expectedHashCode.propertyIsEnumerable[style])) {
          return udataCur;
        }
        if (void 0 !== (udataCur = parseXML(expectedHashCode))) {
          return udataCur;
        }
      }
      if (udataCur = ++Rn, 1073741824 & Rn && (Rn = 0), fn) {
        data_user.set(expectedHashCode, udataCur);
      } else {
        if (void 0 !== defineProperties && false === defineProperties(expectedHashCode)) {
          throw new Error("Non-extensible objects are not allowed as keys.");
        }
        if (Nn) {
          Object.defineProperty(expectedHashCode, style, {
            enumerable : false,
            configurable : false,
            writable : false,
            value : udataCur
          });
        } else {
          if (void 0 !== expectedHashCode.propertyIsEnumerable && expectedHashCode.propertyIsEnumerable === expectedHashCode.constructor.prototype.propertyIsEnumerable) {
            /**
             * @return {?}
             */
            expectedHashCode.propertyIsEnumerable = function() {
              return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);
            };
            /** @type {number} */
            expectedHashCode.propertyIsEnumerable[style] = udataCur;
          } else {
            if (void 0 === expectedHashCode.nodeType) {
              throw new Error("Unable to set a non-enumerable property on object.");
            }
            /** @type {number} */
            expectedHashCode[style] = udataCur;
          }
        }
      }
      return udataCur;
    }
    /**
     * @param {Object} data
     * @return {?}
     */
    function parseXML(data) {
      if (data && data.nodeType > 0) {
        switch(data.nodeType) {
          case 1:
            return data.uniqueID;
          case 9:
            return data.documentElement && data.documentElement.uniqueID;
        }
      }
    }
    /**
     * @param {?} collection
     * @return {undefined}
     */
    function each(collection) {
      push(collection !== 1 / 0, "Cannot perform this action with an infinite size.");
    }
    /**
     * @param {?} args
     * @return {?}
     */
    function req(args) {
      return null === args || void 0 === args ? split() : fire(args) && !fail(args) ? args : split().withMutations(function(data_user) {
        var f = data(args);
        each(f.size);
        f.forEach(function(udataCur, key) {
          return data_user.set(key, udataCur);
        });
      });
    }
    /**
     * @param {Object} data
     * @return {?}
     */
    function fire(data) {
      return!(!data || !data[idProperty]);
    }
    /**
     * @param {?} options
     * @param {Array} opt_acc
     * @return {undefined}
     */
    function Animation(options, opt_acc) {
      this.ownerID = options;
      /** @type {Array} */
      this.entries = opt_acc;
    }
    /**
     * @param {(number|string)} opt_parent
     * @param {number} $0
     * @param {Array} is_root
     * @return {undefined}
     */
    function Node(opt_parent, $0, is_root) {
      /** @type {(number|string)} */
      this.ownerID = opt_parent;
      /** @type {number} */
      this.bitmap = $0;
      /** @type {Array} */
      this.nodes = is_root;
    }
    /**
     * @param {(number|string)} $particles
     * @param {number} count
     * @param {Array} nodes
     * @return {undefined}
     */
    function List($particles, count, nodes) {
      /** @type {(number|string)} */
      this.ownerID = $particles;
      /** @type {number} */
      this.count = count;
      /** @type {Array} */
      this.nodes = nodes;
    }
    /**
     * @param {?} v
     * @param {string} str
     * @param {Array} entries
     * @return {undefined}
     */
    function Transform(v, str, entries) {
      this.ownerID = v;
      /** @type {string} */
      this.keyHash = str;
      /** @type {Array} */
      this.entries = entries;
    }
    /**
     * @param {(number|string)} el
     * @param {string} event
     * @param {(Array|number)} entry
     * @return {undefined}
     */
    function target(el, event, entry) {
      /** @type {(number|string)} */
      this.ownerID = el;
      /** @type {string} */
      this.keyHash = event;
      /** @type {(Array|number)} */
      this.entry = entry;
    }
    /**
     * @param {?} data
     * @param {?} value
     * @param {string} str
     * @return {undefined}
     */
    function entity(data, value, str) {
      this._type = value;
      /** @type {string} */
      this._reverse = str;
      this._stack = data._root && trigger(data._root);
    }
    /**
     * @param {number} value
     * @param {Array} evt
     * @return {?}
     */
    function emit(value, evt) {
      return encodeUriQuery(value, evt[0], evt[1]);
    }
    /**
     * @param {?} obj
     * @param {?} data
     * @return {?}
     */
    function trigger(obj, data) {
      return{
        node : obj,
        index : 0,
        __prev : data
      };
    }
    /**
     * @param {number} value
     * @param {?} root
     * @param {?} deepDataAndEvents
     * @param {Function} e
     * @return {?}
     */
    function create(value, root, deepDataAndEvents, e) {
      /** @type {Object} */
      var that = Object.create(self);
      return that.size = value, that._root = root, that.__ownerID = deepDataAndEvents, that.__hash = e, that.__altered = false, that;
    }
    /**
     * @return {?}
     */
    function split() {
      return p || (p = create(0));
    }
    /**
     * @param {?} obj
     * @param {?} args
     * @param {string} value
     * @return {?}
     */
    function parse(obj, args, value) {
      var root;
      var s;
      if (obj._root) {
        var city = trim(node);
        var name = trim(source);
        if (root = walk(obj._root, obj.__ownerID, 0, void 0, args, value, city, name), !name.value) {
          return obj;
        }
        s = obj.size + (city.value ? value === camelKey ? -1 : 1 : 0);
      } else {
        if (value === camelKey) {
          return obj;
        }
        /** @type {number} */
        s = 1;
        root = new Animation(obj.__ownerID, [[args, value]]);
      }
      return obj.__ownerID ? (obj.size = s, obj._root = root, obj.__hash = void 0, obj.__altered = true, obj) : root ? create(s, root) : split();
    }
    /**
     * @param {HTMLElement} callback
     * @param {string} array
     * @param {number} index
     * @param {number} value
     * @param {number} obj
     * @param {string} source
     * @param {?} holder
     * @param {?} arg
     * @return {?}
     */
    function walk(callback, array, index, value, obj, source, holder, arg) {
      return callback ? callback.update(array, index, value, obj, source, holder, arg) : source === camelKey ? callback : (jQuery(arg), jQuery(holder), new target(array, value, [obj, source]));
    }
    /**
     * @param {(Array|string)} event
     * @return {?}
     */
    function select(event) {
      return event.constructor === target || event.constructor === Transform;
    }
    /**
     * @param {Object} c
     * @param {string} x
     * @param {number} string
     * @param {number} callback
     * @param {Object} deepDataAndEvents
     * @return {?}
     */
    function write(c, x, string, callback, deepDataAndEvents) {
      if (c.keyHash === callback) {
        return new Transform(x, callback, [c.entry, deepDataAndEvents]);
      }
      var instance;
      /** @type {number} */
      var a = (0 === string ? c.keyHash : c.keyHash >>> string) & mask;
      /** @type {number} */
      var b = (0 === string ? callback : callback >>> string) & mask;
      return new Node(x, 1 << a | 1 << b, a === b ? [write(c, x, string + d, callback, deepDataAndEvents)] : (instance = new target(x, callback, deepDataAndEvents), a < b ? [c, instance] : [instance, c]));
    }
    /**
     * @param {string} message
     * @param {Array} array
     * @param {number} obj
     * @param {string} arr
     * @return {?}
     */
    function clear(message, array, obj, arr) {
      if (!message) {
        message = new Element;
      }
      var me = new target(message, stringify(obj), [obj, arr]);
      /** @type {number} */
      var i = 0;
      for (;i < array.length;i++) {
        var coords = array[i];
        me = me.update(message, 0, void 0, coords[0], coords[1]);
      }
      return me;
    }
    /**
     * @param {string} type
     * @param {Array} values
     * @param {?} el
     * @param {number} e
     * @return {?}
     */
    function reset(type, values, el, e) {
      /** @type {number} */
      var value = 0;
      /** @type {number} */
      var resLength = 0;
      /** @type {Array} */
      var res = new Array(el);
      /** @type {number} */
      var i = 0;
      /** @type {number} */
      var flag = 1;
      var valuesLen = values.length;
      for (;i < valuesLen;i++, flag <<= 1) {
        var val = values[i];
        if (void 0 !== val) {
          if (i !== e) {
            value |= flag;
            res[resLength++] = val;
          }
        }
      }
      return new Node(type, value, res);
    }
    /**
     * @param {string} arr
     * @param {(Array|Int8Array|Uint8Array)} first
     * @param {number} func
     * @param {number} i
     * @param {?} message
     * @return {?}
     */
    function pass(arr, first, func, i, message) {
      /** @type {number} */
      var pos = 0;
      /** @type {Array} */
      var messages = new Array(size);
      /** @type {number} */
      var suffix = 0;
      for (;0 !== func;suffix++, func >>>= 1) {
        messages[suffix] = 1 & func ? first[pos++] : void 0;
      }
      return messages[i] = message, new List(arr, pos + 1, messages);
    }
    /**
     * @param {?} node
     * @param {Object} element
     * @param {Array} args
     * @return {?}
     */
    function renderElement(node, element, args) {
      /** @type {Array} */
      var progressValues = [];
      /** @type {number} */
      var i = 0;
      for (;i < args.length;i++) {
        var prop = args[i];
        var expectedHashCode = data(prop);
        if (!isString(prop)) {
          expectedHashCode = expectedHashCode.map(function(isXML) {
            return next(isXML);
          });
        }
        progressValues.push(expectedHashCode);
      }
      return insert(node, element, progressValues);
    }
    /**
     * @param {Function} a
     * @param {Function} b
     * @param {?} $vid
     * @return {?}
     */
    function pause(a, b, $vid) {
      return a && (a.mergeDeep && isString(b)) ? a.mergeDeep(b) : callback(a, b) ? a : b;
    }
    /**
     * @param {Function} func
     * @return {?}
     */
    function make(func) {
      return function(value, index, array) {
        if (value && (value.mergeDeepWith && isString(index))) {
          return value.mergeDeepWith(func, index);
        }
        var key = func(value, index, array);
        return callback(value, key) ? value : key;
      };
    }
    /**
     * @param {?} index
     * @param {boolean} callback
     * @param {Array} values
     * @return {?}
     */
    function insert(index, callback, values) {
      return 0 === (values = values.filter(function(stat) {
        return 0 !== stat.size;
      })).length ? index : 0 !== index.size || (index.__ownerID || 1 !== values.length) ? index.withMutations(function(data_user) {
        /** @type {function (number, string): undefined} */
        var ol = callback ? function(p, temp) {
          data_user.update(temp, camelKey, function(result) {
            return result === camelKey ? p : callback(result, p, temp);
          });
        } : function(udataCur, key) {
          data_user.set(key, udataCur);
        };
        /** @type {number} */
        var index = 0;
        for (;index < values.length;index++) {
          values[index].forEach(ol);
        }
      }) : index.constructor(values[0]);
    }
    /**
     * @param {string} value
     * @param {Node} last
     * @param {string} frame
     * @param {Function} callback
     * @return {?}
     */
    function loaded(value, last, frame, callback) {
      /** @type {boolean} */
      var iterator = value === camelKey;
      var test = last.next();
      if (test.done) {
        var computed = iterator ? frame : value;
        var ret = callback(computed);
        return ret === computed ? value : ret;
      }
      push(iterator || value && value.set, "invalid keyPath");
      var expectedHashCode = test.value;
      var initial = iterator ? camelKey : value.get(expectedHashCode, camelKey);
      var pdataCur = loaded(initial, last, frame, callback);
      return pdataCur === initial ? value : pdataCur === camelKey ? value.remove(expectedHashCode) : (iterator ? split() : value).set(expectedHashCode, pdataCur);
    }
    /**
     * @param {number} x
     * @return {?}
     */
    function formatter(x) {
      return x -= x >> 1 & 1431655765, x = (858993459 & x) + (x >> 2 & 858993459), x = x + (x >> 4) & 252645135, x += x >> 8, 127 & (x += x >> 16);
    }
    /**
     * @param {?} selector
     * @param {number} key
     * @param {?} value
     * @param {?} obj
     * @return {?}
     */
    function query(selector, key, value, obj) {
      var flags = obj ? selector : makeArray(selector);
      return flags[key] = value, flags;
    }
    /**
     * @param {(Array|Uint8Array)} object
     * @param {number} name
     * @param {?} value
     * @param {boolean} obj
     * @return {?}
     */
    function empty(object, name, value, obj) {
      var length = object.length + 1;
      if (obj && name + 1 === length) {
        return object[name] = value, object;
      }
      /** @type {Array} */
      var results = new Array(length);
      /** @type {number} */
      var s = 0;
      /** @type {number} */
      var i = 0;
      for (;i < length;i++) {
        if (i === name) {
          results[i] = value;
          /** @type {number} */
          s = -1;
        } else {
          results[i] = object[i + s];
        }
      }
      return results;
    }
    /**
     * @param {Array} b
     * @param {number} index
     * @param {boolean} obj
     * @return {?}
     */
    function toArray(b, index, obj) {
      /** @type {number} */
      var length = b.length - 1;
      if (obj && index === length) {
        return b.pop(), b;
      }
      /** @type {Array} */
      var rv = new Array(length);
      /** @type {number} */
      var off = 0;
      /** @type {number} */
      var i = 0;
      for (;i < length;i++) {
        if (i === index) {
          /** @type {number} */
          off = 1;
        }
        rv[i] = b[i + off];
      }
      return rv;
    }
    /**
     * @param {?} details
     * @return {?}
     */
    function that(details) {
      var theworker = off();
      if (null === details || void 0 === details) {
        return theworker;
      }
      if (root(details)) {
        return details;
      }
      var array = m(details);
      var c = array.size;
      return 0 === c ? theworker : (each(c), c > 0 && c < size ? initialize(0, c, d, null, new type(array.toArray())) : theworker.withMutations(function(view) {
        view.setSize(c);
        array.forEach(function(pdataCur, key) {
          return view.set(key, pdataCur);
        });
      }));
    }
    /**
     * @param {Object} args
     * @return {?}
     */
    function root(args) {
      return!(!args || !args[lib]);
    }
    /**
     * @param {?} obj
     * @param {(number|string)} path
     * @return {undefined}
     */
    function type(obj, path) {
      this.array = obj;
      /** @type {(number|string)} */
      this.ownerID = path;
    }
    /**
     * @param {?} self
     * @param {boolean} cm
     * @return {?}
     */
    function render(self, cm) {
      /**
       * @param {string} data
       * @param {number} root
       * @param {number} key
       * @return {?}
       */
      function fn(data, root, key) {
        return 0 === root ? get(data, key) : error(data, root, key);
      }
      /**
       * @param {string} data
       * @param {number} a
       * @return {?}
       */
      function get(data, a) {
        var frontObj = a === d ? config && config.array : data && data.array;
        /** @type {number} */
        var x = a > b ? 0 : b - a;
        /** @type {number} */
        var y = h - a;
        return y > size && (y = size), function() {
          if (x === y) {
            return expected;
          }
          /** @type {number} */
          var frontName = cm ? --y : x++;
          return frontObj && frontObj[frontName];
        };
      }
      /**
       * @param {Object} data
       * @param {number} a
       * @param {number} t
       * @return {?}
       */
      function error(data, a, t) {
        var getActual;
        var frontObj = data && data.array;
        /** @type {number} */
        var x = t > b ? 0 : b - t >> a;
        /** @type {number} */
        var y = 1 + (h - t >> a);
        return y > size && (y = size), function() {
          for (;;) {
            if (getActual) {
              var actual = getActual();
              if (actual !== expected) {
                return actual;
              }
              /** @type {null} */
              getActual = null;
            }
            if (x === y) {
              return expected;
            }
            /** @type {number} */
            var frontName = cm ? --y : x++;
            getActual = fn(frontObj && frontObj[frontName], a - d, t + (frontName << a));
          }
        };
      }
      var b = self._origin;
      var h = self._capacity;
      var d = parseInt(h);
      var config = self._tail;
      return fn(self._root, self._level, 0);
    }
    /**
     * @param {number} start
     * @param {number} size
     * @param {number} data
     * @param {?} pos
     * @param {?} s
     * @param {?} deepDataAndEvents
     * @param {Function} cfg
     * @return {?}
     */
    function initialize(start, size, data, pos, s, deepDataAndEvents, cfg) {
      /** @type {Object} */
      var self = Object.create(options);
      return self.size = size - start, self._origin = start, self._capacity = size, self._level = data, self._root = pos, self._tail = s, self.__ownerID = deepDataAndEvents, self.__hash = cfg, self.__altered = false, self;
    }
    /**
     * @return {?}
     */
    function off() {
      return r || (r = initialize(0, 0, d));
    }
    /**
     * @param {?} self
     * @param {?} key
     * @param {?} pdataCur
     * @return {?}
     */
    function set(self, key, pdataCur) {
      if ((key = assertEquals(self, key)) !== key) {
        return self;
      }
      if (key >= self.size || key < 0) {
        return self.withMutations(function(item) {
          if (key < 0) {
            setup(item, key).set(0, pdataCur);
          } else {
            setup(item, 0, key + 1).set(key, pdataCur);
          }
        });
      }
      key += self._origin;
      var id = self._tail;
      var node = self._root;
      var name = trim(source);
      return key >= parseInt(self._capacity) ? id = destroy(id, self.__ownerID, 0, key, pdataCur, name) : node = destroy(node, self.__ownerID, self._level, key, pdataCur, name), name.value ? self.__ownerID ? (self._root = node, self._tail = id, self.__hash = void 0, self.__altered = true, self) : initialize(self._origin, self._capacity, self._level, node, id) : self;
    }
    /**
     * @param {Object} node
     * @param {string} options
     * @param {number} y
     * @param {number} x
     * @param {number} value
     * @param {?} target
     * @return {?}
     */
    function destroy(node, options, y, x, value, target) {
      /** @type {number} */
      var index = x >>> y & mask;
      var s = node && index < node.array.length;
      if (!s && void 0 === value) {
        return node;
      }
      var result;
      if (y > 0) {
        var p = node && node.array[index];
        var r = destroy(p, options, y - d, x, value, target);
        return r === p ? node : (result = get(node, options), result.array[index] = r, result);
      }
      return s && node.array[index] === value ? node : (jQuery(target), result = get(node, options), void 0 === value && index === result.array.length - 1 ? result.array.pop() : result.array[index] = value, result);
    }
    /**
     * @param {Object} name
     * @param {string} value
     * @return {?}
     */
    function get(name, value) {
      return value && (name && value === name.ownerID) ? name : new type(name ? name.array.slice() : [], value);
    }
    /**
     * @param {Object} self
     * @param {number} num
     * @return {?}
     */
    function load(self, num) {
      if (num >= parseInt(self._capacity)) {
        return self._tail;
      }
      if (num < 1 << self._level + d) {
        var doc = self._root;
        var level = self._level;
        for (;doc && level > 0;) {
          doc = doc.array[num >>> level & mask];
          level -= d;
        }
        return doc;
      }
    }
    /**
     * @param {Object} self
     * @param {number} recurring
     * @param {number} t
     * @return {?}
     */
    function setup(self, recurring, t) {
      if (void 0 !== recurring) {
        recurring |= 0;
      }
      if (void 0 !== t) {
        t |= 0;
      }
      var value = self.__ownerID || new Element;
      var end = self._origin;
      var offset = self._capacity;
      var start = end + recurring;
      var length = void 0 === t ? offset : t < 0 ? offset + t : end + t;
      if (start === end && length === offset) {
        return self;
      }
      if (start >= length) {
        return self.clear();
      }
      var data = self._level;
      var node = self._root;
      /** @type {number} */
      var len = 0;
      for (;start + len < 0;) {
        node = new type(node && node.array.length ? [void 0, node] : [], value);
        len += 1 << (data += d);
      }
      if (len) {
        start += len;
        end += len;
        length += len;
        offset += len;
      }
      var b = parseInt(offset);
      var a = parseInt(length);
      for (;a >= 1 << data + d;) {
        node = new type(node && node.array.length ? [node] : [], value);
        data += d;
      }
      var id_sort = self._tail;
      var out = a < b ? load(self, length - 1) : a > b ? new type([], value) : id_sort;
      if (id_sort && (a > b && (start < offset && id_sort.array.length))) {
        var _this = node = get(node, value);
        var ms = data;
        for (;ms > d;ms -= d) {
          /** @type {number} */
          var key = b >>> ms & mask;
          _this = _this.array[key] = get(_this.array[key], value);
        }
        _this.array[b >>> d & mask] = id_sort;
      }
      if (length < offset && (out = out && out.removeAfter(value, 0, length)), start >= a) {
        start -= a;
        length -= a;
        /** @type {number} */
        data = d;
        /** @type {null} */
        node = null;
        out = out && out.removeBefore(value, 0, start);
      } else {
        if (start > end || a < b) {
          /** @type {number} */
          len = 0;
          for (;node;) {
            /** @type {number} */
            var index = start >>> data & mask;
            if (index !== a >>> data & mask) {
              break;
            }
            if (index) {
              len += (1 << data) * index;
            }
            data -= d;
            node = node.array[index];
          }
          if (node) {
            if (start > end) {
              node = node.removeBefore(value, data, start - len);
            }
          }
          if (node) {
            if (a < b) {
              node = node.removeAfter(value, data, a - len);
            }
          }
          if (len) {
            start -= len;
            length -= len;
          }
        }
      }
      return self.__ownerID ? (self.size = length - start, self._origin = start, self._capacity = length, self._level = data, self._root = node, self._tail = out, self.__hash = void 0, self.__altered = true, self) : initialize(start, length, data, node, out);
    }
    /**
     * @param {Object} node
     * @param {Object} callback
     * @param {Array} args
     * @return {?}
     */
    function run(node, callback, args) {
      /** @type {Array} */
      var progressValues = [];
      /** @type {number} */
      var size = 0;
      /** @type {number} */
      var i = 0;
      for (;i < args.length;i++) {
        var prop = args[i];
        var expectedHashCode = m(prop);
        if (expectedHashCode.size > size) {
          size = expectedHashCode.size;
        }
        if (!isString(prop)) {
          expectedHashCode = expectedHashCode.map(function(isXML) {
            return next(isXML);
          });
        }
        progressValues.push(expectedHashCode);
      }
      return size > node.size && (node = node.setSize(size)), insert(node, callback, progressValues);
    }
    /**
     * @param {number} x
     * @return {?}
     */
    function parseInt(x) {
      return x < size ? 0 : x - 1 >>> d << d;
    }
    /**
     * @param {?} details
     * @return {?}
     */
    function t(details) {
      return null === details || void 0 === details ? remove() : exec(details) ? details : remove().withMutations(function(data_user) {
        var el = data(details);
        each(el.size);
        el.forEach(function(udataCur, key) {
          return data_user.set(key, udataCur);
        });
      });
    }
    /**
     * @param {Object} args
     * @return {?}
     */
    function exec(args) {
      return fire(args) && fail(args);
    }
    /**
     * @param {Object} data
     * @param {Object} status
     * @param {?} deepDataAndEvents
     * @param {Function} user
     * @return {?}
     */
    function success(data, status, deepDataAndEvents, user) {
      /** @type {Object} */
      var self = Object.create(t.prototype);
      return self.size = data ? data.size : 0, self._map = data, self._list = status, self.__ownerID = deepDataAndEvents, self.__hash = user, self;
    }
    /**
     * @return {?}
     */
    function remove() {
      return hasMembers || (hasMembers = success(split(), off()));
    }
    /**
     * @param {?} self
     * @param {?} expectedHashCode
     * @param {string} value
     * @return {?}
     */
    function update(self, expectedHashCode, value) {
      var data;
      var result;
      var tmp = self._map;
      var t = self._list;
      var key = tmp.get(expectedHashCode);
      /** @type {boolean} */
      var u = void 0 !== key;
      if (value === camelKey) {
        if (!u) {
          return self;
        }
        if (t.size >= size && t.size >= 2 * tmp.size) {
          data = (result = t.filter(function(_after, oldkey) {
            return void 0 !== _after && key !== oldkey;
          })).toKeyedSeq().map(function(dataAndEvents) {
            return dataAndEvents[0];
          }).flip().toMap();
          if (self.__ownerID) {
            data.__ownerID = result.__ownerID = self.__ownerID;
          }
        } else {
          data = tmp.remove(expectedHashCode);
          result = key === t.size - 1 ? t.pop() : t.set(key, void 0);
        }
      } else {
        if (u) {
          if (value === t.get(key)[1]) {
            return self;
          }
          data = tmp;
          result = t.set(key, [expectedHashCode, value]);
        } else {
          data = tmp.set(expectedHashCode, t.size);
          result = t.set(t.size, [expectedHashCode, value]);
        }
      }
      return self.__ownerID ? (self.size = data.size, self._map = data, self._list = result, self.__hash = void 0, self) : success(data, result);
    }
    /**
     * @param {?} event
     * @param {Function} dx
     * @return {undefined}
     */
    function s(event, dx) {
      this._iter = event;
      /** @type {Function} */
      this._useKeys = dx;
      this.size = event.size;
    }
    /**
     * @param {string} event
     * @return {undefined}
     */
    function state(event) {
      /** @type {string} */
      this._iter = event;
      this.size = event.size;
    }
    /**
     * @param {string} data
     * @return {undefined}
     */
    function template(data) {
      /** @type {string} */
      this._iter = data;
      this.size = data.size;
    }
    /**
     * @param {string} data
     * @return {undefined}
     */
    function cache(data) {
      /** @type {string} */
      this._iter = data;
      this.size = data.size;
    }
    /**
     * @param {Object} options
     * @return {?}
     */
    function Sprite(options) {
      var self = apply(options);
      return self._iter = options, self.size = options.size, self.flip = function() {
        return options;
      }, self.reverse = function() {
        var self = options.reverse.apply(this);
        return self.flip = function() {
          return options.reverse();
        }, self;
      }, self.has = function(expectedHashCode) {
        return options.includes(expectedHashCode);
      }, self.includes = function(expectedHashCode) {
        return options.has(expectedHashCode);
      }, self.cacheResult = win, self.__iterateUncached = function(func, config) {
        var ary = this;
        return options.__iterate(function(i, name) {
          return false !== func(name, i, ary);
        }, config);
      }, self.__iteratorUncached = function(isXML, instance) {
        if (isXML === udataCur) {
          var stream = options.__iterator(isXML, instance);
          return new input(function() {
            var test = stream.next();
            if (!test.done) {
              var e = test.value[0];
              test.value[0] = test.value[1];
              test.value[1] = e;
            }
            return test;
          });
        }
        return options.__iterator(isXML === pdataOld ? pdataCur : pdataOld, instance);
      }, self;
    }
    /**
     * @param {Object} object
     * @param {Function} fn
     * @param {Function} obj
     * @return {?}
     */
    function bind(object, fn, obj) {
      var data = apply(object);
      return data.size = object.size, data.has = function(expectedHashCode) {
        return object.has(expectedHashCode);
      }, data.get = function(expectedHashCode, value) {
        var data = object.get(expectedHashCode, camelKey);
        return data === camelKey ? value : fn.call(obj, data, expectedHashCode, object);
      }, data.__iterateUncached = function(callback, config) {
        var photo = this;
        return object.__iterate(function(val, index, computed) {
          return false !== callback(fn.call(obj, val, index, computed), index, photo);
        }, config);
      }, data.__iteratorUncached = function(value, instance) {
        var stream = object.__iterator(udataCur, instance);
        return new input(function() {
          var _this = stream.next();
          if (_this.done) {
            return _this;
          }
          var list = _this.value;
          var start = list[0];
          return encodeUriQuery(value, start, fn.call(obj, list[1], start, object), _this);
        });
      }, data;
    }
    /**
     * @param {Object} self
     * @param {boolean} recurring
     * @return {?}
     */
    function Transition(self, recurring) {
      var obj = apply(self);
      return obj._iter = self, obj.size = self.size, obj.reverse = function() {
        return self;
      }, self.flip && (obj.flip = function() {
        var path = Sprite(self);
        return path.reverse = function() {
          return self.flip();
        }, path;
      }), obj.get = function(expectedHashCode, value) {
        return self.get(recurring ? expectedHashCode : -1 - expectedHashCode, value);
      }, obj.has = function(expectedHashCode) {
        return self.has(recurring ? expectedHashCode : -1 - expectedHashCode);
      }, obj.includes = function(expectedHashCode) {
        return self.includes(expectedHashCode);
      }, obj.cacheResult = win, obj.__iterate = function(iterator, instance) {
        var list = this;
        return self.__iterate(function(x, index) {
          return iterator(x, index, list);
        }, !instance);
      }, obj.__iterator = function(value, cm) {
        return self.__iterator(value, !cm);
      }, obj;
    }
    /**
     * @param {Object} context
     * @param {Function} callback
     * @param {?} el
     * @param {boolean} raw
     * @return {?}
     */
    function factory(context, callback, el, raw) {
      var key = apply(context);
      return raw && (key.has = function(expectedHashCode) {
        var data = context.get(expectedHashCode, camelKey);
        return data !== camelKey && !!callback.call(el, data, expectedHashCode, context);
      }, key.get = function(expectedHashCode, value) {
        var data = context.get(expectedHashCode, camelKey);
        return data !== camelKey && callback.call(el, data, expectedHashCode, context) ? data : value;
      }), key.__iterateUncached = function(func, config) {
        var ary = this;
        /** @type {number} */
        var s = 0;
        return context.__iterate(function(err, value, array) {
          if (callback.call(el, err, value, array)) {
            return s++, func(err, raw ? value : s - 1, ary);
          }
        }, config), s;
      }, key.__iteratorUncached = function(isXML, instance) {
        var stream = context.__iterator(udataCur, instance);
        /** @type {number} */
        var s = 0;
        return new input(function() {
          for (;;) {
            var self = stream.next();
            if (self.done) {
              return self;
            }
            var args = self.value;
            var value = args[0];
            var next = args[1];
            if (callback.call(el, next, value, context)) {
              return encodeUriQuery(isXML, raw ? value : s++, next, self);
            }
          }
        });
      }, key;
    }
    /**
     * @param {?} obj
     * @param {Function} html
     * @param {?} str
     * @return {?}
     */
    function wrap(obj, html, str) {
      var ret = req().asMutable();
      return obj.__iterate(function(i, height) {
        ret.update(html.call(str, i, height, obj), 0, function(dataAndEvents) {
          return dataAndEvents + 1;
        });
      }), ret.asImmutable();
    }
    /**
     * @param {Object} value
     * @param {Function} callback
     * @param {?} obj
     * @return {?}
     */
    function group(value, callback, obj) {
      var func = isFunction(value);
      var result = (fail(value) ? t() : req()).asMutable();
      value.__iterate(function(data, i) {
        result.update(callback.call(obj, data, i, value), function(events) {
          return(events = events || []).push(func ? [i, data] : data), events;
        });
      });
      var iterator = lookupIterator(value);
      return result.map(function(x) {
        return flatten(value, iterator(x));
      });
    }
    /**
     * @param {Object} object
     * @param {number} name
     * @param {number} expectedNumberOfNonCommentArgs
     * @param {boolean} recurring
     * @return {?}
     */
    function post(object, name, expectedNumberOfNonCommentArgs, recurring) {
      var len = object.size;
      if (void 0 !== name && (name |= 0), void 0 !== expectedNumberOfNonCommentArgs && (expectedNumberOfNonCommentArgs === 1 / 0 ? expectedNumberOfNonCommentArgs = len : expectedNumberOfNonCommentArgs |= 0), expect(name, expectedNumberOfNonCommentArgs, len)) {
        return object;
      }
      var n = min(name, len);
      var width = argumentsIncludeComments(expectedNumberOfNonCommentArgs, len);
      if (n !== n || width !== width) {
        return post(object.toSeq().cacheResult(), name, expectedNumberOfNonCommentArgs, recurring);
      }
      var size;
      /** @type {number} */
      var i = width - n;
      if (i === i) {
        /** @type {number} */
        size = i < 0 ? 0 : i;
      }
      var c = apply(object);
      return c.size = 0 === size ? size : object.size && size || void 0, !recurring && (keys(object) && (size >= 0 && (c.get = function(expectedHashCode, value) {
        return(expectedHashCode = assertEquals(this, expectedHashCode)) >= 0 && expectedHashCode < size ? object.get(expectedHashCode + n, value) : value;
      }))), c.__iterateUncached = function(iterator, config) {
        var list = this;
        if (0 === size) {
          return 0;
        }
        if (config) {
          return this.cacheResult().__iterate(iterator, config);
        }
        /** @type {number} */
        var index = 0;
        /** @type {boolean} */
        var u = true;
        /** @type {number} */
        var oSize = 0;
        return object.__iterate(function(x, dataAndEvents) {
          if (!u || !(u = index++ < n)) {
            return oSize++, false !== iterator(x, recurring ? dataAndEvents : oSize - 1, list) && oSize !== size;
          }
        }), oSize;
      }, c.__iteratorUncached = function(isXML, instance) {
        if (0 !== size && instance) {
          return this.cacheResult().__iterator(isXML, instance);
        }
        var stream = 0 !== size && object.__iterator(isXML, instance);
        /** @type {number} */
        var index = 0;
        /** @type {number} */
        var u = 0;
        return new input(function() {
          for (;index++ < n;) {
            stream.next();
          }
          if (++u > size) {
            return getType();
          }
          var suiteView = stream.next();
          return recurring || isXML === pdataOld ? suiteView : isXML === pdataCur ? encodeUriQuery(isXML, u - 1, void 0, suiteView) : encodeUriQuery(isXML, u - 1, suiteView.value[1], suiteView);
        });
      }, c;
    }
    /**
     * @param {Object} value
     * @param {Function} callback
     * @param {?} elem
     * @return {?}
     */
    function swap(value, callback, elem) {
      var isFunction = apply(value);
      return isFunction.__iterateUncached = function(iterator, config) {
        var list = this;
        if (config) {
          return this.cacheResult().__iterate(iterator, config);
        }
        /** @type {number} */
        var a = 0;
        return value.__iterate(function(value, index, array) {
          return callback.call(elem, value, index, array) && (++a && iterator(value, index, list));
        }), a;
      }, isFunction.__iteratorUncached = function(isXML, instance) {
        var transaction = this;
        if (instance) {
          return this.cacheResult().__iterator(isXML, instance);
        }
        var stream = value.__iterator(udataCur, instance);
        /** @type {boolean} */
        var s = true;
        return new input(function() {
          if (!s) {
            return getType();
          }
          var _this = stream.next();
          if (_this.done) {
            return _this;
          }
          var list = _this.value;
          var el = list[0];
          var next = list[1];
          return callback.call(elem, next, el, transaction) ? isXML === udataCur ? _this : encodeUriQuery(isXML, el, next, _this) : (s = false, getType());
        });
      }, isFunction;
    }
    /**
     * @param {Object} value
     * @param {Function} callback
     * @param {?} elem
     * @param {boolean} recurring
     * @return {?}
     */
    function join(value, callback, elem, recurring) {
      var isFunction = apply(value);
      return isFunction.__iterateUncached = function(iterator, config) {
        var list = this;
        if (config) {
          return this.cacheResult().__iterate(iterator, config);
        }
        /** @type {boolean} */
        var ret = true;
        /** @type {number} */
        var u = 0;
        return value.__iterate(function(value, el, idx) {
          if (!ret || !(ret = callback.call(elem, value, el, idx))) {
            return u++, iterator(value, recurring ? el : u - 1, list);
          }
        }), u;
      }, isFunction.__iteratorUncached = function(isXML, instance) {
        var idx = this;
        if (instance) {
          return this.cacheResult().__iterator(isXML, instance);
        }
        var stream = value.__iterator(udataCur, instance);
        /** @type {boolean} */
        var ret = true;
        /** @type {number} */
        var c = 0;
        return new input(function() {
          var parsed;
          var name;
          var value;
          do {
            if ((parsed = stream.next()).done) {
              return recurring || isXML === pdataOld ? parsed : isXML === pdataCur ? encodeUriQuery(isXML, c++, void 0, parsed) : encodeUriQuery(isXML, c++, parsed.value[1], parsed);
            }
            var args = parsed.value;
            name = args[0];
            value = args[1];
            if (ret) {
              ret = callback.call(elem, value, name, idx);
            }
          } while (ret);
          return isXML === udataCur ? parsed : encodeUriQuery(isXML, name, value, parsed);
        });
      }, isFunction;
    }
    /**
     * @param {Object} value
     * @param {Array} data
     * @return {?}
     */
    function draw(value, data) {
      var a = isFunction(value);
      /** @type {Array.<?>} */
      var args = [value].concat(data).map(function(expectedHashCode) {
        return isString(expectedHashCode) ? a && (expectedHashCode = data(expectedHashCode)) : expectedHashCode = a ? forEach(expectedHashCode) : append(Array.isArray(expectedHashCode) ? expectedHashCode : [expectedHashCode]), expectedHashCode;
      }).filter(function(stat) {
        return 0 !== stat.size;
      });
      if (0 === args.length) {
        return value;
      }
      if (1 === args.length) {
        var x = args[0];
        if (x === value || (a && isFunction(x) || isClassOf(value) && isClassOf(x))) {
          return x;
        }
      }
      var result = new User(args);
      return a ? result = result.toKeyedSeq() : isClassOf(value) || (result = result.toSetSeq()), result = result.flatten(true), result.size = args.reduce(function(i, list) {
        if (void 0 !== i) {
          var start = list.size;
          if (void 0 !== start) {
            return i + start;
          }
        }
      }, 0), result;
    }
    /**
     * @param {Object} value
     * @param {number} deepDataAndEvents
     * @param {boolean} recurring
     * @return {?}
     */
    function isArray(value, deepDataAndEvents, recurring) {
      var isFunction = apply(value);
      return isFunction.__iterateUncached = function(func, config) {
        /**
         * @param {?} state
         * @param {number} opt_scope
         * @return {undefined}
         */
        function register(state, opt_scope) {
          var ary = this;
          state.__iterate(function(value, file) {
            return(!deepDataAndEvents || opt_scope < deepDataAndEvents) && isString(value) ? register(value, opt_scope + 1) : false === func(value, recurring ? file : result++, ary) && (u = true), !u;
          }, config);
        }
        /** @type {number} */
        var result = 0;
        /** @type {boolean} */
        var u = false;
        return register(value, 0), result;
      }, isFunction.__iteratorUncached = function(isXML, instance) {
        var expectedHashCode = value.__iterator(isXML, instance);
        /** @type {Array} */
        var eventPath = [];
        /** @type {number} */
        var u = 0;
        return new input(function() {
          for (;expectedHashCode;) {
            var input = expectedHashCode.next();
            if (false === input.done) {
              var val = input.value;
              if (isXML === udataCur && (val = val[1]), deepDataAndEvents && !(eventPath.length < deepDataAndEvents) || !isString(val)) {
                return recurring ? input : encodeUriQuery(isXML, u++, val, input);
              }
              eventPath.push(expectedHashCode);
              expectedHashCode = val.__iterator(isXML, instance);
            } else {
              expectedHashCode = eventPath.pop();
            }
          }
          return getType();
        });
      }, isFunction;
    }
    /**
     * @param {Object} value
     * @param {Function} callback
     * @param {?} obj
     * @return {?}
     */
    function sortBy(value, callback, obj) {
      var iterator = lookupIterator(value);
      return value.toSeq().map(function(operation, el) {
        return iterator(callback.call(obj, operation, el, value));
      }).flatten(true);
    }
    /**
     * @param {Object} config
     * @param {?} val
     * @return {?}
     */
    function Item(config, val) {
      var changed = apply(config);
      return changed.size = config.size && 2 * config.size - 1, changed.__iterateUncached = function(func, name) {
        var ary = this;
        /** @type {number} */
        var depth = 0;
        return config.__iterate(function(name, dataAndEvents) {
          return(!depth || false !== func(val, depth++, ary)) && false !== func(name, depth++, ary);
        }, name), depth;
      }, changed.__iteratorUncached = function(value, instance) {
        var suiteView;
        var stream = config.__iterator(pdataOld, instance);
        /** @type {number} */
        var a = 0;
        return new input(function() {
          return(!suiteView || a % 2) && (suiteView = stream.next()).done ? suiteView : a % 2 ? encodeUriQuery(value, a++, val) : encodeUriQuery(value, a++, suiteView.value, suiteView);
        });
      }, changed;
    }
    /**
     * @param {Object} name
     * @param {Function} func
     * @param {Document} cb
     * @return {?}
     */
    function map(name, func, cb) {
      if (!func) {
        /** @type {function ((boolean|number|string), (boolean|number|string)): ?} */
        func = selector_sortOrder;
      }
      var text = isFunction(name);
      /** @type {number} */
      var i = 0;
      var details = name.toSeq().map(function(party, srcFiles) {
        return[srcFiles, party, i++, cb ? cb(party, srcFiles, name) : party];
      }).toArray();
      return details.sort(function(a, b) {
        return func(a[3], b[3]) || a[2] - b[2];
      }).forEach(text ? function(dataAndEvents, key) {
        /** @type {number} */
        details[key].length = 2;
      } : function(old, name) {
        details[name] = old[1];
      }), text ? f(details) : isClassOf(name) ? add(details) : filter(details);
    }
    /**
     * @param {Array} collection
     * @param {Function} key
     * @param {?} callback
     * @return {?}
     */
    function reduce(collection, key, callback) {
      if (key || (key = selector_sortOrder), callback) {
        var units = collection.toSeq().map(function(basis, mongoObject) {
          return[basis, callback(basis, mongoObject, collection)];
        }).reduce(function(resize, i) {
          return has(key, resize[1], i[1]) ? i : resize;
        });
        return units && units[0];
      }
      return collection.reduce(function(val, walkers) {
        return has(key, val, walkers) ? walkers : val;
      });
    }
    /**
     * @param {Function} fn
     * @param {?} i
     * @param {?} obj
     * @return {?}
     */
    function has(fn, i, obj) {
      var str = fn(obj, i);
      return 0 === str && (obj !== i && (void 0 === obj || (null === obj || obj !== obj))) || str > 0;
    }
    /**
     * @param {Object} value
     * @param {Function} callback
     * @param {Array} key
     * @return {?}
     */
    function action(value, callback, key) {
      var values = apply(value);
      return values.size = (new User(key)).map(function(stat) {
        return stat.size;
      }).min(), values.__iterate = function(iterator, instance) {
        var x;
        var stream = this.__iterator(pdataOld, instance);
        /** @type {number} */
        var index = 0;
        for (;!(x = stream.next()).done && false !== iterator(x.value, index++, this);) {
        }
        return index;
      }, values.__iteratorUncached = function(value, prefix) {
        var mod = key.map(function(p) {
          return p = e(p), require(prefix ? p.reverse() : p);
        });
        /** @type {number} */
        var a = 0;
        /** @type {boolean} */
        var shallow = false;
        return new input(function() {
          var array;
          return shallow || (array = mod.map(function(stream) {
            return stream.next();
          }), shallow = array.some(function(todo) {
            return todo.done;
          })), shallow ? getType() : encodeUriQuery(value, a++, callback.apply(null, array.map(function($provide) {
            return $provide.value;
          })));
        });
      }, values;
    }
    /**
     * @param {Object} object
     * @param {?} options
     * @return {?}
     */
    function flatten(object, options) {
      return keys(object) ? options : object.constructor(options);
    }
    /**
     * @param {Array} object
     * @return {undefined}
     */
    function isExtensible(object) {
      if (object !== Object(object)) {
        throw new TypeError("Expected [K, V] tuple: " + object);
      }
    }
    /**
     * @param {?} d
     * @return {?}
     */
    function isDate(d) {
      return each(d.size), objectToString(d);
    }
    /**
     * @param {Object} value
     * @return {?}
     */
    function lookupIterator(value) {
      return isFunction(value) ? data : isClassOf(value) ? m : el;
    }
    /**
     * @param {Object} value
     * @return {?}
     */
    function apply(value) {
      return Object.create((isFunction(value) ? f : isClassOf(value) ? add : filter).prototype);
    }
    /**
     * @return {?}
     */
    function win() {
      return this._iter.cacheResult ? (this._iter.cacheResult(), this.size = this._iter.size, this) : color.prototype.cacheResult.call(this);
    }
    /**
     * @param {(boolean|number|string)} a
     * @param {(boolean|number|string)} b
     * @return {?}
     */
    function selector_sortOrder(a, b) {
      return a > b ? 1 : a < b ? -1 : 0;
    }
    /**
     * @param {string} err
     * @return {?}
     */
    function complete(err) {
      var nodes = require(err);
      if (!nodes) {
        if (!done(err)) {
          throw new TypeError("Expected iterable or array-like: " + err);
        }
        nodes = require(e(err));
      }
      return nodes;
    }
    /**
     * @param {?} items
     * @param {?} key
     * @return {?}
     */
    function Model(items, key) {
      var n;
      /**
       * @param {Function} options
       * @return {?}
       */
      var init = function(options) {
        if (options instanceof init) {
          return options;
        }
        if (!(this instanceof init)) {
          return new init(options);
        }
        if (!n) {
          /** @type {boolean} */
          n = true;
          /** @type {Array.<string>} */
          var data = Object.keys(items);
          log(that, data);
          /** @type {number} */
          that.size = data.length;
          that._name = key;
          /** @type {Array.<string>} */
          that._keys = data;
          that._defaultValues = items;
        }
        this._map = req(options);
      };
      /** @type {Object} */
      var that = init.prototype = Object.create(opts);
      return that.constructor = init, init;
    }
    /**
     * @param {?} obj
     * @param {Object} map
     * @param {?} deepDataAndEvents
     * @return {?}
     */
    function callPlugin(obj, map, deepDataAndEvents) {
      /** @type {Object} */
      var options = Object.create(Object.getPrototypeOf(obj));
      return options._map = map, options.__ownerID = deepDataAndEvents, options;
    }
    /**
     * @param {Object} fn
     * @return {?}
     */
    function register(fn) {
      return fn._name || (fn.constructor.name || "Record");
    }
    /**
     * @param {Object} msg
     * @param {Array} d
     * @return {undefined}
     */
    function log(msg, d) {
      try {
        d.forEach(plugin.bind(void 0, msg));
      } catch (t) {
      }
    }
    /**
     * @param {?} object
     * @param {?} expectedHashCode
     * @return {undefined}
     */
    function plugin(object, expectedHashCode) {
      Object.defineProperty(object, expectedHashCode, {
        /**
         * @return {?}
         */
        get : function() {
          return this.get(expectedHashCode);
        },
        /**
         * @param {?} key
         * @return {undefined}
         */
        set : function(key) {
          push(this.__ownerID, "Cannot set on an immutable record.");
          this.set(expectedHashCode, key);
        }
      });
    }
    /**
     * @param {?} args
     * @return {?}
     */
    function test(args) {
      return null === args || void 0 === args ? find() : deepEqual(args) && !fail(args) ? args : find().withMutations(function(pe) {
        var expected = el(args);
        each(expected.size);
        expected.forEach(function(dest) {
          return pe.add(dest);
        });
      });
    }
    /**
     * @param {Object} actual
     * @return {?}
     */
    function deepEqual(actual) {
      return!(!actual || !actual[name]);
    }
    /**
     * @param {string} self
     * @param {?} map
     * @return {?}
     */
    function build(self, map) {
      return self.__ownerID ? (self.size = map.size, self._map = map, self) : map === self._map ? self : 0 === map.size ? self.__empty() : self.__make(map);
    }
    /**
     * @param {Object} value
     * @param {?} deepDataAndEvents
     * @return {?}
     */
    function normalize(value, deepDataAndEvents) {
      /** @type {Object} */
      var elem = Object.create(view);
      return elem.size = value ? value.size : 0, elem._map = value, elem.__ownerID = deepDataAndEvents, elem;
    }
    /**
     * @return {?}
     */
    function find() {
      return path || (path = normalize(split()));
    }
    /**
     * @param {?} details
     * @return {?}
     */
    function param(details) {
      return null === details || void 0 === details ? serialize() : verifyCallAllowed(details) ? details : serialize().withMutations(function(pe) {
        var labels = el(details);
        each(labels.size);
        labels.forEach(function(dest) {
          return pe.add(dest);
        });
      });
    }
    /**
     * @param {Object} args
     * @return {?}
     */
    function verifyCallAllowed(args) {
      return deepEqual(args) && fail(args);
    }
    /**
     * @param {Object} value
     * @param {?} deepDataAndEvents
     * @return {?}
     */
    function toString(value, deepDataAndEvents) {
      /** @type {Object} */
      var elem = Object.create(x);
      return elem.size = value ? value.size : 0, elem._map = value, elem.__ownerID = deepDataAndEvents, elem;
    }
    /**
     * @return {?}
     */
    function serialize() {
      return str || (str = toString(remove()));
    }
    /**
     * @param {number} val
     * @return {?}
     */
    function info(val) {
      return null === val || void 0 === val ? clearData() : isNodeList(val) ? val : clearData().unshiftAll(val);
    }
    /**
     * @param {Object} val
     * @return {?}
     */
    function isNodeList(val) {
      return!(!val || !val[method]);
    }
    /**
     * @param {number} value
     * @param {?} head
     * @param {?} deepDataAndEvents
     * @param {Function} val
     * @return {?}
     */
    function save(value, head, deepDataAndEvents, val) {
      /** @type {Object} */
      var self = Object.create(parent);
      return self.size = value, self._head = head, self.__ownerID = deepDataAndEvents, self.__hash = val, self.__altered = false, self;
    }
    /**
     * @return {?}
     */
    function clearData() {
      return any || (any = save(0));
    }
    /**
     * @param {Function} b
     * @param {?} protos
     * @return {?}
     */
    function extend(b, protos) {
      /**
       * @param {?} name
       * @return {undefined}
       */
      var check = function(name) {
        b.prototype[name] = protos[name];
      };
      return Object.keys(protos).forEach(check), Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(protos).forEach(check), b;
    }
    /**
     * @param {?} source
     * @param {?} nodes
     * @return {?}
     */
    function nodes(source, nodes) {
      return nodes;
    }
    /**
     * @param {?} value
     * @param {?} obj
     * @return {?}
     */
    function iterator(value, obj) {
      return[obj, value];
    }
    /**
     * @param {Function} matcherFunction
     * @return {?}
     */
    function URI(matcherFunction) {
      return function() {
        return!matcherFunction.apply(this, arguments);
      };
    }
    /**
     * @param {Function} func
     * @return {?}
     */
    function createCallback(func) {
      return function() {
        return-func.apply(this, arguments);
      };
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    function print(arg) {
      return "string" == typeof arg ? JSON.stringify(arg) : String(arg);
    }
    /**
     * @return {?}
     */
    function restoreScript() {
      return makeArray(arguments);
    }
    /**
     * @param {(boolean|number|string)} x
     * @param {(boolean|number|string)} y
     * @return {?}
     */
    function newCoord(x, y) {
      return x < y ? 1 : x > y ? -1 : 0;
    }
    /**
     * @param {Object} args
     * @return {?}
     */
    function upload(args) {
      if (args.size === 1 / 0) {
        return 0;
      }
      var applyArgs = fail(args);
      var func = isFunction(args);
      /** @type {number} */
      var udataCur = applyArgs ? 1 : 0;
      return isEmpty(args.__iterate(func ? applyArgs ? function(isXML, newValue) {
        /** @type {number} */
        udataCur = 31 * udataCur + report(stringify(isXML), stringify(newValue)) | 0;
      } : function(isXML, newValue) {
        /** @type {number} */
        udataCur = udataCur + report(stringify(isXML), stringify(newValue)) | 0;
      } : applyArgs ? function(isXML) {
        /** @type {number} */
        udataCur = 31 * udataCur + stringify(isXML) | 0;
      } : function(isXML) {
        /** @type {number} */
        udataCur = udataCur + stringify(isXML) | 0;
      }), udataCur);
    }
    /**
     * @param {number} str
     * @param {number} value
     * @return {?}
     */
    function isEmpty(str, value) {
      return value = isArguments(value, 3432918353), value = isArguments(value << 15 | value >>> -15, 461845907), value = isArguments(value << 13 | value >>> -13, 5), value = (value + 3864292196 | 0) ^ str, value = isArguments(value ^ value >>> 16, 2246822507), value = isArguments(value ^ value >>> 13, 3266489909), value = stringifyString(value ^ value >>> 16);
    }
    /**
     * @param {number} details
     * @param {number} failing_message
     * @return {?}
     */
    function report(details, failing_message) {
      return details ^ failing_message + 2654435769 + (details << 6) + (details >> 2) | 0;
    }
    /** @type {function (this:(Array.<T>|string|{length: number}), *=, *=): Array.<T>} */
    var __slice = Array.prototype.slice;
    $(data, e);
    $(m, e);
    $(el, e);
    /** @type {function (?): ?} */
    e.isIterable = isString;
    /** @type {function (Object): ?} */
    e.isKeyed = isFunction;
    /** @type {function (Object): ?} */
    e.isIndexed = isClassOf;
    /** @type {function (Object): ?} */
    e.isAssociative = match;
    /** @type {function (Object): ?} */
    e.isOrdered = fail;
    /** @type {function (?): ?} */
    e.Keyed = data;
    /** @type {function (?): ?} */
    e.Indexed = m;
    /** @type {function (?): ?} */
    e.Set = el;
    /** @type {string} */
    var val = "@@__IMMUTABLE_ITERABLE__@@";
    /** @type {string} */
    var index = "@@__IMMUTABLE_KEYED__@@";
    /** @type {string} */
    var propName = "@@__IMMUTABLE_INDEXED__@@";
    /** @type {string} */
    var j = "@@__IMMUTABLE_ORDERED__@@";
    /** @type {number} */
    var d = 5;
    /** @type {number} */
    var size = 1 << d;
    /** @type {number} */
    var mask = size - 1;
    var camelKey = {};
    var node = {
      value : false
    };
    var source = {
      value : false
    };
    /** @type {number} */
    var pdataCur = 0;
    /** @type {number} */
    var pdataOld = 1;
    /** @type {number} */
    var udataCur = 2;
    var special = "function" == typeof Symbol && Symbol.iterator;
    /** @type {string} */
    var length = "@@iterator";
    var i = special || length;
    /**
     * @return {?}
     */
    input.prototype.toString = function() {
      return "[Iterator]";
    };
    /** @type {number} */
    input.KEYS = pdataCur;
    /** @type {number} */
    input.VALUES = pdataOld;
    /** @type {number} */
    input.ENTRIES = udataCur;
    /** @type {function (): ?} */
    input.prototype.inspect = input.prototype.toSource = function() {
      return this.toString();
    };
    /**
     * @return {?}
     */
    input.prototype[i] = function() {
      return this;
    };
    $(color, e);
    /**
     * @return {?}
     */
    color.of = function() {
      return color(arguments);
    };
    /**
     * @return {?}
     */
    color.prototype.toSeq = function() {
      return this;
    };
    /**
     * @return {?}
     */
    color.prototype.toString = function() {
      return this.__toString("Seq {", "}");
    };
    /**
     * @return {?}
     */
    color.prototype.cacheResult = function() {
      return!this._cache && (this.__iterateUncached && (this._cache = this.entrySeq().toArray(), this.size = this._cache.length)), this;
    };
    /**
     * @param {Function} iterator
     * @param {boolean} instance
     * @return {?}
     */
    color.prototype.__iterate = function(iterator, instance) {
      return findIndex(this, iterator, instance, true);
    };
    /**
     * @param {number} value
     * @param {boolean} cm
     * @return {?}
     */
    color.prototype.__iterator = function(value, cm) {
      return mixin(this, value, cm, true);
    };
    $(f, color);
    /**
     * @return {?}
     */
    f.prototype.toKeyedSeq = function() {
      return this;
    };
    $(add, color);
    /**
     * @return {?}
     */
    add.of = function() {
      return add(arguments);
    };
    /**
     * @return {?}
     */
    add.prototype.toIndexedSeq = function() {
      return this;
    };
    /**
     * @return {?}
     */
    add.prototype.toString = function() {
      return this.__toString("Seq [", "]");
    };
    /**
     * @param {Function} iterator
     * @param {boolean} instance
     * @return {?}
     */
    add.prototype.__iterate = function(iterator, instance) {
      return findIndex(this, iterator, instance, false);
    };
    /**
     * @param {number} value
     * @param {boolean} cm
     * @return {?}
     */
    add.prototype.__iterator = function(value, cm) {
      return mixin(this, value, cm, false);
    };
    $(filter, color);
    /**
     * @return {?}
     */
    filter.of = function() {
      return filter(arguments);
    };
    /**
     * @return {?}
     */
    filter.prototype.toSetSeq = function() {
      return this;
    };
    /** @type {function (Object): ?} */
    color.isSeq = keys;
    /** @type {function (?): ?} */
    color.Keyed = f;
    /** @type {function (?): ?} */
    color.Set = filter;
    /** @type {function (?): ?} */
    color.Indexed = add;
    /** @type {string} */
    var func = "@@__IMMUTABLE_SEQ__@@";
    /** @type {boolean} */
    color.prototype[func] = true;
    $(User, add);
    /**
     * @param {?} expectedHashCode
     * @param {string} value
     * @return {?}
     */
    User.prototype.get = function(expectedHashCode, value) {
      return this.has(expectedHashCode) ? this._array[assertEquals(this, expectedHashCode)] : value;
    };
    /**
     * @param {Function} func
     * @param {boolean} instance
     * @return {?}
     */
    User.prototype.__iterate = function(func, instance) {
      var arr = this._array;
      /** @type {number} */
      var n = arr.length - 1;
      /** @type {number} */
      var j = 0;
      for (;j <= n;j++) {
        if (false === func(arr[instance ? n - j : j], j, this)) {
          return j + 1;
        }
      }
      return j;
    };
    /**
     * @param {number} value
     * @param {boolean} cm
     * @return {?}
     */
    User.prototype.__iterator = function(value, cm) {
      var originArr = this._array;
      /** @type {number} */
      var lastTabIndex = originArr.length - 1;
      /** @type {number} */
      var index = 0;
      return new input(function() {
        return index > lastTabIndex ? getType() : encodeUriQuery(value, index, originArr[cm ? lastTabIndex - index++ : index++]);
      });
    };
    $(result, f);
    /**
     * @param {?} expectedHashCode
     * @param {string} value
     * @return {?}
     */
    result.prototype.get = function(expectedHashCode, value) {
      return void 0 === value || this.has(expectedHashCode) ? this._object[expectedHashCode] : value;
    };
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    result.prototype.has = function(expectedHashCode) {
      return this._object.hasOwnProperty(expectedHashCode);
    };
    /**
     * @param {Function} func
     * @param {boolean} instance
     * @return {?}
     */
    result.prototype.__iterate = function(func, instance) {
      var obj = this._object;
      var props = this._keys;
      /** @type {number} */
      var right = props.length - 1;
      /** @type {number} */
      var left = 0;
      for (;left <= right;left++) {
        var prop = props[instance ? right - left : left];
        if (false === func(obj[prop], prop, this)) {
          return left + 1;
        }
      }
      return left;
    };
    /**
     * @param {number} value
     * @param {boolean} cm
     * @return {?}
     */
    result.prototype.__iterator = function(value, cm) {
      var matches = this._object;
      var sels = this._keys;
      /** @type {number} */
      var maxint = sels.length - 1;
      /** @type {number} */
      var delta = 0;
      return new input(function() {
        var sel = sels[cm ? maxint - delta : delta];
        return delta++ > maxint ? getType() : encodeUriQuery(value, sel, matches[sel]);
      });
    };
    /** @type {boolean} */
    result.prototype[j] = true;
    $(copy, add);
    /**
     * @param {Function} iterator
     * @param {boolean} config
     * @return {?}
     */
    copy.prototype.__iterateUncached = function(iterator, config) {
      if (config) {
        return this.cacheResult().__iterate(iterator, config);
      }
      var stream = require(this._iterable);
      /** @type {number} */
      var index = 0;
      if (successCallback(stream)) {
        var x;
        for (;!(x = stream.next()).done && false !== iterator(x.value, index++, this);) {
        }
      }
      return index;
    };
    /**
     * @param {number} isXML
     * @param {boolean} instance
     * @return {?}
     */
    copy.prototype.__iteratorUncached = function(isXML, instance) {
      if (instance) {
        return this.cacheResult().__iterator(isXML, instance);
      }
      var stream = require(this._iterable);
      if (!successCallback(stream)) {
        return new input(getType);
      }
      /** @type {number} */
      var r = 0;
      return new input(function() {
        var c = stream.next();
        return c.done ? c : encodeUriQuery(isXML, r++, c.value);
      });
    };
    $(b, add);
    /**
     * @param {Function} iterator
     * @param {boolean} config
     * @return {?}
     */
    b.prototype.__iterateUncached = function(iterator, config) {
      if (config) {
        return this.cacheResult().__iterate(iterator, config);
      }
      var iter = this._iterator;
      var codeSegments = this._iteratorCache;
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;) {
        if (false === iterator(codeSegments[i], i++, this)) {
          return i;
        }
      }
      var split;
      for (;!(split = iter.next()).done;) {
        var value = split.value;
        if (codeSegments[i] = value, false === iterator(value, i++, this)) {
          break;
        }
      }
      return i;
    };
    /**
     * @param {number} isXML
     * @param {boolean} instance
     * @return {?}
     */
    b.prototype.__iteratorUncached = function(isXML, instance) {
      if (instance) {
        return this.cacheResult().__iterator(isXML, instance);
      }
      var iter = this._iterator;
      var items = this._iteratorCache;
      /** @type {number} */
      var index = 0;
      return new input(function() {
        if (index >= items.length) {
          var item = iter.next();
          if (item.done) {
            return item;
          }
          items[index] = item.value;
        }
        return encodeUriQuery(isXML, index, items[index++]);
      });
    };
    var u;
    $(res, add);
    /**
     * @return {?}
     */
    res.prototype.toString = function() {
      return 0 === this.size ? "Repeat []" : "Repeat [ " + this._value + " " + this.size + " times ]";
    };
    /**
     * @param {?} expectedHashCode
     * @param {string} value
     * @return {?}
     */
    res.prototype.get = function(expectedHashCode, value) {
      return this.has(expectedHashCode) ? this._value : value;
    };
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    res.prototype.includes = function(expectedHashCode) {
      return callback(this._value, expectedHashCode);
    };
    /**
     * @param {number} recurring
     * @param {number} expectedNumberOfNonCommentArgs
     * @return {?}
     */
    res.prototype.slice = function(recurring, expectedNumberOfNonCommentArgs) {
      var m = this.size;
      return expect(recurring, expectedNumberOfNonCommentArgs, m) ? this : new res(this._value, argumentsIncludeComments(expectedNumberOfNonCommentArgs, m) - min(recurring, m));
    };
    /**
     * @return {?}
     */
    res.prototype.reverse = function() {
      return this;
    };
    /**
     * @param {string} str
     * @return {?}
     */
    res.prototype.indexOf = function(str) {
      return callback(this._value, str) ? 0 : -1;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    res.prototype.lastIndexOf = function(value) {
      return callback(this._value, value) ? this.size : -1;
    };
    /**
     * @param {Function} func
     * @param {boolean} instance
     * @return {?}
     */
    res.prototype.__iterate = function(func, instance) {
      /** @type {number} */
      var index = 0;
      for (;index < this.size;index++) {
        if (false === func(this._value, index, this)) {
          return index + 1;
        }
      }
      return index;
    };
    /**
     * @param {number} value
     * @param {boolean} cm
     * @return {?}
     */
    res.prototype.__iterator = function(value, cm) {
      var f = this;
      /** @type {number} */
      var i = 0;
      return new input(function() {
        return i < f.size ? encodeUriQuery(value, i++, f._value) : getType();
      });
    };
    /**
     * @param {?} value
     * @return {?}
     */
    res.prototype.equals = function(value) {
      return value instanceof res ? callback(this._value, value._value) : handler(value);
    };
    var On;
    $(item, add);
    /**
     * @return {?}
     */
    item.prototype.toString = function() {
      return 0 === this.size ? "Range []" : "Range [ " + this._start + "..." + this._end + (1 !== this._step ? " by " + this._step : "") + " ]";
    };
    /**
     * @param {?} expectedHashCode
     * @param {string} value
     * @return {?}
     */
    item.prototype.get = function(expectedHashCode, value) {
      return this.has(expectedHashCode) ? this._start + assertEquals(this, expectedHashCode) * this._step : value;
    };
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    item.prototype.includes = function(expectedHashCode) {
      /** @type {number} */
      var x = (expectedHashCode - this._start) / this._step;
      return x >= 0 && (x < this.size && x === Math.floor(x));
    };
    /**
     * @param {?} expectedHashCode
     * @param {?} expectedNumberOfNonCommentArgs
     * @return {?}
     */
    item.prototype.slice = function(expectedHashCode, expectedNumberOfNonCommentArgs) {
      return expect(expectedHashCode, expectedNumberOfNonCommentArgs, this.size) ? this : (expectedHashCode = min(expectedHashCode, this.size), (expectedNumberOfNonCommentArgs = argumentsIncludeComments(expectedNumberOfNonCommentArgs, this.size)) <= expectedHashCode ? new item(0, 0) : new item(this.get(expectedHashCode, this._end), this.get(expectedNumberOfNonCommentArgs, this._end), this._step));
    };
    /**
     * @param {string} str
     * @return {?}
     */
    item.prototype.indexOf = function(str) {
      /** @type {number} */
      var l = str - this._start;
      if (l % this._step == 0) {
        /** @type {number} */
        var index = l / this._step;
        if (index >= 0 && index < this.size) {
          return index;
        }
      }
      return-1;
    };
    /**
     * @param {string} pattern
     * @return {?}
     */
    item.prototype.lastIndexOf = function(pattern) {
      return this.indexOf(pattern);
    };
    /**
     * @param {Function} iterator
     * @param {boolean} instance
     * @return {?}
     */
    item.prototype.__iterate = function(iterator, instance) {
      /** @type {number} */
      var firingIndex = this.size - 1;
      var name = this._step;
      var x = instance ? this._start + firingIndex * name : this._start;
      /** @type {number} */
      var index = 0;
      for (;index <= firingIndex;index++) {
        if (false === iterator(x, index, this)) {
          return index + 1;
        }
        x += instance ? -name : name;
      }
      return index;
    };
    /**
     * @param {number} value
     * @param {boolean} cm
     * @return {?}
     */
    item.prototype.__iterator = function(value, cm) {
      /** @type {number} */
      var lastTabIndex = this.size - 1;
      var locStep = this._step;
      var event = cm ? this._start + lastTabIndex * locStep : this._start;
      /** @type {number} */
      var index = 0;
      return new input(function() {
        var originalEvent = event;
        return event += cm ? -locStep : locStep, index > lastTabIndex ? getType() : encodeUriQuery(value, index++, originalEvent);
      });
    };
    /**
     * @param {?} that
     * @return {?}
     */
    item.prototype.equals = function(that) {
      return that instanceof item ? this._start === that._start && (this._end === that._end && this._step === that._step) : handler(this, that);
    };
    var out;
    $(clone, e);
    $(instance, clone);
    $(c, clone);
    $(o, clone);
    /** @type {function (): undefined} */
    clone.Keyed = instance;
    /** @type {function (): undefined} */
    clone.Indexed = c;
    /** @type {function (): undefined} */
    clone.Set = o;
    var data_user;
    /** @type {Function} */
    var isArguments = "function" == typeof Math.imul && -2 === Math.imul(4294967295, 2) ? Math.imul : function(arr2, opt_attributes) {
      /** @type {number} */
      var a21 = 65535 & (arr2 |= 0);
      /** @type {number} */
      var b02 = 65535 & (opt_attributes |= 0);
      return a21 * b02 + ((arr2 >>> 16) * b02 + a21 * (opt_attributes >>> 16) << 16 >>> 0) | 0;
    };
    /** @type {function (Object): boolean} */
    var defineProperties = Object.isExtensible;
    var Nn = function() {
      try {
        return Object.defineProperty({}, "@", {}), true;
      } catch (t) {
        return false;
      }
    }();
    /** @type {boolean} */
    var fn = "function" == typeof WeakMap;
    if (fn) {
      data_user = new WeakMap;
    }
    /** @type {number} */
    var Rn = 0;
    /** @type {string} */
    var style = "__immutablehash__";
    if ("function" == typeof Symbol) {
      style = Symbol(style);
    }
    /** @type {number} */
    var max = 16;
    /** @type {number} */
    var container = 255;
    /** @type {number} */
    var element = 0;
    var flags = {};
    $(req, instance);
    /**
     * @return {?}
     */
    req.of = function() {
      /** @type {Array.<?>} */
      var args = __slice.call(arguments, 0);
      return split().withMutations(function(value) {
        /** @type {number} */
        var i = 0;
        for (;i < args.length;i += 2) {
          if (i + 1 >= args.length) {
            throw new Error("Missing value for key: " + args[i]);
          }
          value.set(args[i], args[i + 1]);
        }
      });
    };
    /**
     * @return {?}
     */
    req.prototype.toString = function() {
      return this.__toString("Map {", "}");
    };
    /**
     * @param {?} expectedHashCode
     * @param {string} value
     * @return {?}
     */
    req.prototype.get = function(expectedHashCode, value) {
      return this._root ? this._root.get(0, void 0, expectedHashCode, value) : value;
    };
    /**
     * @param {?} keepData
     * @param {?} value
     * @return {?}
     */
    req.prototype.set = function(keepData, value) {
      return parse(this, keepData, value);
    };
    /**
     * @param {?} fmt
     * @param {?} x
     * @return {?}
     */
    req.prototype.setIn = function(fmt, x) {
      return this.updateIn(fmt, camelKey, function() {
        return x;
      });
    };
    /**
     * @param {?} keepData
     * @return {?}
     */
    req.prototype.remove = function(keepData) {
      return parse(this, keepData, camelKey);
    };
    /**
     * @param {?} fmt
     * @return {?}
     */
    req.prototype.deleteIn = function(fmt) {
      return this.updateIn(fmt, function() {
        return camelKey;
      });
    };
    /**
     * @param {string} bytes
     * @param {Object} value
     * @param {Function} source
     * @return {?}
     */
    req.prototype.update = function(bytes, value, source) {
      return 1 === arguments.length ? bytes(this) : this.updateIn([bytes], value, source);
    };
    /**
     * @param {?} err
     * @param {Object} value
     * @param {Function} val
     * @return {?}
     */
    req.prototype.updateIn = function(err, value, val) {
      if (!val) {
        /** @type {Object} */
        val = value;
        value = void 0;
      }
      var ret = loaded(this, complete(err), value, val);
      return ret === camelKey ? void 0 : ret;
    };
    /**
     * @return {?}
     */
    req.prototype.clear = function() {
      return 0 === this.size ? this : this.__ownerID ? (this.size = 0, this._root = null, this.__hash = void 0, this.__altered = true, this) : split();
    };
    /**
     * @return {?}
     */
    req.prototype.merge = function() {
      return renderElement(this, void 0, arguments);
    };
    /**
     * @param {Function} x
     * @return {?}
     */
    req.prototype.mergeWith = function(x) {
      return renderElement(this, x, __slice.call(arguments, 1));
    };
    /**
     * @param {?} fmt
     * @return {?}
     */
    req.prototype.mergeIn = function(fmt) {
      /** @type {Array.<?>} */
      var funcs = __slice.call(arguments, 1);
      return this.updateIn(fmt, split(), function(self) {
        return "function" == typeof self.merge ? self.merge.apply(self, funcs) : funcs[funcs.length - 1];
      });
    };
    /**
     * @return {?}
     */
    req.prototype.mergeDeep = function() {
      return renderElement(this, pause, arguments);
    };
    /**
     * @param {Function} func
     * @return {?}
     */
    req.prototype.mergeDeepWith = function(func) {
      /** @type {Array.<?>} */
      var expectedArgs = __slice.call(arguments, 1);
      return renderElement(this, make(func), expectedArgs);
    };
    /**
     * @param {?} fmt
     * @return {?}
     */
    req.prototype.mergeDeepIn = function(fmt) {
      /** @type {Array.<?>} */
      var funcs = __slice.call(arguments, 1);
      return this.updateIn(fmt, split(), function(newArgs) {
        return "function" == typeof newArgs.mergeDeep ? newArgs.mergeDeep.apply(newArgs, funcs) : funcs[funcs.length - 1];
      });
    };
    /**
     * @param {Function} func
     * @return {?}
     */
    req.prototype.sort = function(func) {
      return t(map(this, func));
    };
    /**
     * @param {Object} fn
     * @param {Function} obj
     * @return {?}
     */
    req.prototype.sortBy = function(fn, obj) {
      return t(map(this, obj, fn));
    };
    /**
     * @param {Function} on
     * @return {?}
     */
    req.prototype.withMutations = function(on) {
      var failuresLink = this.asMutable();
      return on(failuresLink), failuresLink.wasAltered() ? failuresLink.__ensureOwner(this.__ownerID) : this;
    };
    /**
     * @return {?}
     */
    req.prototype.asMutable = function() {
      return this.__ownerID ? this : this.__ensureOwner(new Element);
    };
    /**
     * @return {?}
     */
    req.prototype.asImmutable = function() {
      return this.__ensureOwner();
    };
    /**
     * @return {?}
     */
    req.prototype.wasAltered = function() {
      return this.__altered;
    };
    /**
     * @param {number} value
     * @param {boolean} cm
     * @return {?}
     */
    req.prototype.__iterator = function(value, cm) {
      return new entity(this, value, cm);
    };
    /**
     * @param {Function} iterator
     * @param {boolean} a
     * @return {?}
     */
    req.prototype.__iterate = function(iterator, a) {
      var list = this;
      /** @type {number} */
      var r = 0;
      return this._root && this._root.iterate(function(tag) {
        return r++, iterator(tag[1], tag[0], list);
      }, a), r;
    };
    /**
     * @param {boolean} deepDataAndEvents
     * @return {?}
     */
    req.prototype.__ensureOwner = function(deepDataAndEvents) {
      return deepDataAndEvents === this.__ownerID ? this : deepDataAndEvents ? create(this.size, this._root, deepDataAndEvents, this.__hash) : (this.__ownerID = deepDataAndEvents, this.__altered = false, this);
    };
    /** @type {function (Object): ?} */
    req.isMap = fire;
    /** @type {string} */
    var idProperty = "@@__IMMUTABLE_MAP__@@";
    var self = req.prototype;
    /** @type {boolean} */
    self[idProperty] = true;
    /** @type {function (?): ?} */
    self.delete = self.remove;
    /** @type {function (?): ?} */
    self.removeIn = self.deleteIn;
    /**
     * @param {?} expectedHashCode
     * @param {string} value
     * @param {Object} expectedNumberOfNonCommentArgs
     * @param {string} def
     * @return {?}
     */
    Animation.prototype.get = function(expectedHashCode, value, expectedNumberOfNonCommentArgs, def) {
      var codeSegments = this.entries;
      /** @type {number} */
      var i = 0;
      var valuesLen = codeSegments.length;
      for (;i < valuesLen;i++) {
        if (callback(expectedNumberOfNonCommentArgs, codeSegments[i][0])) {
          return codeSegments[i][1];
        }
      }
      return def;
    };
    /**
     * @param {string} bytes
     * @param {number} value
     * @param {Function} position
     * @param {number} a
     * @param {string} val
     * @param {?} s
     * @param {?} option
     * @return {?}
     */
    Animation.prototype.update = function(bytes, value, position, a, val, s, option) {
      /** @type {boolean} */
      var failed = val === camelKey;
      var checkSet = this.entries;
      /** @type {number} */
      var i = 0;
      var l = checkSet.length;
      for (;i < l && !callback(a, checkSet[i][0]);i++) {
      }
      /** @type {boolean} */
      var result = i < l;
      if (result ? checkSet[i][1] === val : failed) {
        return this;
      }
      if (jQuery(option), (failed || !result) && jQuery(s), !failed || 1 !== checkSet.length) {
        if (!result && (!failed && checkSet.length >= width)) {
          return clear(bytes, checkSet, a, val);
        }
        var isXML = bytes && bytes === this.ownerID;
        var ret = isXML ? checkSet : makeArray(checkSet);
        return result ? failed ? i === l - 1 ? ret.pop() : ret[i] = ret.pop() : ret[i] = [a, val] : ret.push([a, val]), isXML ? (this.entries = ret, this) : new Animation(bytes, ret);
      }
    };
    /**
     * @param {?} expectedHashCode
     * @param {string} value
     * @param {Object} expectedNumberOfNonCommentArgs
     * @param {string} def
     * @return {?}
     */
    Node.prototype.get = function(expectedHashCode, value, expectedNumberOfNonCommentArgs, def) {
      if (void 0 === value) {
        value = stringify(expectedNumberOfNonCommentArgs);
      }
      /** @type {number} */
      var i = 1 << ((0 === expectedHashCode ? value : value >>> expectedHashCode) & mask);
      var bitmap = this.bitmap;
      return 0 == (bitmap & i) ? def : this.nodes[formatter(bitmap & i - 1)].get(expectedHashCode + d, value, expectedNumberOfNonCommentArgs, def);
    };
    /**
     * @param {string} obj
     * @param {number} value
     * @param {number} newValue
     * @param {number} current
     * @param {string} val
     * @param {?} holder
     * @param {?} path
     * @return {?}
     */
    Node.prototype.update = function(obj, value, newValue, current, val, holder, path) {
      if (void 0 === newValue) {
        newValue = stringify(current);
      }
      /** @type {number} */
      var classNames = (0 === value ? newValue : newValue >>> value) & mask;
      /** @type {number} */
      var p = 1 << classNames;
      var o = this.bitmap;
      /** @type {boolean} */
      var key = 0 != (o & p);
      if (!key && val === camelKey) {
        return this;
      }
      var node = formatter(o & p - 1);
      var nodes = this.nodes;
      var item = key ? nodes[node] : void 0;
      var element = walk(item, obj, value + d, newValue, current, val, holder, path);
      if (element === item) {
        return this;
      }
      if (!key && (element && nodes.length >= n)) {
        return pass(obj, nodes, o, classNames, element);
      }
      if (key && (!element && (2 === nodes.length && select(nodes[1 ^ node])))) {
        return nodes[1 ^ node];
      }
      if (key && (element && (1 === nodes.length && select(element)))) {
        return element;
      }
      var suiteView = obj && obj === this.ownerID;
      var id = key ? element ? o : o ^ p : o | p;
      var values = key ? element ? query(nodes, node, element, suiteView) : toArray(nodes, node, suiteView) : empty(nodes, node, element, suiteView);
      return suiteView ? (this.bitmap = id, this.nodes = values, this) : new Node(obj, id, values);
    };
    /**
     * @param {?} expectedHashCode
     * @param {string} value
     * @param {Object} expectedNumberOfNonCommentArgs
     * @param {string} def
     * @return {?}
     */
    List.prototype.get = function(expectedHashCode, value, expectedNumberOfNonCommentArgs, def) {
      if (void 0 === value) {
        value = stringify(expectedNumberOfNonCommentArgs);
      }
      /** @type {number} */
      var index = (0 === expectedHashCode ? value : value >>> expectedHashCode) & mask;
      var iterator = this.nodes[index];
      return iterator ? iterator.get(expectedHashCode + d, value, expectedNumberOfNonCommentArgs, def) : def;
    };
    /**
     * @param {string} bytes
     * @param {number} value
     * @param {number} val
     * @param {number} obj
     * @param {string} source
     * @param {?} holder
     * @param {?} path
     * @return {?}
     */
    List.prototype.update = function(bytes, value, val, obj, source, holder, path) {
      if (void 0 === val) {
        val = stringify(obj);
      }
      /** @type {number} */
      var index = (0 === value ? val : val >>> value) & mask;
      /** @type {boolean} */
      var terminated = source === camelKey;
      var item = this.nodes;
      var callback = item[index];
      if (terminated && !callback) {
        return this;
      }
      var cb = walk(callback, bytes, value + d, val, obj, source, holder, path);
      if (cb === callback) {
        return this;
      }
      var failuresLink = this.count;
      if (callback) {
        if (!cb && --failuresLink < half) {
          return reset(bytes, item, failuresLink, index);
        }
      } else {
        failuresLink++;
      }
      var suiteView = bytes && bytes === this.ownerID;
      var nodes = query(item, index, cb, suiteView);
      return suiteView ? (this.count = failuresLink, this.nodes = nodes, this) : new List(bytes, failuresLink, nodes);
    };
    /**
     * @param {?} expectedHashCode
     * @param {string} value
     * @param {Object} expectedNumberOfNonCommentArgs
     * @param {string} def
     * @return {?}
     */
    Transform.prototype.get = function(expectedHashCode, value, expectedNumberOfNonCommentArgs, def) {
      var codeSegments = this.entries;
      /** @type {number} */
      var i = 0;
      var valuesLen = codeSegments.length;
      for (;i < valuesLen;i++) {
        if (callback(expectedNumberOfNonCommentArgs, codeSegments[i][0])) {
          return codeSegments[i][1];
        }
      }
      return def;
    };
    /**
     * @param {string} bytes
     * @param {number} key
     * @param {string} newValue
     * @param {number} value
     * @param {string} val
     * @param {?} s
     * @param {?} option
     * @return {?}
     */
    Transform.prototype.update = function(bytes, key, newValue, value, val, s, option) {
      if (void 0 === newValue) {
        newValue = stringify(value);
      }
      /** @type {boolean} */
      var failed = val === camelKey;
      if (newValue !== this.keyHash) {
        return failed ? this : (jQuery(option), jQuery(s), write(this, bytes, key, newValue, [value, val]));
      }
      var checkSet = this.entries;
      /** @type {number} */
      var i = 0;
      var l = checkSet.length;
      for (;i < l && !callback(value, checkSet[i][0]);i++) {
      }
      /** @type {boolean} */
      var result = i < l;
      if (result ? checkSet[i][1] === val : failed) {
        return this;
      }
      if (jQuery(option), (failed || !result) && jQuery(s), failed && 2 === l) {
        return new target(bytes, this.keyHash, checkSet[1 ^ i]);
      }
      var hasBody = bytes && bytes === this.ownerID;
      var data = hasBody ? checkSet : makeArray(checkSet);
      return result ? failed ? i === l - 1 ? data.pop() : data[i] = data.pop() : data[i] = [value, val] : data.push([value, val]), hasBody ? (this.entries = data, this) : new Transform(bytes, this.keyHash, data);
    };
    /**
     * @param {?} expectedHashCode
     * @param {string} value
     * @param {Object} expectedNumberOfNonCommentArgs
     * @param {string} def
     * @return {?}
     */
    target.prototype.get = function(expectedHashCode, value, expectedNumberOfNonCommentArgs, def) {
      return callback(expectedNumberOfNonCommentArgs, this.entry[0]) ? this.entry[1] : def;
    };
    /**
     * @param {string} bytes
     * @param {number} key
     * @param {Function} position
     * @param {number} value
     * @param {string} val
     * @param {?} s
     * @param {?} option
     * @return {?}
     */
    target.prototype.update = function(bytes, key, position, value, val, s, option) {
      /** @type {boolean} */
      var html = val === camelKey;
      var isFunction = callback(value, this.entry[0]);
      return(isFunction ? val === this.entry[1] : html) ? this : (jQuery(option), html ? void jQuery(s) : isFunction ? bytes && bytes === this.ownerID ? (this.entry[1] = val, this) : new target(bytes, this.keyHash, [value, val]) : (jQuery(s), write(this, bytes, key, stringify(value), [value, val])));
    };
    /** @type {function (Function, boolean): ?} */
    Animation.prototype.iterate = Transform.prototype.iterate = function(done, v02) {
      var endPos = this.entries;
      /** @type {number} */
      var left = 0;
      /** @type {number} */
      var right = endPos.length - 1;
      for (;left <= right;left++) {
        if (false === done(endPos[v02 ? right - left : left])) {
          return false;
        }
      }
    };
    /** @type {function (Function, boolean): ?} */
    Node.prototype.iterate = List.prototype.iterate = function(done, v02) {
      var nodes = this.nodes;
      /** @type {number} */
      var i = 0;
      /** @type {number} */
      var len = nodes.length - 1;
      for (;i <= len;i++) {
        var node = nodes[v02 ? len - i : i];
        if (node && false === node.iterate(done, v02)) {
          return false;
        }
      }
    };
    /**
     * @param {Function} done
     * @param {boolean} v02
     * @return {?}
     */
    target.prototype.iterate = function(done, v02) {
      return done(this.entry);
    };
    $(entity, input);
    /**
     * @return {?}
     */
    entity.prototype.next = function() {
      var udataCur = this._type;
      var pos = this._stack;
      for (;pos;) {
        var right;
        var node = pos.node;
        /** @type {number} */
        var left = pos.index++;
        if (node.entry) {
          if (0 === left) {
            return emit(udataCur, node.entry);
          }
        } else {
          if (node.entries) {
            if (right = node.entries.length - 1, left <= right) {
              return emit(udataCur, node.entries[this._reverse ? right - left : left]);
            }
          } else {
            if (right = node.nodes.length - 1, left <= right) {
              var e = node.nodes[this._reverse ? right - left : left];
              if (e) {
                if (e.entry) {
                  return emit(udataCur, e.entry);
                }
                pos = this._stack = trigger(e, pos);
              }
              continue;
            }
          }
        }
        pos = this._stack = this._stack.__prev;
      }
      return getType();
    };
    var p;
    /** @type {number} */
    var width = size / 4;
    /** @type {number} */
    var n = size / 2;
    /** @type {number} */
    var half = size / 4;
    $(that, c);
    /**
     * @return {?}
     */
    that.of = function() {
      return this(arguments);
    };
    /**
     * @return {?}
     */
    that.prototype.toString = function() {
      return this.__toString("List [", "]");
    };
    /**
     * @param {?} expectedHashCode
     * @param {string} value
     * @return {?}
     */
    that.prototype.get = function(expectedHashCode, value) {
      if ((expectedHashCode = assertEquals(this, expectedHashCode)) >= 0 && expectedHashCode < this.size) {
        var config = load(this, expectedHashCode += this._origin);
        return config && config.array[expectedHashCode & mask];
      }
      return value;
    };
    /**
     * @param {?} keepData
     * @param {?} value
     * @return {?}
     */
    that.prototype.set = function(keepData, value) {
      return set(this, keepData, value);
    };
    /**
     * @param {?} keepData
     * @return {?}
     */
    that.prototype.remove = function(keepData) {
      return this.has(keepData) ? 0 === keepData ? this.shift() : keepData === this.size - 1 ? this.pop() : this.splice(keepData, 1) : this;
    };
    /**
     * @param {number} index
     * @param {?} x
     * @return {?}
     */
    that.prototype.insert = function(index, x) {
      return this.splice(index, 0, x);
    };
    /**
     * @return {?}
     */
    that.prototype.clear = function() {
      return 0 === this.size ? this : this.__ownerID ? (this.size = this._origin = this._capacity = 0, this._level = d, this._root = this._tail = null, this.__hash = void 0, this.__altered = true, this) : off();
    };
    /**
     * @return {?}
     */
    that.prototype.push = function() {
      /** @type {Arguments} */
      var args = arguments;
      var s = this.size;
      return this.withMutations(function(self) {
        setup(self, 0, s + args.length);
        /** @type {number} */
        var i = 0;
        for (;i < args.length;i++) {
          self.set(s + i, args[i]);
        }
      });
    };
    /**
     * @return {?}
     */
    that.prototype.pop = function() {
      return setup(this, 0, -1);
    };
    /**
     * @return {?}
     */
    that.prototype.unshift = function() {
      /** @type {Arguments} */
      var args = arguments;
      return this.withMutations(function(self) {
        setup(self, -args.length);
        /** @type {number} */
        var key = 0;
        for (;key < args.length;key++) {
          self.set(key, args[key]);
        }
      });
    };
    /**
     * @return {?}
     */
    that.prototype.shift = function() {
      return setup(this, 1);
    };
    /**
     * @return {?}
     */
    that.prototype.merge = function() {
      return run(this, void 0, arguments);
    };
    /**
     * @param {Function} done
     * @return {?}
     */
    that.prototype.mergeWith = function(done) {
      return run(this, done, __slice.call(arguments, 1));
    };
    /**
     * @return {?}
     */
    that.prototype.mergeDeep = function() {
      return run(this, pause, arguments);
    };
    /**
     * @param {Function} func
     * @return {?}
     */
    that.prototype.mergeDeepWith = function(func) {
      /** @type {Array.<?>} */
      var expectedArgs = __slice.call(arguments, 1);
      return run(this, make(func), expectedArgs);
    };
    /**
     * @param {number} size
     * @return {?}
     */
    that.prototype.setSize = function(size) {
      return setup(this, 0, size);
    };
    /**
     * @param {number} recurring
     * @param {number} expectedNumberOfNonCommentArgs
     * @return {?}
     */
    that.prototype.slice = function(recurring, expectedNumberOfNonCommentArgs) {
      var ll = this.size;
      return expect(recurring, expectedNumberOfNonCommentArgs, ll) ? this : setup(this, min(recurring, ll), argumentsIncludeComments(expectedNumberOfNonCommentArgs, ll));
    };
    /**
     * @param {number} value
     * @param {boolean} cm
     * @return {?}
     */
    that.prototype.__iterator = function(value, cm) {
      /** @type {number} */
      var n = 0;
      var getActual = render(this, cm);
      return new input(function() {
        var actual = getActual();
        return actual === expected ? getType() : encodeUriQuery(value, n++, actual);
      });
    };
    /**
     * @param {Function} iterator
     * @param {boolean} instance
     * @return {?}
     */
    that.prototype.__iterate = function(iterator, instance) {
      var x;
      /** @type {number} */
      var index = 0;
      var result = render(this, instance);
      for (;(x = result()) !== expected && false !== iterator(x, index++, this);) {
      }
      return index;
    };
    /**
     * @param {boolean} deepDataAndEvents
     * @return {?}
     */
    that.prototype.__ensureOwner = function(deepDataAndEvents) {
      return deepDataAndEvents === this.__ownerID ? this : deepDataAndEvents ? initialize(this._origin, this._capacity, this._level, this._root, this._tail, deepDataAndEvents, this.__hash) : (this.__ownerID = deepDataAndEvents, this);
    };
    /** @type {function (Object): ?} */
    that.isList = root;
    /** @type {string} */
    var lib = "@@__IMMUTABLE_LIST__@@";
    var options = that.prototype;
    /** @type {boolean} */
    options[lib] = true;
    /** @type {function (?): ?} */
    options.delete = options.remove;
    /** @type {function (?, ?): ?} */
    options.setIn = self.setIn;
    /** @type {function (?): ?} */
    options.deleteIn = options.removeIn = self.removeIn;
    /** @type {function (string, Object, Function): ?} */
    options.update = self.update;
    /** @type {function (?, Object, Function): ?} */
    options.updateIn = self.updateIn;
    /** @type {function (?): ?} */
    options.mergeIn = self.mergeIn;
    /** @type {function (?): ?} */
    options.mergeDeepIn = self.mergeDeepIn;
    /** @type {function (Function): ?} */
    options.withMutations = self.withMutations;
    /** @type {function (): ?} */
    options.asMutable = self.asMutable;
    /** @type {function (): ?} */
    options.asImmutable = self.asImmutable;
    /** @type {function (): ?} */
    options.wasAltered = self.wasAltered;
    /**
     * @param {Object} value
     * @param {number} y
     * @param {number} x
     * @return {?}
     */
    type.prototype.removeBefore = function(value, y, x) {
      if (x === y ? 1 << y : 0 === this.array.length) {
        return this;
      }
      /** @type {number} */
      var index = x >>> y & mask;
      if (index >= this.array.length) {
        return new type([], value);
      }
      var total;
      /** @type {boolean} */
      var active = 0 === index;
      if (y > 0) {
        var grid = this.array[index];
        if ((total = grid && grid.removeBefore(value, y - d, x)) === grid && active) {
          return this;
        }
      }
      if (active && !total) {
        return this;
      }
      var data = get(this, value);
      if (!active) {
        /** @type {number} */
        var i = 0;
        for (;i < index;i++) {
          data.array[i] = void 0;
        }
      }
      return total && (data.array[index] = total), data;
    };
    /**
     * @param {string} prop
     * @param {number} _xhr
     * @param {number} deepDataAndEvents
     * @return {?}
     */
    type.prototype.removeAfter = function(prop, _xhr, deepDataAndEvents) {
      if (deepDataAndEvents === (_xhr ? 1 << _xhr : 0) || 0 === this.array.length) {
        return this;
      }
      /** @type {number} */
      var index = deepDataAndEvents - 1 >>> _xhr & mask;
      if (index >= this.array.length) {
        return this;
      }
      var o;
      if (_xhr > 0) {
        var jQuery = this.array[index];
        if ((o = jQuery && jQuery.removeAfter(prop, _xhr - d, deepDataAndEvents)) === jQuery && index === this.array.length - 1) {
          return this;
        }
      }
      var result = get(this, prop);
      return result.array.splice(index + 1), o && (result.array[index] = o), result;
    };
    var r;
    var expected = {};
    $(t, req);
    /**
     * @return {?}
     */
    t.of = function() {
      return this(arguments);
    };
    /**
     * @return {?}
     */
    t.prototype.toString = function() {
      return this.__toString("OrderedMap {", "}");
    };
    /**
     * @param {?} expectedHashCode
     * @param {string} value
     * @return {?}
     */
    t.prototype.get = function(expectedHashCode, value) {
      var cacheKey = this._map.get(expectedHashCode);
      return void 0 !== cacheKey ? this._list.get(cacheKey)[1] : value;
    };
    /**
     * @return {?}
     */
    t.prototype.clear = function() {
      return 0 === this.size ? this : this.__ownerID ? (this.size = 0, this._map.clear(), this._list.clear(), this) : remove();
    };
    /**
     * @param {?} keepData
     * @param {?} value
     * @return {?}
     */
    t.prototype.set = function(keepData, value) {
      return update(this, keepData, value);
    };
    /**
     * @param {?} keepData
     * @return {?}
     */
    t.prototype.remove = function(keepData) {
      return update(this, keepData, camelKey);
    };
    /**
     * @return {?}
     */
    t.prototype.wasAltered = function() {
      return this._map.wasAltered() || this._list.wasAltered();
    };
    /**
     * @param {Function} iterator
     * @param {boolean} config
     * @return {?}
     */
    t.prototype.__iterate = function(iterator, config) {
      var list = this;
      return this._list.__iterate(function(tag) {
        return tag && iterator(tag[1], tag[0], list);
      }, config);
    };
    /**
     * @param {number} value
     * @param {boolean} cm
     * @return {?}
     */
    t.prototype.__iterator = function(value, cm) {
      return this._list.fromEntrySeq().__iterator(value, cm);
    };
    /**
     * @param {?} deepDataAndEvents
     * @return {?}
     */
    t.prototype.__ensureOwner = function(deepDataAndEvents) {
      if (deepDataAndEvents === this.__ownerID) {
        return this;
      }
      var pdataCur = this._map.__ensureOwner(deepDataAndEvents);
      var resp = this._list.__ensureOwner(deepDataAndEvents);
      return deepDataAndEvents ? success(pdataCur, resp, deepDataAndEvents, this.__hash) : (this.__ownerID = deepDataAndEvents, this._map = pdataCur, this._list = resp, this);
    };
    /** @type {function (Object): ?} */
    t.isOrderedMap = exec;
    /** @type {boolean} */
    t.prototype[j] = true;
    /** @type {function (?): ?} */
    t.prototype.delete = t.prototype.remove;
    var hasMembers;
    $(s, f);
    /**
     * @param {?} expectedHashCode
     * @param {string} value
     * @return {?}
     */
    s.prototype.get = function(expectedHashCode, value) {
      return this._iter.get(expectedHashCode, value);
    };
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    s.prototype.has = function(expectedHashCode) {
      return this._iter.has(expectedHashCode);
    };
    /**
     * @return {?}
     */
    s.prototype.valueSeq = function() {
      return this._iter.valueSeq();
    };
    /**
     * @return {?}
     */
    s.prototype.reverse = function() {
      var that = this;
      var valueSeq = Transition(this, true);
      return this._useKeys || (valueSeq.valueSeq = function() {
        return that._iter.toSeq().reverse();
      }), valueSeq;
    };
    /**
     * @param {Function} fn
     * @param {Function} mapper
     * @return {?}
     */
    s.prototype.map = function(fn, mapper) {
      var that = this;
      var matched = bind(this, fn, mapper);
      return this._useKeys || (matched.valueSeq = function() {
        return that._iter.toSeq().map(fn, mapper);
      }), matched;
    };
    /**
     * @param {Function} iterator
     * @param {boolean} config
     * @return {?}
     */
    s.prototype.__iterate = function(iterator, config) {
      var n;
      var list = this;
      return this._iter.__iterate(this._useKeys ? function(x, index) {
        return iterator(x, index, list);
      } : (n = config ? isDate(this) : 0, function(x) {
        return iterator(x, config ? --n : n++, list);
      }), config);
    };
    /**
     * @param {number} value
     * @param {boolean} cm
     * @return {?}
     */
    s.prototype.__iterator = function(value, cm) {
      if (this._useKeys) {
        return this._iter.__iterator(value, cm);
      }
      var stream = this._iter.__iterator(pdataOld, cm);
      var r = cm ? isDate(this) : 0;
      return new input(function() {
        var config = stream.next();
        return config.done ? config : encodeUriQuery(value, cm ? --r : r++, config.value, config);
      });
    };
    /** @type {boolean} */
    s.prototype[j] = true;
    $(state, add);
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    state.prototype.includes = function(expectedHashCode) {
      return this._iter.includes(expectedHashCode);
    };
    /**
     * @param {Function} iterator
     * @param {boolean} config
     * @return {?}
     */
    state.prototype.__iterate = function(iterator, config) {
      var list = this;
      /** @type {number} */
      var index = 0;
      return this._iter.__iterate(function(x) {
        return iterator(x, index++, list);
      }, config);
    };
    /**
     * @param {number} value
     * @param {boolean} cm
     * @return {?}
     */
    state.prototype.__iterator = function(value, cm) {
      var stream = this._iter.__iterator(pdataOld, cm);
      /** @type {number} */
      var r = 0;
      return new input(function() {
        var config = stream.next();
        return config.done ? config : encodeUriQuery(value, r++, config.value, config);
      });
    };
    $(template, filter);
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    template.prototype.has = function(expectedHashCode) {
      return this._iter.includes(expectedHashCode);
    };
    /**
     * @param {Function} iterator
     * @param {boolean} config
     * @return {?}
     */
    template.prototype.__iterate = function(iterator, config) {
      var list = this;
      return this._iter.__iterate(function(x) {
        return iterator(x, x, list);
      }, config);
    };
    /**
     * @param {number} value
     * @param {boolean} cm
     * @return {?}
     */
    template.prototype.__iterator = function(value, cm) {
      var stream = this._iter.__iterator(pdataOld, cm);
      return new input(function() {
        var config = stream.next();
        return config.done ? config : encodeUriQuery(value, config.value, config.value, config);
      });
    };
    $(cache, f);
    /**
     * @return {?}
     */
    cache.prototype.entrySeq = function() {
      return this._iter.toSeq();
    };
    /**
     * @param {Function} iterator
     * @param {boolean} config
     * @return {?}
     */
    cache.prototype.__iterate = function(iterator, config) {
      var list = this;
      return this._iter.__iterate(function(value) {
        if (value) {
          isExtensible(value);
          var isFunc = isString(value);
          return iterator(isFunc ? value.get(1) : value[1], isFunc ? value.get(0) : value[0], list);
        }
      }, config);
    };
    /**
     * @param {number} value
     * @param {boolean} cm
     * @return {?}
     */
    cache.prototype.__iterator = function(value, cm) {
      var stream = this._iter.__iterator(pdataOld, cm);
      return new input(function() {
        for (;;) {
          var _this = stream.next();
          if (_this.done) {
            return _this;
          }
          var c = _this.value;
          if (c) {
            isExtensible(c);
            var pos = isString(c);
            return encodeUriQuery(value, pos ? c.get(0) : c[0], pos ? c.get(1) : c[1], _this);
          }
        }
      });
    };
    /** @type {function (): ?} */
    state.prototype.cacheResult = s.prototype.cacheResult = template.prototype.cacheResult = cache.prototype.cacheResult = win;
    $(Model, instance);
    /**
     * @return {?}
     */
    Model.prototype.toString = function() {
      return this.__toString(register(this) + " {", "}");
    };
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    Model.prototype.has = function(expectedHashCode) {
      return this._defaultValues.hasOwnProperty(expectedHashCode);
    };
    /**
     * @param {?} expectedHashCode
     * @param {string} value
     * @return {?}
     */
    Model.prototype.get = function(expectedHashCode, value) {
      if (!this.has(expectedHashCode)) {
        return value;
      }
      var camelKey = this._defaultValues[expectedHashCode];
      return this._map ? this._map.get(expectedHashCode, camelKey) : camelKey;
    };
    /**
     * @return {?}
     */
    Model.prototype.clear = function() {
      if (this.__ownerID) {
        return this._map && this._map.clear(), this;
      }
      var self = this.constructor;
      return self._empty || (self._empty = callPlugin(this, split()));
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    Model.prototype.set = function(key, value) {
      if (!this.has(key)) {
        throw new Error('Cannot set unknown key "' + key + '" on ' + register(this));
      }
      if (this._map && (!this._map.has(key) && value === this._defaultValues[key])) {
        return this;
      }
      var newMap = this._map && this._map.set(key, value);
      return this.__ownerID || newMap === this._map ? this : callPlugin(this, newMap);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    Model.prototype.remove = function(key) {
      if (!this.has(key)) {
        return this;
      }
      var newMap = this._map && this._map.remove(key);
      return this.__ownerID || newMap === this._map ? this : callPlugin(this, newMap);
    };
    /**
     * @return {?}
     */
    Model.prototype.wasAltered = function() {
      return this._map.wasAltered();
    };
    /**
     * @param {number} value
     * @param {boolean} cm
     * @return {?}
     */
    Model.prototype.__iterator = function(value, cm) {
      var cl = this;
      return data(this._defaultValues).map(function(dataAndEvents, expectedHashCode) {
        return cl.get(expectedHashCode);
      }).__iterator(value, cm);
    };
    /**
     * @param {Function} iterator
     * @param {boolean} config
     * @return {?}
     */
    Model.prototype.__iterate = function(iterator, config) {
      var cl = this;
      return data(this._defaultValues).map(function(dataAndEvents, expectedHashCode) {
        return cl.get(expectedHashCode);
      }).__iterate(iterator, config);
    };
    /**
     * @param {?} deepDataAndEvents
     * @return {?}
     */
    Model.prototype.__ensureOwner = function(deepDataAndEvents) {
      if (deepDataAndEvents === this.__ownerID) {
        return this;
      }
      var newMap = this._map && this._map.__ensureOwner(deepDataAndEvents);
      return deepDataAndEvents ? callPlugin(this, newMap, deepDataAndEvents) : (this.__ownerID = deepDataAndEvents, this._map = newMap, this);
    };
    var opts = Model.prototype;
    /** @type {function (?): ?} */
    opts.delete = opts.remove;
    /** @type {function (?): ?} */
    opts.deleteIn = opts.removeIn = self.removeIn;
    /** @type {function (): ?} */
    opts.merge = self.merge;
    /** @type {function (Function): ?} */
    opts.mergeWith = self.mergeWith;
    /** @type {function (?): ?} */
    opts.mergeIn = self.mergeIn;
    /** @type {function (): ?} */
    opts.mergeDeep = self.mergeDeep;
    /** @type {function (Function): ?} */
    opts.mergeDeepWith = self.mergeDeepWith;
    /** @type {function (?): ?} */
    opts.mergeDeepIn = self.mergeDeepIn;
    /** @type {function (?, ?): ?} */
    opts.setIn = self.setIn;
    /** @type {function (string, Object, Function): ?} */
    opts.update = self.update;
    /** @type {function (?, Object, Function): ?} */
    opts.updateIn = self.updateIn;
    /** @type {function (Function): ?} */
    opts.withMutations = self.withMutations;
    /** @type {function (): ?} */
    opts.asMutable = self.asMutable;
    /** @type {function (): ?} */
    opts.asImmutable = self.asImmutable;
    $(test, o);
    /**
     * @return {?}
     */
    test.of = function() {
      return this(arguments);
    };
    /**
     * @param {?} details
     * @return {?}
     */
    test.fromKeys = function(details) {
      return this(data(details).keySeq());
    };
    /**
     * @return {?}
     */
    test.prototype.toString = function() {
      return this.__toString("Set {", "}");
    };
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    test.prototype.has = function(expectedHashCode) {
      return this._map.has(expectedHashCode);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    test.prototype.add = function(key) {
      return build(this, this._map.set(key, true));
    };
    /**
     * @param {?} key
     * @return {?}
     */
    test.prototype.remove = function(key) {
      return build(this, this._map.remove(key));
    };
    /**
     * @return {?}
     */
    test.prototype.clear = function() {
      return build(this, this._map.clear());
    };
    /**
     * @return {?}
     */
    test.prototype.union = function() {
      /** @type {Array.<?>} */
      var codeSegments = __slice.call(arguments, 0);
      return 0 === (codeSegments = codeSegments.filter(function(stat) {
        return 0 !== stat.size;
      })).length ? this : 0 !== this.size || (this.__ownerID || 1 !== codeSegments.length) ? this.withMutations(function(pe) {
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          el(codeSegments[i]).forEach(function(dest) {
            return pe.add(dest);
          });
        }
      }) : this.constructor(codeSegments[0]);
    };
    /**
     * @return {?}
     */
    test.prototype.intersect = function() {
      /** @type {Array.<?>} */
      var args = __slice.call(arguments, 0);
      if (0 === args.length) {
        return this;
      }
      /** @type {Array.<?>} */
      args = args.map(function(details) {
        return el(details);
      });
      var asserterNames = this;
      return this.withMutations(function(tracker) {
        asserterNames.forEach(function(name) {
          if (!args.every(function(meta) {
            return meta.includes(name);
          })) {
            tracker.remove(name);
          }
        });
      });
    };
    /**
     * @return {?}
     */
    test.prototype.subtract = function() {
      /** @type {Array.<?>} */
      var args = __slice.call(arguments, 0);
      if (0 === args.length) {
        return this;
      }
      /** @type {Array.<?>} */
      args = args.map(function(details) {
        return el(details);
      });
      var asserterNames = this;
      return this.withMutations(function(tracker) {
        asserterNames.forEach(function(name) {
          if (args.some(function(meta) {
            return meta.includes(name);
          })) {
            tracker.remove(name);
          }
        });
      });
    };
    /**
     * @return {?}
     */
    test.prototype.merge = function() {
      return this.union.apply(this, arguments);
    };
    /**
     * @param {Function} object
     * @return {?}
     */
    test.prototype.mergeWith = function(object) {
      /** @type {Array.<?>} */
      var args = __slice.call(arguments, 1);
      return this.union.apply(this, args);
    };
    /**
     * @param {Function} func
     * @return {?}
     */
    test.prototype.sort = function(func) {
      return param(map(this, func));
    };
    /**
     * @param {Object} fn
     * @param {Function} obj
     * @return {?}
     */
    test.prototype.sortBy = function(fn, obj) {
      return param(map(this, obj, fn));
    };
    /**
     * @return {?}
     */
    test.prototype.wasAltered = function() {
      return this._map.wasAltered();
    };
    /**
     * @param {Function} iterator
     * @param {boolean} config
     * @return {?}
     */
    test.prototype.__iterate = function(iterator, config) {
      var list = this;
      return this._map.__iterate(function(dataAndEvents, x) {
        return iterator(x, x, list);
      }, config);
    };
    /**
     * @param {number} value
     * @param {boolean} cm
     * @return {?}
     */
    test.prototype.__iterator = function(value, cm) {
      return this._map.map(function(deepDataAndEvents, dataAndEvents) {
        return dataAndEvents;
      }).__iterator(value, cm);
    };
    /**
     * @param {?} deepDataAndEvents
     * @return {?}
     */
    test.prototype.__ensureOwner = function(deepDataAndEvents) {
      if (deepDataAndEvents === this.__ownerID) {
        return this;
      }
      var pdataOld = this._map.__ensureOwner(deepDataAndEvents);
      return deepDataAndEvents ? this.__make(pdataOld, deepDataAndEvents) : (this.__ownerID = deepDataAndEvents, this._map = pdataOld, this);
    };
    /** @type {function (Object): ?} */
    test.isSet = deepEqual;
    /** @type {string} */
    var name = "@@__IMMUTABLE_SET__@@";
    var view = test.prototype;
    /** @type {boolean} */
    view[name] = true;
    /** @type {function (?): ?} */
    view.delete = view.remove;
    /** @type {function (): ?} */
    view.mergeDeep = view.merge;
    /** @type {function (Function): ?} */
    view.mergeDeepWith = view.mergeWith;
    /** @type {function (Function): ?} */
    view.withMutations = self.withMutations;
    /** @type {function (): ?} */
    view.asMutable = self.asMutable;
    /** @type {function (): ?} */
    view.asImmutable = self.asImmutable;
    /** @type {function (): ?} */
    view.__empty = find;
    /** @type {function (Object, ?): ?} */
    view.__make = normalize;
    var path;
    $(param, test);
    /**
     * @return {?}
     */
    param.of = function() {
      return this(arguments);
    };
    /**
     * @param {?} details
     * @return {?}
     */
    param.fromKeys = function(details) {
      return this(data(details).keySeq());
    };
    /**
     * @return {?}
     */
    param.prototype.toString = function() {
      return this.__toString("OrderedSet {", "}");
    };
    /** @type {function (Object): ?} */
    param.isOrderedSet = verifyCallAllowed;
    var x = param.prototype;
    /** @type {boolean} */
    x[j] = true;
    /** @type {function (): ?} */
    x.__empty = serialize;
    /** @type {function (Object, ?): ?} */
    x.__make = toString;
    var str;
    $(info, c);
    /**
     * @return {?}
     */
    info.of = function() {
      return this(arguments);
    };
    /**
     * @return {?}
     */
    info.prototype.toString = function() {
      return this.__toString("Stack [", "]");
    };
    /**
     * @param {?} expectedHashCode
     * @param {string} value
     * @return {?}
     */
    info.prototype.get = function(expectedHashCode, value) {
      var current = this._head;
      expectedHashCode = assertEquals(this, expectedHashCode);
      for (;current && expectedHashCode--;) {
        current = current.next;
      }
      return current ? current.value : value;
    };
    /**
     * @return {?}
     */
    info.prototype.peek = function() {
      return this._head && this._head.value;
    };
    /**
     * @return {?}
     */
    info.prototype.push = function() {
      if (0 === arguments.length) {
        return this;
      }
      var udataCur = this.size + arguments.length;
      var head = this._head;
      /** @type {number} */
      var j = arguments.length - 1;
      for (;j >= 0;j--) {
        head = {
          value : arguments[j],
          next : head
        };
      }
      return this.__ownerID ? (this.size = udataCur, this._head = head, this.__hash = void 0, this.__altered = true, this) : save(udataCur, head);
    };
    /**
     * @param {?} b
     * @return {?}
     */
    info.prototype.pushAll = function(b) {
      if (0 === (b = m(b)).size) {
        return this;
      }
      each(b.size);
      var udataCur = this.size;
      var head = this._head;
      return b.reverse().forEach(function(x) {
        udataCur++;
        head = {
          value : x,
          next : head
        };
      }), this.__ownerID ? (this.size = udataCur, this._head = head, this.__hash = void 0, this.__altered = true, this) : save(udataCur, head);
    };
    /**
     * @return {?}
     */
    info.prototype.pop = function() {
      return this.slice(1);
    };
    /**
     * @return {?}
     */
    info.prototype.unshift = function() {
      return this.push.apply(this, arguments);
    };
    /**
     * @param {string} vals
     * @return {?}
     */
    info.prototype.unshiftAll = function(vals) {
      return this.pushAll(vals);
    };
    /**
     * @return {?}
     */
    info.prototype.shift = function() {
      return this.pop.apply(this, arguments);
    };
    /**
     * @return {?}
     */
    info.prototype.clear = function() {
      return 0 === this.size ? this : this.__ownerID ? (this.size = 0, this._head = void 0, this.__hash = void 0, this.__altered = true, this) : clearData();
    };
    /**
     * @param {number} recurring
     * @param {number} expectedNumberOfNonCommentArgs
     * @return {?}
     */
    info.prototype.slice = function(recurring, expectedNumberOfNonCommentArgs) {
      if (expect(recurring, expectedNumberOfNonCommentArgs, this.size)) {
        return this;
      }
      var n = min(recurring, this.size);
      if (argumentsIncludeComments(expectedNumberOfNonCommentArgs, this.size) !== this.size) {
        return c.prototype.slice.call(this, recurring, expectedNumberOfNonCommentArgs);
      }
      /** @type {number} */
      var m = this.size - n;
      var head = this._head;
      for (;n--;) {
        head = head.next;
      }
      return this.__ownerID ? (this.size = m, this._head = head, this.__hash = void 0, this.__altered = true, this) : save(m, head);
    };
    /**
     * @param {?} deepDataAndEvents
     * @return {?}
     */
    info.prototype.__ensureOwner = function(deepDataAndEvents) {
      return deepDataAndEvents === this.__ownerID ? this : deepDataAndEvents ? save(this.size, this._head, deepDataAndEvents, this.__hash) : (this.__ownerID = deepDataAndEvents, this.__altered = false, this);
    };
    /**
     * @param {Function} iterator
     * @param {boolean} instance
     * @return {?}
     */
    info.prototype.__iterate = function(iterator, instance) {
      if (instance) {
        return this.reverse().__iterate(iterator);
      }
      /** @type {number} */
      var index = 0;
      var x = this._head;
      for (;x && false !== iterator(x.value, index++, this);) {
        x = x.next;
      }
      return index;
    };
    /**
     * @param {number} value
     * @param {boolean} cm
     * @return {?}
     */
    info.prototype.__iterator = function(value, cm) {
      if (cm) {
        return this.reverse().__iterator(value);
      }
      /** @type {number} */
      var n = 0;
      var current = this._head;
      return new input(function() {
        if (current) {
          var orig = current.value;
          return current = current.next, encodeUriQuery(value, n++, orig);
        }
        return getType();
      });
    };
    /** @type {function (Object): ?} */
    info.isStack = isNodeList;
    /** @type {string} */
    var method = "@@__IMMUTABLE_STACK__@@";
    var parent = info.prototype;
    /** @type {boolean} */
    parent[method] = true;
    /** @type {function (Function): ?} */
    parent.withMutations = self.withMutations;
    /** @type {function (): ?} */
    parent.asMutable = self.asMutable;
    /** @type {function (): ?} */
    parent.asImmutable = self.asImmutable;
    /** @type {function (): ?} */
    parent.wasAltered = self.wasAltered;
    var any;
    /** @type {function (?): undefined} */
    e.Iterator = input;
    extend(e, {
      /**
       * @return {?}
       */
      toArray : function() {
        each(this.size);
        /** @type {Array} */
        var myAt = new Array(this.size || 0);
        return this.valueSeq().__iterate(function(offsetPosition, i) {
          myAt[i] = offsetPosition;
        }), myAt;
      },
      /**
       * @return {?}
       */
      toIndexedSeq : function() {
        return new state(this);
      },
      /**
       * @return {?}
       */
      toJS : function() {
        return this.toSeq().map(function(node) {
          return node && "function" == typeof node.toJS ? node.toJS() : node;
        }).__toJS();
      },
      /**
       * @return {?}
       */
      toJSON : function() {
        return this.toSeq().map(function(val) {
          return val && "function" == typeof val.toJSON ? val.toJSON() : val;
        }).__toJS();
      },
      /**
       * @return {?}
       */
      toKeyedSeq : function() {
        return new s(this, true);
      },
      /**
       * @return {?}
       */
      toMap : function() {
        return req(this.toKeyedSeq());
      },
      /**
       * @return {?}
       */
      toObject : function() {
        each(this.size);
        var stack = {};
        return this.__iterate(function(v, offset) {
          stack[offset] = v;
        }), stack;
      },
      /**
       * @return {?}
       */
      toOrderedMap : function() {
        return t(this.toKeyedSeq());
      },
      /**
       * @return {?}
       */
      toOrderedSet : function() {
        return param(isFunction(this) ? this.valueSeq() : this);
      },
      /**
       * @return {?}
       */
      toSet : function() {
        return test(isFunction(this) ? this.valueSeq() : this);
      },
      /**
       * @return {?}
       */
      toSetSeq : function() {
        return new template(this);
      },
      /**
       * @return {?}
       */
      toSeq : function() {
        return isClassOf(this) ? this.toIndexedSeq() : isFunction(this) ? this.toKeyedSeq() : this.toSetSeq();
      },
      /**
       * @return {?}
       */
      toStack : function() {
        return info(isFunction(this) ? this.valueSeq() : this);
      },
      /**
       * @return {?}
       */
      toList : function() {
        return that(isFunction(this) ? this.valueSeq() : this);
      },
      /**
       * @return {?}
       */
      toString : function() {
        return "[Iterable]";
      },
      /**
       * @param {string} far
       * @param {string} near
       * @return {?}
       */
      __toString : function(far, near) {
        return 0 === this.size ? far + near : far + " " + this.toSeq().map(this.__toStringMapper).join(", ") + " " + near;
      },
      /**
       * @return {?}
       */
      concat : function() {
        return flatten(this, draw(this, __slice.call(arguments, 0)));
      },
      /**
       * @param {?} expectedHashCode
       * @return {?}
       */
      includes : function(expectedHashCode) {
        return this.some(function(basis) {
          return callback(basis, expectedHashCode);
        });
      },
      /**
       * @return {?}
       */
      entries : function() {
        return this.__iterator(udataCur);
      },
      /**
       * @param {Function} fn
       * @param {?} bind
       * @return {?}
       */
      every : function(fn, bind) {
        each(this.size);
        /** @type {boolean} */
        var n = true;
        return this.__iterate(function(Class, index, computed) {
          if (!fn.call(bind, Class, index, computed)) {
            return n = false, false;
          }
        }), n;
      },
      /**
       * @param {Function} bind
       * @param {?} _
       * @return {?}
       */
      filter : function(bind, _) {
        return flatten(this, factory(this, bind, _, true));
      },
      /**
       * @param {Function} key
       * @param {?} opt_attributes
       * @param {?} obj
       * @return {?}
       */
      find : function(key, opt_attributes, obj) {
        var entry = this.findEntry(key, opt_attributes);
        return entry ? entry[1] : obj;
      },
      /**
       * @param {Function} elem
       * @param {Function} type
       * @return {?}
       */
      forEach : function(elem, type) {
        return each(this.size), this.__iterate(type ? elem.bind(type) : elem);
      },
      /**
       * @param {string} sep
       * @return {?}
       */
      join : function(sep) {
        each(this.size);
        /** @type {string} */
        sep = void 0 !== sep ? "" + sep : ",";
        /** @type {string} */
        var str = "";
        /** @type {boolean} */
        var n = true;
        return this.__iterate(function(code) {
          if (n) {
            /** @type {boolean} */
            n = false;
          } else {
            str += sep;
          }
          str += null !== code && void 0 !== code ? code.toString() : "";
        }), str;
      },
      /**
       * @return {?}
       */
      keys : function() {
        return this.__iterator(pdataCur);
      },
      /**
       * @param {Function} fn
       * @param {Function} mapper
       * @return {?}
       */
      map : function(fn, mapper) {
        return flatten(this, bind(this, fn, mapper));
      },
      /**
       * @param {Function} callback
       * @param {Array} lab
       * @param {?} thisObj
       * @return {?}
       */
      reduce : function(callback, lab, thisObj) {
        each(this.size);
        var memo;
        var i;
        return arguments.length < 2 ? i = true : memo = lab, this.__iterate(function(value, index, list) {
          if (i) {
            /** @type {boolean} */
            i = false;
            memo = value;
          } else {
            memo = callback.call(thisObj, memo, value, index, list);
          }
        }), memo;
      },
      /**
       * @param {?} memo
       * @param {?} arr
       * @param {?} initVal
       * @return {?}
       */
      reduceRight : function(memo, arr, initVal) {
        var names = this.toKeyedSeq().reverse();
        return names.reduce.apply(names, arguments);
      },
      /**
       * @return {?}
       */
      reverse : function() {
        return flatten(this, Transition(this, true));
      },
      /**
       * @param {number} recurring
       * @param {number} expectedNumberOfNonCommentArgs
       * @return {?}
       */
      slice : function(recurring, expectedNumberOfNonCommentArgs) {
        return flatten(this, post(this, recurring, expectedNumberOfNonCommentArgs, true));
      },
      /**
       * @param {Function} orig
       * @param {?} fn
       * @return {?}
       */
      some : function(orig, fn) {
        return!this.every(URI(orig), fn);
      },
      /**
       * @param {Function} func
       * @return {?}
       */
      sort : function(func) {
        return flatten(this, map(this, func));
      },
      /**
       * @return {?}
       */
      values : function() {
        return this.__iterator(pdataOld);
      },
      /**
       * @return {?}
       */
      butLast : function() {
        return this.slice(0, -1);
      },
      /**
       * @return {?}
       */
      isEmpty : function() {
        return void 0 !== this.size ? 0 === this.size : !this.some(function() {
          return true;
        });
      },
      /**
       * @param {Object} fn
       * @param {?} filter
       * @return {?}
       */
      count : function(fn, filter) {
        return objectToString(fn ? this.toSeq().filter(fn, filter) : this);
      },
      /**
       * @param {Function} context
       * @param {?} value
       * @return {?}
       */
      countBy : function(context, value) {
        return wrap(this, context, value);
      },
      /**
       * @param {?} value
       * @return {?}
       */
      equals : function(value) {
        return handler(this, value);
      },
      /**
       * @return {?}
       */
      entrySeq : function() {
        var self = this;
        if (self._cache) {
          return new User(self._cache);
        }
        var fromEntrySeq = self.toSeq().map(iterator).toIndexedSeq();
        return fromEntrySeq.fromEntrySeq = function() {
          return self.toSeq();
        }, fromEntrySeq;
      },
      /**
       * @param {Function} orig
       * @param {?} filter
       * @return {?}
       */
      filterNot : function(orig, filter) {
        return this.filter(URI(orig), filter);
      },
      /**
       * @param {Function} fn
       * @param {?} bind
       * @param {(Array|string)} deepDataAndEvents
       * @return {?}
       */
      findEntry : function(fn, bind, deepDataAndEvents) {
        /** @type {(Array|string)} */
        var name = deepDataAndEvents;
        return this.__iterate(function(Class, key, computed) {
          if (fn.call(bind, Class, key, computed)) {
            return name = [key, Class], false;
          }
        }), name;
      },
      /**
       * @param {Function} key
       * @param {?} bind
       * @return {?}
       */
      findKey : function(key, bind) {
        var entry = this.findEntry(key, bind);
        return entry && entry[0];
      },
      /**
       * @param {?} expr
       * @param {?} attributes
       * @param {?} walkers
       * @return {?}
       */
      findLast : function(expr, attributes, walkers) {
        return this.toKeyedSeq().reverse().find(expr, attributes, walkers);
      },
      /**
       * @param {?} key
       * @param {?} parsed
       * @param {Object} deepDataAndEvents
       * @return {?}
       */
      findLastEntry : function(key, parsed, deepDataAndEvents) {
        return this.toKeyedSeq().reverse().findEntry(key, parsed, deepDataAndEvents);
      },
      /**
       * @param {Function} subKey
       * @param {?} parsed
       * @return {?}
       */
      findLastKey : function(subKey, parsed) {
        return this.toKeyedSeq().reverse().findKey(subKey, parsed);
      },
      /**
       * @return {?}
       */
      first : function() {
        return this.find(value);
      },
      /**
       * @param {Function} next_callback
       * @param {?} walkers
       * @return {?}
       */
      flatMap : function(next_callback, walkers) {
        return flatten(this, sortBy(this, next_callback, walkers));
      },
      /**
       * @param {boolean} deepDataAndEvents
       * @return {?}
       */
      flatten : function(deepDataAndEvents) {
        return flatten(this, isArray(this, deepDataAndEvents, true));
      },
      /**
       * @return {?}
       */
      fromEntrySeq : function() {
        return new cache(this);
      },
      /**
       * @param {?} expectedHashCode
       * @param {string} value
       * @return {?}
       */
      get : function(expectedHashCode, value) {
        return this.find(function(dataAndEvents, basis) {
          return callback(basis, expectedHashCode);
        }, void 0, value);
      },
      /**
       * @param {string} err
       * @param {?} value
       * @return {?}
       */
      getIn : function(err, value) {
        var _ref;
        var data_user = this;
        var e = complete(err);
        for (;!(_ref = e.next()).done;) {
          var expectedHashCode = _ref.value;
          if ((data_user = data_user && data_user.get ? data_user.get(expectedHashCode, camelKey) : camelKey) === camelKey) {
            return value;
          }
        }
        return data_user;
      },
      /**
       * @param {Function} value
       * @param {?} context
       * @return {?}
       */
      groupBy : function(value, context) {
        return group(this, value, context);
      },
      /**
       * @param {?} expectedHashCode
       * @return {?}
       */
      has : function(expectedHashCode) {
        return this.get(expectedHashCode, camelKey) !== camelKey;
      },
      /**
       * @param {string} fmt
       * @return {?}
       */
      hasIn : function(fmt) {
        return this.getIn(fmt, camelKey) !== camelKey;
      },
      /**
       * @param {Object} t
       * @return {?}
       */
      isSubset : function(t) {
        return t = "function" == typeof t.includes ? t : e(t), this.every(function(expectedHashCode) {
          return t.includes(expectedHashCode);
        });
      },
      /**
       * @param {Element} other
       * @return {?}
       */
      isSuperset : function(other) {
        return(other = "function" == typeof other.isSubset ? other : e(other)).isSubset(this);
      },
      /**
       * @param {string} value
       * @return {?}
       */
      keyOf : function(value) {
        return this.findKey(function(basis) {
          return callback(basis, value);
        });
      },
      /**
       * @return {?}
       */
      keySeq : function() {
        return this.toSeq().map(nodes).toIndexedSeq();
      },
      /**
       * @return {?}
       */
      last : function() {
        return this.toSeq().reverse().first();
      },
      /**
       * @param {string} object
       * @return {?}
       */
      lastKeyOf : function(object) {
        return this.toKeyedSeq().reverse().keyOf(object);
      },
      /**
       * @param {number} lab
       * @return {?}
       */
      max : function(lab) {
        return reduce(this, lab);
      },
      /**
       * @param {?} results
       * @param {Function} subKey
       * @return {?}
       */
      maxBy : function(results, subKey) {
        return reduce(this, subKey, results);
      },
      /**
       * @param {number} value
       * @return {?}
       */
      min : function(value) {
        return reduce(this, value ? createCallback(value) : newCoord);
      },
      /**
       * @param {?} results
       * @param {Object} callback
       * @return {?}
       */
      minBy : function(results, callback) {
        return reduce(this, callback ? createCallback(callback) : newCoord, results);
      },
      /**
       * @return {?}
       */
      rest : function() {
        return this.slice(1);
      },
      /**
       * @param {number} opt_attributes
       * @return {?}
       */
      skip : function(opt_attributes) {
        return this.slice(Math.max(0, opt_attributes));
      },
      /**
       * @param {number} attributes
       * @return {?}
       */
      skipLast : function(attributes) {
        return flatten(this, this.toSeq().reverse().skip(attributes).reverse());
      },
      /**
       * @param {Function} ret
       * @param {?} T
       * @return {?}
       */
      skipWhile : function(ret, T) {
        return flatten(this, join(this, ret, T, true));
      },
      /**
       * @param {Function} orig
       * @param {?} T
       * @return {?}
       */
      skipUntil : function(orig, T) {
        return this.skipWhile(URI(orig), T);
      },
      /**
       * @param {Object} fn
       * @param {Function} obj
       * @return {?}
       */
      sortBy : function(fn, obj) {
        return flatten(this, map(this, obj, fn));
      },
      /**
       * @param {?} iter
       * @return {?}
       */
      take : function(iter) {
        return this.slice(0, Math.max(0, iter));
      },
      /**
       * @param {?} array
       * @return {?}
       */
      takeLast : function(array) {
        return flatten(this, this.toSeq().reverse().take(array).reverse());
      },
      /**
       * @param {Function} next_callback
       * @param {?} deepDataAndEvents
       * @return {?}
       */
      takeWhile : function(next_callback, deepDataAndEvents) {
        return flatten(this, swap(this, next_callback, deepDataAndEvents));
      },
      /**
       * @param {Function} orig
       * @param {?} deepDataAndEvents
       * @return {?}
       */
      takeUntil : function(orig, deepDataAndEvents) {
        return this.takeWhile(URI(orig), deepDataAndEvents);
      },
      /**
       * @return {?}
       */
      valueSeq : function() {
        return this.toIndexedSeq();
      },
      /**
       * @return {?}
       */
      hashCode : function() {
        return this.__hash || (this.__hash = upload(this));
      }
    });
    var obj = e.prototype;
    /** @type {boolean} */
    obj[val] = true;
    obj[i] = obj.values;
    obj.__toJS = obj.toArray;
    /** @type {function (?): ?} */
    obj.__toStringMapper = print;
    /** @type {function (): ?} */
    obj.inspect = obj.toSource = function() {
      return this.toString();
    };
    obj.chain = obj.flatMap;
    obj.contains = obj.includes;
    extend(data, {
      /**
       * @return {?}
       */
      flip : function() {
        return flatten(this, Sprite(this));
      },
      /**
       * @param {Function} next_callback
       * @param {?} next_scope
       * @return {?}
       */
      mapEntries : function(next_callback, next_scope) {
        var capture = this;
        /** @type {number} */
        var x = 0;
        return flatten(this, this.toSeq().map(function(alertCallback, res) {
          return next_callback.call(next_scope, [res, alertCallback], x++, capture);
        }).fromEntrySeq());
      },
      /**
       * @param {Function} next_callback
       * @param {?} next_scope
       * @return {?}
       */
      mapKeys : function(next_callback, next_scope) {
        var capture = this;
        return flatten(this, this.toSeq().flip().map(function(mapper, graphics) {
          return next_callback.call(next_scope, mapper, graphics, capture);
        }).flip());
      }
    });
    var ret = data.prototype;
    return ret[index] = true, ret[i] = obj.entries, ret.__toJS = obj.toObject, ret.__toStringMapper = function(until, generatedLine) {
      return JSON.stringify(generatedLine) + ": " + print(until);
    }, extend(m, {
      /**
       * @return {?}
       */
      toKeyedSeq : function() {
        return new s(this, false);
      },
      /**
       * @param {Function} bind
       * @param {?} _
       * @return {?}
       */
      filter : function(bind, _) {
        return flatten(this, factory(this, bind, _, false));
      },
      /**
       * @param {Function} iter
       * @param {?} bind
       * @return {?}
       */
      findIndex : function(iter, bind) {
        var entry = this.findEntry(iter, bind);
        return entry ? entry[0] : -1;
      },
      /**
       * @param {string} str
       * @return {?}
       */
      indexOf : function(str) {
        var value = this.keyOf(str);
        return void 0 === value ? -1 : value;
      },
      /**
       * @param {string} value
       * @return {?}
       */
      lastIndexOf : function(value) {
        var type = this.lastKeyOf(value);
        return void 0 === type ? -1 : type;
      },
      /**
       * @return {?}
       */
      reverse : function() {
        return flatten(this, Transition(this, false));
      },
      /**
       * @param {number} recurring
       * @param {number} expectedNumberOfNonCommentArgs
       * @return {?}
       */
      slice : function(recurring, expectedNumberOfNonCommentArgs) {
        return flatten(this, post(this, recurring, expectedNumberOfNonCommentArgs, false));
      },
      /**
       * @param {number} i
       * @param {number} recurring
       * @return {?}
       */
      splice : function(i, recurring) {
        /** @type {number} */
        var argLength = arguments.length;
        if (recurring = Math.max(0 | recurring, 0), 0 === argLength || 2 === argLength && !recurring) {
          return this;
        }
        i = min(i, i < 0 ? this.count() : this.size);
        var r = this.slice(0, i);
        return flatten(this, 1 === argLength ? r : r.concat(makeArray(arguments, 2), this.slice(i + recurring)));
      },
      /**
       * @param {?} expr
       * @param {?} parsed
       * @return {?}
       */
      findLastIndex : function(expr, parsed) {
        var nodes = this.findLastEntry(expr, parsed);
        return nodes ? nodes[0] : -1;
      },
      /**
       * @return {?}
       */
      first : function() {
        return this.get(0);
      },
      /**
       * @param {boolean} deepDataAndEvents
       * @return {?}
       */
      flatten : function(deepDataAndEvents) {
        return flatten(this, isArray(this, deepDataAndEvents, false));
      },
      /**
       * @param {?} expectedHashCode
       * @param {string} value
       * @return {?}
       */
      get : function(expectedHashCode, value) {
        return(expectedHashCode = assertEquals(this, expectedHashCode)) < 0 || (this.size === 1 / 0 || void 0 !== this.size && expectedHashCode > this.size) ? value : this.find(function(deepDataAndEvents, dataAndEvents) {
          return dataAndEvents === expectedHashCode;
        }, void 0, value);
      },
      /**
       * @param {?} target
       * @return {?}
       */
      has : function(target) {
        return(target = assertEquals(this, target)) >= 0 && (void 0 !== this.size ? this.size === 1 / 0 || target < this.size : -1 !== this.indexOf(target));
      },
      /**
       * @param {?} opt_e
       * @return {?}
       */
      interpose : function(opt_e) {
        return flatten(this, Item(this, opt_e));
      },
      /**
       * @return {?}
       */
      interleave : function() {
        /** @type {Array} */
        var camelKey = [this].concat(makeArray(arguments));
        var array = action(this.toSeq(), add.of, camelKey);
        var memory = array.flatten(true);
        return array.size && (memory.size = array.size * camelKey.length), flatten(this, memory);
      },
      /**
       * @return {?}
       */
      keySeq : function() {
        return item(0, this.size);
      },
      /**
       * @return {?}
       */
      last : function() {
        return this.get(-1);
      },
      /**
       * @param {Function} ret
       * @param {?} T
       * @return {?}
       */
      skipWhile : function(ret, T) {
        return flatten(this, join(this, ret, T, false));
      },
      /**
       * @return {?}
       */
      zip : function() {
        return flatten(this, action(this, restoreScript, [this].concat(makeArray(arguments))));
      },
      /**
       * @param {Function} f
       * @return {?}
       */
      zipWith : function(f) {
        var objs = makeArray(arguments);
        return objs[0] = this, flatten(this, action(this, f, objs));
      }
    }), m.prototype[propName] = true, m.prototype[j] = true, extend(el, {
      /**
       * @param {?} expectedHashCode
       * @param {string} value
       * @return {?}
       */
      get : function(expectedHashCode, value) {
        return this.has(expectedHashCode) ? expectedHashCode : value;
      },
      /**
       * @param {?} expectedHashCode
       * @return {?}
       */
      includes : function(expectedHashCode) {
        return this.has(expectedHashCode);
      },
      /**
       * @return {?}
       */
      keySeq : function() {
        return this.valueSeq();
      }
    }), el.prototype.has = obj.includes, el.prototype.contains = el.prototype.includes, extend(f, data.prototype), extend(add, m.prototype), extend(filter, el.prototype), extend(instance, data.prototype), extend(c, m.prototype), extend(o, el.prototype), {
      /** @type {function (?): ?} */
      Iterable : e,
      /** @type {function (Object): ?} */
      Seq : color,
      /** @type {function (): ?} */
      Collection : clone,
      /** @type {function (?): ?} */
      Map : req,
      /** @type {function (?): ?} */
      OrderedMap : t,
      /** @type {function (?): ?} */
      List : that,
      /** @type {function (number): ?} */
      Stack : info,
      /** @type {function (?): ?} */
      Set : test,
      /** @type {function (?): ?} */
      OrderedSet : param,
      /** @type {function (?, ?): ?} */
      Record : Model,
      /** @type {function (number, number, number): ?} */
      Range : item,
      /** @type {function (number, number): ?} */
      Repeat : res,
      /** @type {function (?, ?): ?} */
      is : callback,
      /** @type {function (string, Function): ?} */
      fromJS : next
    };
  });
}, function(module, dataAndEvents, require) {
  /**
   * @param {string} value
   * @return {undefined}
   */
  function emit(value) {
    /** @type {number} */
    var symbol = arguments.length - 1;
    /** @type {string} */
    var tval = "Minified React error #" + value + "; visit http://facebook.github.io/react/docs/error-decoder.html?invariant=" + value;
    /** @type {number} */
    var i = 0;
    for (;i < symbol;i++) {
      tval += "&args[]=" + encodeURIComponent(arguments[i + 1]);
    }
    throw symbol = Error(tval + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings."), symbol.name = "Invariant Violation", symbol.framesToPop = 1, symbol;
  }
  /**
   * @param {?} props
   * @param {?} value
   * @param {(Object|boolean|number|string)} el
   * @return {undefined}
   */
  function Constructor(props, value, el) {
    this.props = props;
    this.context = value;
    this.refs = nodes;
    this.updater = el || index;
  }
  /**
   * @param {?} props
   * @param {?} name
   * @param {(Object|boolean|number|string)} el
   * @return {undefined}
   */
  function Class(props, name, el) {
    this.props = props;
    this.context = name;
    this.refs = nodes;
    this.updater = el || index;
  }
  /**
   * @return {undefined}
   */
  function Link() {
  }
  /**
   * @param {?} opt_setup
   * @param {?} context
   * @param {(Object|boolean|number|string)} el
   * @return {undefined}
   */
  function init(opt_setup, context, el) {
    this.props = opt_setup;
    this.context = context;
    this.refs = nodes;
    this.updater = el || index;
  }
  /**
   * @param {string} state
   * @param {string} id
   * @param {Function} stream
   * @param {Array} str
   * @param {Array} regex
   * @param {Array} context
   * @param {?} obj
   * @return {?}
   */
  function $(state, id, stream, str, regex, context, obj) {
    return{
      $$typeof : LEVEL_TOP,
      type : state,
      key : id,
      /** @type {Function} */
      ref : stream,
      props : obj,
      _owner : context
    };
  }
  /**
   * @param {string} i
   * @return {?}
   */
  function func(i) {
    var buf = {
      "=" : "=0",
      ":" : "=2"
    };
    return "$" + ("" + i).replace(/[=:]/g, function(off) {
      return buf[off];
    });
  }
  /**
   * @param {Object} r
   * @param {string} event
   * @param {Function} arg
   * @param {?} context
   * @return {?}
   */
  function fn(r, event, arg, context) {
    if (eventPath.length) {
      var self = eventPath.pop();
      return self.result = r, self.keyPrefix = event, self.func = arg, self.context = context, self.count = 0, self;
    }
    return{
      result : r,
      keyPrefix : event,
      /** @type {Function} */
      func : arg,
      context : context,
      count : 0
    };
  }
  /**
   * @param {?} expectedHashCode
   * @return {undefined}
   */
  function f(expectedHashCode) {
    /** @type {null} */
    expectedHashCode.result = null;
    /** @type {null} */
    expectedHashCode.keyPrefix = null;
    /** @type {null} */
    expectedHashCode.func = null;
    /** @type {null} */
    expectedHashCode.context = null;
    /** @type {number} */
    expectedHashCode.count = 0;
    if (10 > eventPath.length) {
      eventPath.push(expectedHashCode);
    }
  }
  /**
   * @param {?} expectedHashCode
   * @param {string} value
   * @param {string} callback
   * @param {Function} xs
   * @return {?}
   */
  function filter(expectedHashCode, value, callback, xs) {
    /** @type {string} */
    var result = typeof expectedHashCode;
    if ("undefined" !== result && "boolean" !== result || (expectedHashCode = null), null === expectedHashCode || ("string" === result || ("number" === result || "object" === result && expectedHashCode.$$typeof === primaryScope))) {
      return callback(xs, expectedHashCode, "" === value ? "." + map(expectedHashCode, 0) : value), 1;
    }
    /** @type {number} */
    var dom = 0;
    if (value = "" === value ? "." : value + ":", Array.isArray(expectedHashCode)) {
      /** @type {number} */
      var type = 0;
      for (;type < expectedHashCode.length;type++) {
        /** @type {string} */
        var i = value + map(result = expectedHashCode[type], type);
        dom += filter(result, i, callback, xs);
      }
    } else {
      if ("function" == typeof(i = unlock && expectedHashCode[unlock] || expectedHashCode["@@iterator"])) {
        expectedHashCode = i.call(expectedHashCode);
        /** @type {number} */
        type = 0;
        for (;!(result = expectedHashCode.next()).done;) {
          result = result.value;
          /** @type {string} */
          i = value + map(result, type++);
          dom += filter(result, i, callback, xs);
        }
      } else {
        if ("object" === result) {
          /** @type {string} */
          callback = "" + expectedHashCode;
          emit("31", "[object Object]" === callback ? "object with keys {" + Object.keys(expectedHashCode).join(", ") + "}" : callback, "");
        }
      }
    }
    return dom;
  }
  /**
   * @param {Object} data
   * @param {(number|string)} fn
   * @return {?}
   */
  function map(data, fn) {
    return "object" == typeof data && (null !== data && null != data.key) ? func(data.key) : fn.toString(36);
  }
  /**
   * @param {Object} settings
   * @param {?} dt
   * @return {undefined}
   */
  function execute(settings, dt) {
    settings.func.call(settings.context, dt, settings.count++);
  }
  /**
   * @param {?} expectedHashCode
   * @param {string} msg
   * @param {string} name
   * @return {undefined}
   */
  function walk(expectedHashCode, msg, name) {
    var member = expectedHashCode.result;
    var prefix = expectedHashCode.keyPrefix;
    expectedHashCode = expectedHashCode.func.call(expectedHashCode.context, msg, expectedHashCode.count++);
    if (Array.isArray(expectedHashCode)) {
      apply(expectedHashCode, member, name, Block.thatReturnsArgument);
    } else {
      if (null != expectedHashCode) {
        if ($.isValidElement(expectedHashCode)) {
          expectedHashCode = $.cloneAndReplaceKey(expectedHashCode, prefix + (!expectedHashCode.key || msg && msg.key === expectedHashCode.key ? "" : ("" + expectedHashCode.key).replace(r20, "$&/") + "/") + name);
        }
        member.push(expectedHashCode);
      }
    }
  }
  /**
   * @param {?} input
   * @param {?} value
   * @param {string} x
   * @param {Function} arg
   * @param {?} name
   * @return {undefined}
   */
  function apply(input, value, x, arg, name) {
    /** @type {string} */
    var key = "";
    if (null != x) {
      /** @type {string} */
      key = ("" + x).replace(r20, "$&/") + "/";
    }
    value = fn(value, key, arg, name);
    if (!(null == input)) {
      filter(input, "", walk, value);
    }
    f(value);
  }
  var getActual = require(17);
  var nodes = require(18);
  require(8);
  var Block = require(6);
  var index = {
    /**
     * @return {?}
     */
    isMounted : function() {
      return false;
    },
    /**
     * @return {undefined}
     */
    enqueueForceUpdate : function() {
    },
    /**
     * @return {undefined}
     */
    enqueueReplaceState : function() {
    },
    /**
     * @return {undefined}
     */
    enqueueSetState : function() {
    }
  };
  Constructor.prototype.isReactComponent = {};
  /**
   * @param {string} opt_attributes
   * @param {?} control
   * @return {undefined}
   */
  Constructor.prototype.setState = function(opt_attributes, control) {
    if ("object" != typeof opt_attributes) {
      if ("function" != typeof opt_attributes) {
        if (null != opt_attributes) {
          emit("85");
        }
      }
    }
    this.updater.enqueueSetState(this, opt_attributes, control, "setState");
  };
  /**
   * @param {?} deepDataAndEvents
   * @return {undefined}
   */
  Constructor.prototype.forceUpdate = function(deepDataAndEvents) {
    this.updater.enqueueForceUpdate(this, deepDataAndEvents, "forceUpdate");
  };
  Link.prototype = Constructor.prototype;
  var obj = Class.prototype = new Link;
  /** @type {function (?, ?, (Object|boolean|number|string)): undefined} */
  obj.constructor = Class;
  getActual(obj, Constructor.prototype);
  /** @type {boolean} */
  obj.isPureReactComponent = true;
  var expectedHashCode = init.prototype = new Link;
  /** @type {function (?, ?, (Object|boolean|number|string)): undefined} */
  expectedHashCode.constructor = init;
  getActual(expectedHashCode, Constructor.prototype);
  /** @type {boolean} */
  expectedHashCode.unstable_isAsyncReactComponent = true;
  /**
   * @return {?}
   */
  expectedHashCode.render = function() {
    return this.props.children;
  };
  var BUI = {
    /** @type {function (?, ?, (Object|boolean|number|string)): undefined} */
    Component : Constructor,
    /** @type {function (?, ?, (Object|boolean|number|string)): undefined} */
    PureComponent : Class,
    /** @type {function (?, ?, (Object|boolean|number|string)): undefined} */
    AsyncComponent : init
  };
  var self = {
    current : null
  };
  /** @type {function (this:Object, *): boolean} */
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var LEVEL_TOP = "function" == typeof Symbol && (Symbol.for && Symbol.for("react.element")) || 60103;
  var params = {
    key : true,
    ref : true,
    __self : true,
    __source : true
  };
  /**
   * @param {?} el
   * @param {Object} obj
   * @param {?} name
   * @return {?}
   */
  $.createElement = function(el, obj, name) {
    var key;
    var o = {};
    /** @type {null} */
    var parent = null;
    /** @type {null} */
    var ref = null;
    /** @type {null} */
    var errStr = null;
    /** @type {null} */
    var r20 = null;
    if (null != obj) {
      for (key in void 0 !== obj.ref && (ref = obj.ref), void 0 !== obj.key && (parent = "" + obj.key), errStr = void 0 === obj.__self ? null : obj.__self, r20 = void 0 === obj.__source ? null : obj.__source, obj) {
        if (hasOwnProperty.call(obj, key)) {
          if (!params.hasOwnProperty(key)) {
            o[key] = obj[key];
          }
        }
      }
    }
    /** @type {number} */
    var c = arguments.length - 2;
    if (1 === c) {
      o.children = name;
    } else {
      if (1 < c) {
        /** @type {Array} */
        var a = Array(c);
        /** @type {number} */
        var i = 0;
        for (;i < c;i++) {
          a[i] = arguments[i + 2];
        }
        /** @type {Array} */
        o.children = a;
      }
    }
    if (el && el.defaultProps) {
      for (key in c = el.defaultProps) {
        if (void 0 === o[key]) {
          o[key] = c[key];
        }
      }
    }
    return $(el, parent, ref, errStr, r20, self.current, o);
  };
  /**
   * @param {?} type
   * @return {?}
   */
  $.createFactory = function(type) {
    var node = $.createElement.bind(null, type);
    return node.type = type, node;
  };
  /**
   * @param {Object} doc
   * @param {string} attr
   * @return {?}
   */
  $.cloneAndReplaceKey = function(doc, attr) {
    return $(doc.type, attr, doc.ref, doc._self, doc._source, doc._owner, doc.props);
  };
  /**
   * @param {Object} p
   * @param {Object} object
   * @param {?} siblings
   * @return {?}
   */
  $.cloneElement = function(p, object, siblings) {
    var actual = getActual({}, p.props);
    var id = p.key;
    var ref = p.ref;
    var tn = p._self;
    var r20 = p._source;
    var current = p._owner;
    if (null != object) {
      if (void 0 !== object.ref && (ref = object.ref, current = self.current), void 0 !== object.key && (id = "" + object.key), p.type && p.type.defaultProps) {
        var args = p.type.defaultProps
      }
      for (index in object) {
        if (hasOwnProperty.call(object, index)) {
          if (!params.hasOwnProperty(index)) {
            actual[index] = void 0 === object[index] && void 0 !== args ? args[index] : object[index];
          }
        }
      }
    }
    /** @type {number} */
    var index = arguments.length - 2;
    if (1 === index) {
      actual.children = siblings;
    } else {
      if (1 < index) {
        /** @type {Array} */
        args = Array(index);
        /** @type {number} */
        var i = 0;
        for (;i < index;i++) {
          args[i] = arguments[i + 2];
        }
        /** @type {Array} */
        actual.children = args;
      }
    }
    return $(p.type, id, ref, tn, r20, current, actual);
  };
  /**
   * @param {Object} o
   * @return {?}
   */
  $.isValidElement = function(o) {
    return "object" == typeof o && (null !== o && o.$$typeof === LEVEL_TOP);
  };
  var unlock = "function" == typeof Symbol && Symbol.iterator;
  var primaryScope = "function" == typeof Symbol && (Symbol.for && Symbol.for("react.element")) || 60103;
  /** @type {RegExp} */
  var r20 = /\/+/g;
  /** @type {Array} */
  var eventPath = [];
  var o = {
    /**
     * @param {Function} elem
     * @param {Function} xs
     * @param {?} arr
     * @return {?}
     */
    forEach : function(elem, xs, arr) {
      if (null == elem) {
        return elem;
      }
      xs = fn(null, null, xs, arr);
      if (!(null == elem)) {
        filter(elem, "", execute, xs);
      }
      f(xs);
    },
    /**
     * @param {Function} array
     * @param {Function} mapper
     * @param {?} n
     * @return {?}
     */
    map : function(array, mapper, n) {
      if (null == array) {
        return array;
      }
      /** @type {Array} */
      var udataCur = [];
      return apply(array, udataCur, null, mapper, n), udataCur;
    },
    /**
     * @param {string} item
     * @return {?}
     */
    count : function(item) {
      return null == item ? 0 : filter(item, "", Block.thatReturnsNull, null);
    },
    /**
     * @param {?} object
     * @return {?}
     */
    toArray : function(object) {
      /** @type {Array} */
      var udataCur = [];
      return apply(object, udataCur, null, Block.thatReturnsArgument), udataCur;
    }
  };
  module.exports = {
    Children : {
      /** @type {function (Function, Function, ?): ?} */
      map : o.map,
      /** @type {function (Function, Function, ?): ?} */
      forEach : o.forEach,
      /** @type {function (string): ?} */
      count : o.count,
      /** @type {function (?): ?} */
      toArray : o.toArray,
      /**
       * @param {?} title
       * @return {?}
       */
      only : function(title) {
        return $.isValidElement(title) || emit("143"), title;
      }
    },
    /** @type {function (?, ?, (Object|boolean|number|string)): undefined} */
    Component : BUI.Component,
    /** @type {function (?, ?, (Object|boolean|number|string)): undefined} */
    PureComponent : BUI.PureComponent,
    /** @type {function (?, ?, (Object|boolean|number|string)): undefined} */
    unstable_AsyncComponent : BUI.AsyncComponent,
    /** @type {function (?, Object, ?): ?} */
    createElement : $.createElement,
    /** @type {function (Object, Object, ?): ?} */
    cloneElement : $.cloneElement,
    /** @type {function (Object): ?} */
    isValidElement : $.isValidElement,
    /** @type {function (?): ?} */
    createFactory : $.createFactory,
    version : "16.0.0",
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED : {
      ReactCurrentOwner : self,
      assign : getActual
    }
  };
}, function(module, dataAndEvents, factory) {
  /**
   * @return {undefined}
   */
  function check() {
    if ("undefined" != typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" == typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE) {
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(check);
      } catch (fmt) {
        console.error(fmt);
      }
    }
  }
  check();
  module.exports = factory(47);
}, function(module, dataAndEvents, require) {
  /**
   * @param {string} all
   * @return {undefined}
   */
  function replace(all) {
    /** @type {number} */
    var symbol = arguments.length - 1;
    /** @type {string} */
    var address = "Minified React error #" + all + "; visit http://facebook.github.io/react/docs/error-decoder.html?invariant=" + all;
    /** @type {number} */
    var i = 0;
    for (;i < symbol;i++) {
      address += "&args[]=" + encodeURIComponent(arguments[i + 1]);
    }
    throw symbol = Error(address + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings."), symbol.name = "Invariant Violation", symbol.framesToPop = 1, symbol;
  }
  /**
   * @param {string} str
   * @return {?}
   */
  function stringifyString(str) {
    switch(str) {
      case "svg":
        return "http://www.w3.org/2000/svg";
      case "math":
        return "http://www.w3.org/1998/Math/MathML";
      default:
        return "http://www.w3.org/1999/xhtml";
    }
  }
  /**
   * @return {undefined}
   */
  function _init() {
    if (parents) {
      var a;
      for (a in attributes) {
        var value = attributes[a];
        var prop = parents.indexOf(a);
        if (-1 < prop || replace("96", a), !_this.plugins[prop]) {
          if (!value.extractEvents) {
            replace("97", a);
          }
          _this.plugins[prop] = value;
          prop = value.eventTypes;
          var p;
          for (p in prop) {
            var phaseName = void 0;
            var dispatchConfig = prop[p];
            var udataCur = value;
            /** @type {string} */
            var from = p;
            if (_this.eventNameDispatchConfigs.hasOwnProperty(from)) {
              replace("99", from);
            }
            _this.eventNameDispatchConfigs[from] = dispatchConfig;
            var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
            if (phasedRegistrationNames) {
              for (phaseName in phasedRegistrationNames) {
                if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                  save(phasedRegistrationNames[phaseName], udataCur, from);
                }
              }
              /** @type {boolean} */
              phaseName = true;
            } else {
              if (dispatchConfig.registrationName) {
                save(dispatchConfig.registrationName, udataCur, from);
                /** @type {boolean} */
                phaseName = true;
              } else {
                /** @type {boolean} */
                phaseName = false;
              }
            }
            if (!phaseName) {
              replace("98", p, a);
            }
          }
        }
      }
    }
  }
  /**
   * @param {?} index
   * @param {?} value
   * @param {string} name
   * @return {undefined}
   */
  function save(index, value, name) {
    if (_this.registrationNameModules[index]) {
      replace("100", index);
    }
    _this.registrationNameModules[index] = value;
    _this.registrationNameDependencies[index] = value.eventTypes[name].dependencies;
  }
  /**
   * @param {number} keepData
   * @param {number} dataAndEvents
   * @return {?}
   */
  function clone(keepData, dataAndEvents) {
    return(keepData & dataAndEvents) === dataAndEvents;
  }
  /**
   * @param {Node} item
   * @return {?}
   */
  function text(item) {
    var result;
    for (;result = item._renderedComponent;) {
      item = result;
    }
    return item;
  }
  /**
   * @param {(RegExp|string)} value
   * @param {Object} target
   * @return {undefined}
   */
  function contains(value, target) {
    /** @type {Object} */
    (value = text(value))._hostNode = target;
    /** @type {(RegExp|string)} */
    target[i] = value;
  }
  /**
   * @param {?} b
   * @param {Object} target
   * @return {undefined}
   */
  function walk(b, target) {
    if (!(b._flags & b2Body.hasCachedChildNodes)) {
      var af = b._renderedChildren;
      target = target.firstChild;
      var i;
      t: for (i in af) {
        if (af.hasOwnProperty(i)) {
          var elm = af[i];
          var initial = text(elm)._domID;
          if (0 !== initial) {
            for (;null !== target;target = target.nextSibling) {
              /** @type {Object} */
              var elem = target;
              var res = initial;
              if (elem.nodeType === select_one && elem.getAttribute(canvas) === "" + res || (elem.nodeType === cur && elem.nodeValue === " react-text: " + res + " " || elem.nodeType === cur && elem.nodeValue === " react-empty: " + res + " ")) {
                contains(elm, target);
                continue t;
              }
            }
            replace("32", initial);
          }
        }
      }
      b._flags |= b2Body.hasCachedChildNodes;
    }
  }
  /**
   * @param {?} expectedHashCode
   * @return {?}
   */
  function pop(expectedHashCode) {
    if (expectedHashCode[i]) {
      return expectedHashCode[i];
    }
    /** @type {Array} */
    var eventPath = [];
    for (;!expectedHashCode[i];) {
      if (eventPath.push(expectedHashCode), !expectedHashCode.parentNode) {
        return null;
      }
      expectedHashCode = expectedHashCode.parentNode;
    }
    var node = expectedHashCode[i];
    if (node.tag === li || node.tag === src) {
      return node;
    }
    for (;expectedHashCode && (node = expectedHashCode[i]);expectedHashCode = eventPath.pop()) {
      var prev = node;
      if (eventPath.length) {
        walk(node, expectedHashCode);
      }
    }
    return prev;
  }
  /**
   * @param {Object} object
   * @return {?}
   */
  function getType(object) {
    if ("function" == typeof object.getName) {
      return object.getName();
    }
    if ("number" == typeof object.tag) {
      if ("string" == typeof(object = object.type)) {
        return object;
      }
      if ("function" == typeof object) {
        return object.displayName || object.name;
      }
    }
    return null;
  }
  /**
   * @param {?} object
   * @return {?}
   */
  function toString(object) {
    var tree = object;
    if (object.alternate) {
      for (;tree.return;) {
        tree = tree.return;
      }
    } else {
      if ((tree.effectTag & AJAX) !== NoEffect) {
        return 1;
      }
      for (;tree.return;) {
        if (((tree = tree.return).effectTag & AJAX) !== NoEffect) {
          return 1;
        }
      }
    }
    return tree.tag === inner ? 2 : 3;
  }
  /**
   * @param {?} str
   * @return {undefined}
   */
  function interpolate(str) {
    if (2 !== toString(str)) {
      replace("188");
    }
  }
  /**
   * @param {Object} str
   * @return {?}
   */
  function trimWhitespace(str) {
    var j = str.alternate;
    if (!j) {
      return 3 === (j = toString(str)) && replace("188"), 1 === j ? null : str;
    }
    /** @type {Object} */
    var o = str;
    var y = j;
    for (;;) {
      var a = o.return;
      var b = a ? a.alternate : null;
      if (!a || !b) {
        break;
      }
      if (a.child === b.child) {
        var t = a.child;
        for (;t;) {
          if (t === o) {
            return interpolate(a), str;
          }
          if (t === y) {
            return interpolate(a), j;
          }
          t = t.sibling;
        }
        replace("188");
      }
      if (o.return !== y.return) {
        o = a;
        y = b;
      } else {
        /** @type {boolean} */
        t = false;
        var x = a.child;
        for (;x;) {
          if (x === o) {
            /** @type {boolean} */
            t = true;
            o = a;
            y = b;
            break;
          }
          if (x === y) {
            /** @type {boolean} */
            t = true;
            y = a;
            o = b;
            break;
          }
          x = x.sibling;
        }
        if (!t) {
          x = b.child;
          for (;x;) {
            if (x === o) {
              /** @type {boolean} */
              t = true;
              o = b;
              y = a;
              break;
            }
            if (x === y) {
              /** @type {boolean} */
              t = true;
              y = b;
              o = a;
              break;
            }
            x = x.sibling;
          }
          if (!t) {
            replace("189");
          }
        }
      }
      if (o.alternate !== y) {
        replace("190");
      }
    }
    return o.tag !== inner && replace("188"), o.stateNode.current === o ? str : j;
  }
  /**
   * @param {?} bytesRead
   * @param {Function} fn
   * @param {?} obj
   * @param {?} written
   * @param {?} evt
   * @param {?} send_command
   * @param {?} sender
   * @param {?} funcName
   * @param {?} path
   * @return {undefined}
   */
  function wrapper(bytesRead, fn, obj, written, evt, send_command, sender, funcName, path) {
    /** @type {boolean} */
    newArgs._hasCaughtError = false;
    /** @type {null} */
    newArgs._caughtError = null;
    /** @type {Array.<?>} */
    var args = Array.prototype.slice.call(arguments, 3);
    try {
      fn.apply(obj, args);
    } catch (handleXhr) {
      newArgs._caughtError = handleXhr;
      /** @type {boolean} */
      newArgs._hasCaughtError = true;
    }
  }
  /**
   * @return {undefined}
   */
  function matcherFunction() {
    if (newArgs._hasRethrowError) {
      /** @type {null} */
      var j = newArgs._rethrowError;
      throw newArgs._rethrowError = null, newArgs._hasRethrowError = false, j;
    }
  }
  /**
   * @param {Object} ev
   * @param {(Function|string)} selector
   * @param {?} triggerRoute
   * @param {string} i
   * @return {undefined}
   */
  function getTarget(ev, selector, triggerRoute, i) {
    selector = ev.type || "unknown-event";
    ev.currentTarget = counter.getNodeFromInstance(i);
    rquickExpr.invokeGuardedCallbackAndCatchFirstError(selector, triggerRoute, void 0, ev);
    /** @type {null} */
    ev.currentTarget = null;
  }
  /**
   * @param {Object} node
   * @return {undefined}
   */
  function process(node) {
    if (node = common.getInstanceFromNode(node)) {
      if ("number" == typeof node.tag) {
        if (!(Assert && "function" == typeof Assert.restoreControlledState)) {
          replace("194");
        }
        var oldconfig = common.getFiberCurrentPropsFromNode(node.stateNode);
        Assert.restoreControlledState(node.stateNode, node.type, oldconfig);
      } else {
        if ("function" != typeof node.restoreControlledState) {
          replace("195");
        }
        node.restoreControlledState();
      }
    }
  }
  /**
   * @param {Function} callback
   * @param {Function} value
   * @param {?} conn
   * @param {?} collection
   * @param {?} array
   * @param {?} keepData
   * @return {?}
   */
  function remove(callback, value, conn, collection, array, keepData) {
    return callback(value, conn, collection, array, keepData);
  }
  /**
   * @param {?} values
   * @param {?} obj
   * @return {?}
   */
  function toArray(values, obj) {
    return values(obj);
  }
  /**
   * @param {?} messages
   * @param {?} walkers
   * @return {?}
   */
  function restoreScript(messages, walkers) {
    return toArray(messages, walkers);
  }
  /**
   * @param {Object} target
   * @return {?}
   */
  function find(target) {
    return(target = target.target || (target.srcElement || window)).correspondingUseElement && (target = target.correspondingUseElement), target.nodeType === type ? target.parentNode : target;
  }
  /**
   * @param {?} event
   * @return {undefined}
   */
  function stop(event) {
    var expectedHashCode = event.targetInst;
    do {
      if (!expectedHashCode) {
        event.ancestors.push(expectedHashCode);
        break;
      }
      var i = expectedHashCode;
      if ("number" == typeof i.tag) {
        for (;i.return;) {
          i = i.return;
        }
        i = i.tag !== _in ? null : i.stateNode.containerInfo;
      } else {
        for (;i._hostParent;) {
          i = i._hostParent;
        }
        i = reserved.getNodeFromInstance(i).parentNode;
      }
      if (!i) {
        break;
      }
      event.ancestors.push(expectedHashCode);
      expectedHashCode = reserved.getClosestInstanceFromNode(i);
    } while (expectedHashCode);
    /** @type {number} */
    i = 0;
    for (;i < event.ancestors.length;i++) {
      expectedHashCode = event.ancestors[i];
      that._handleTopLevel(event.topLevelType, expectedHashCode, event.nativeEvent, find(event.nativeEvent));
    }
  }
  /**
   * @param {?} expectedHashCode
   * @param {?} data
   * @return {?}
   */
  function push(expectedHashCode, data) {
    return null == data && replace("30"), null == expectedHashCode ? data : Array.isArray(expectedHashCode) ? Array.isArray(data) ? (expectedHashCode.push.apply(expectedHashCode, data), expectedHashCode) : (expectedHashCode.push(data), expectedHashCode) : Array.isArray(data) ? [expectedHashCode].concat(data) : [expectedHashCode, data];
  }
  /**
   * @param {?} expectedHashCode
   * @param {Function} body
   * @param {?} key
   * @return {undefined}
   */
  function read(expectedHashCode, body, key) {
    if (Array.isArray(expectedHashCode)) {
      expectedHashCode.forEach(body, key);
    } else {
      if (expectedHashCode) {
        body.call(key, expectedHashCode);
      }
    }
  }
  /**
   * @param {Object} event
   * @param {boolean} val
   * @return {undefined}
   */
  function next(event, val) {
    if (event) {
      common.executeDispatchesInOrder(event, val);
      if (!event.isPersistent()) {
        event.constructor.release(event);
      }
    }
  }
  /**
   * @param {Object} e
   * @return {?}
   */
  function helper(e) {
    return next(e, true);
  }
  /**
   * @param {Object} e
   * @return {?}
   */
  function update(e) {
    return next(e, false);
  }
  /**
   * @param {string} keepData
   * @param {string} yes
   * @param {Object} target
   * @return {?}
   */
  function needsFocus(keepData, yes, target) {
    switch(keepData) {
      case "onClick":
      ;
      case "onClickCapture":
      ;
      case "onDoubleClick":
      ;
      case "onDoubleClickCapture":
      ;
      case "onMouseDown":
      ;
      case "onMouseDownCapture":
      ;
      case "onMouseMove":
      ;
      case "onMouseMoveCapture":
      ;
      case "onMouseUp":
      ;
      case "onMouseUpCapture":
        return!(!target.disabled || "button" !== yes && ("input" !== yes && ("select" !== yes && "textarea" !== yes)));
      default:
        return false;
    }
  }
  /**
   * @param {string} eventName
   * @param {boolean} name
   * @return {?}
   */
  function load(eventName, name) {
    if (!Block.canUseDOM || name && !("addEventListener" in document)) {
      return false;
    }
    /** @type {boolean} */
    var pass = (name = "on" + eventName) in document;
    return pass || ((pass = document.createElement("div")).setAttribute(name, "return;"), pass = "function" == typeof pass[name]), !pass && (exec && ("wheel" === eventName && (pass = document.implementation.hasFeature("Events.wheel", "3.0")))), pass;
  }
  /**
   * @param {string} cssName
   * @param {string} eventName
   * @return {?}
   */
  function prefix(cssName, eventName) {
    var symToByte = {};
    return symToByte[cssName.toLowerCase()] = eventName.toLowerCase(), symToByte["Webkit" + cssName] = "webkit" + eventName, symToByte["Moz" + cssName] = "moz" + eventName, symToByte["ms" + cssName] = "MS" + eventName, symToByte["O" + cssName] = "o" + eventName.toLowerCase(), symToByte;
  }
  /**
   * @param {string} name
   * @return {?}
   */
  function normalize(name) {
    if (copy[name]) {
      return copy[name];
    }
    if (!base[name]) {
      return name;
    }
    var key;
    var original = base[name];
    for (key in original) {
      if (original.hasOwnProperty(key) && key in css) {
        return copy[name] = original[key];
      }
    }
    return "";
  }
  /**
   * @param {Object} obj
   * @return {?}
   */
  function hasOwn(obj) {
    return Object.prototype.hasOwnProperty.call(obj, prop) || (obj[prop] = uid++, lookup[obj[prop]] = {}), lookup[obj[prop]];
  }
  /**
   * @param {string} key
   * @return {?}
   */
  function date(key) {
    return!!dst.hasOwnProperty(key) || !locValueDict.hasOwnProperty(key) && (names.test(key) ? dst[key] = true : (locValueDict[key] = true, false));
  }
  /**
   * @return {?}
   */
  function tryIt() {
    return null;
  }
  /**
   * @param {Function} classNames
   * @return {?}
   */
  function list(classNames) {
    /** @type {string} */
    var t = "";
    return dom.Children.forEach(classNames, function(v) {
      if (!(null == v)) {
        if (!("string" != typeof v && "number" != typeof v)) {
          t += v;
        }
      }
    }), t;
  }
  /**
   * @param {Object} options
   * @param {Object} option
   * @param {?} index
   * @return {?}
   */
  function build(options, option, index) {
    if (options = options.options, option) {
      option = {};
      /** @type {number} */
      var i = 0;
      for (;i < index.length;i++) {
        /** @type {boolean} */
        option["$" + index[i]] = true;
      }
      /** @type {number} */
      index = 0;
      for (;index < options.length;index++) {
        /** @type {boolean} */
        i = option.hasOwnProperty("$" + options[index].value);
        if (options[index].selected !== i) {
          /** @type {boolean} */
          options[index].selected = i;
        }
      }
    } else {
      /** @type {string} */
      index = "" + index;
      /** @type {null} */
      option = null;
      /** @type {number} */
      i = 0;
      for (;i < options.length;i++) {
        if (options[i].value === index) {
          return void(options[i].selected = true);
        }
        if (!(null !== option)) {
          if (!options[i].disabled) {
            option = options[i];
          }
        }
      }
      if (null !== option) {
        /** @type {boolean} */
        option.selected = true;
      }
    }
  }
  /**
   * @param {?} key
   * @param {Object} o
   * @return {undefined}
   */
  function getStyle(key, o) {
    if (o) {
      if (cont[key]) {
        if (null != o.children || null != o.dangerouslySetInnerHTML) {
          replace("137", key, "");
        }
      }
      if (null != o.dangerouslySetInnerHTML) {
        if (null != o.children) {
          replace("60");
        }
        if (!("object" == typeof o.dangerouslySetInnerHTML && "__html" in o.dangerouslySetInnerHTML)) {
          replace("61");
        }
      }
      if (null != o.style) {
        if ("object" != typeof o.style) {
          replace("62", "");
        }
      }
    }
  }
  /**
   * @param {string} n
   * @return {?}
   */
  function browserTrigger(n) {
    var type = n.type;
    return(n = n.nodeName) && ("input" === n.toLowerCase() && ("checkbox" === type || "radio" === type));
  }
  /**
   * @param {Object} node
   * @return {?}
   */
  function bind(node) {
    /** @type {string} */
    var prop = browserTrigger(node) ? "checked" : "value";
    /** @type {(ObjectPropertyDescriptor|undefined)} */
    var desc = Object.getOwnPropertyDescriptor(node.constructor.prototype, prop);
    var value = "" + node[prop];
    if (!node.hasOwnProperty(prop) && ("function" == typeof desc.get && "function" == typeof desc.set)) {
      return Object.defineProperty(node, prop, {
        enumerable : desc.enumerable,
        configurable : true,
        /**
         * @return {?}
         */
        get : function() {
          return desc.get.call(this);
        },
        /**
         * @param {?} keepData
         * @return {undefined}
         */
        set : function(keepData) {
          /** @type {string} */
          value = "" + keepData;
          desc.set.call(this, keepData);
        }
      }), {
        /**
         * @return {?}
         */
        getValue : function() {
          return value;
        },
        /**
         * @param {string} s
         * @return {undefined}
         */
        setValue : function(s) {
          /** @type {string} */
          value = "" + s;
        },
        /**
         * @return {undefined}
         */
        stopTracking : function() {
          /** @type {null} */
          node._valueTracker = null;
          delete node[prop];
        }
      };
    }
  }
  /**
   * @param {string} type
   * @param {?} o
   * @return {?}
   */
  function compile(type, o) {
    if (-1 === type.indexOf("-")) {
      return "string" == typeof o.is;
    }
    switch(type) {
      case "annotation-xml":
      ;
      case "color-profile":
      ;
      case "font-face":
      ;
      case "font-face-src":
      ;
      case "font-face-uri":
      ;
      case "font-face-format":
      ;
      case "font-face-name":
      ;
      case "missing-glyph":
        return false;
      default:
        return true;
    }
  }
  /**
   * @param {Element} node
   * @param {?} value
   * @return {?}
   */
  function parse(node, value) {
    if (value) {
      var child = node.firstChild;
      if (child && (child === node.lastChild && child.nodeType === id)) {
        return void(child.nodeValue = value);
      }
    }
    node.textContent = value;
  }
  /**
   * @param {Object} el
   * @param {string} elem
   * @return {undefined}
   */
  function isXML(el, elem) {
    sibling(elem, el.nodeType === CSS1Compat || el.nodeType === parent ? el : el.ownerDocument);
  }
  /**
   * @param {number} a
   * @param {number} b
   * @return {?}
   */
  function extend(a, b) {
    return a !== firefox && a !== safari || b !== firefox && b !== safari ? a === undef && b !== undef ? -255 : a !== undef && b === undef ? 255 : a - b : 0;
  }
  /**
   * @return {?}
   */
  function getValue() {
    return{
      first : null,
      last : null,
      hasForceUpdate : false,
      callbackList : null
    };
  }
  /**
   * @param {Object} el
   * @param {Object} sub
   * @param {Object} item
   * @param {Object} node
   * @return {undefined}
   */
  function append(el, sub, item, node) {
    if (null !== item) {
      /** @type {Object} */
      item.next = sub;
    } else {
      sub.next = el.first;
      /** @type {Object} */
      el.first = sub;
    }
    if (null !== node) {
      /** @type {Object} */
      sub.next = node;
    } else {
      /** @type {Object} */
      el.last = sub;
    }
  }
  /**
   * @param {Object} entity
   * @param {Object} settings
   * @return {?}
   */
  function add(entity, settings) {
    settings = settings.priorityLevel;
    /** @type {null} */
    var added = null;
    if (null !== entity.last && 0 >= extend(entity.last.priorityLevel, settings)) {
      added = entity.last;
    } else {
      entity = entity.first;
      for (;null !== entity && 0 >= extend(entity.priorityLevel, settings);) {
        /** @type {Object} */
        added = entity;
        entity = entity.next;
      }
    }
    return added;
  }
  /**
   * @param {Object} params
   * @param {Object} options
   * @return {?}
   */
  function callback(params, options) {
    var element = params.alternate;
    var el = params.updateQueue;
    if (null === el) {
      el = params.updateQueue = getValue();
    }
    if (null !== element) {
      if (null === (params = element.updateQueue)) {
        params = element.updateQueue = getValue();
      }
    } else {
      /** @type {null} */
      params = null;
    }
    var parent = fragment = el;
    element = o = params !== el ? params : null;
    var node = add(parent, options);
    var followingChild = null !== node ? node.next : parent.first;
    return null === element ? (append(parent, options, node, followingChild), null) : (el = add(element, options), params = null !== el ? el.next : element.first, append(parent, options, node, followingChild), followingChild === params && null !== followingChild || node === el && null !== node ? (null === el && (element.first = options), null === params && (element.last = null), null) : (options = {
      priorityLevel : options.priorityLevel,
      partialState : options.partialState,
      callback : options.callback,
      isReplace : options.isReplace,
      isForced : options.isForced,
      isTopLevelUnmount : options.isTopLevelUnmount,
      next : null
    }, append(element, options, el, params), options));
  }
  /**
   * @param {(Function|string)} callback
   * @param {?} req
   * @param {(Node|string)} value
   * @param {?} val
   * @return {?}
   */
  function setter(callback, req, value, val) {
    return "function" == typeof(callback = callback.partialState) ? callback.call(req, value, val) : callback;
  }
  /**
   * @param {(Function|string)} dataAndEvents
   * @param {?} actual
   * @param {?} obj
   * @return {undefined}
   */
  function expect(dataAndEvents, actual, obj) {
    (dataAndEvents = dataAndEvents.stateNode).__reactInternalMemoizedUnmaskedChildContext = actual;
    dataAndEvents.__reactInternalMemoizedMaskedChildContext = obj;
  }
  /**
   * @param {Object} node
   * @return {?}
   */
  function isBinary(node) {
    return node.tag === context && null != node.type.childContextTypes;
  }
  /**
   * @param {Object} node
   * @param {?} key
   * @return {?}
   */
  function loop(node, key) {
    var index = node.stateNode;
    var arr2 = node.type.childContextTypes;
    if ("function" != typeof index.getChildContext) {
      return key;
    }
    index = index.getChildContext();
    var i;
    for (i in index) {
      if (!(i in arr2)) {
        replace("108", getType(node) || "Unknown", i);
      }
    }
    return fn({}, key, index);
  }
  /**
   * @param {number} tag
   * @param {?} value
   * @param {?} index
   * @return {undefined}
   */
  function Element(tag, value, index) {
    /** @type {number} */
    this.tag = tag;
    this.key = value;
    /** @type {null} */
    this.stateNode = this.type = null;
    /** @type {null} */
    this.sibling = this.child = this.return = null;
    /** @type {number} */
    this.index = 0;
    /** @type {null} */
    this.memoizedState = this.updateQueue = this.memoizedProps = this.pendingProps = this.ref = null;
    this.internalContextTag = index;
    /** @type {number} */
    this.effectTag = POST;
    /** @type {null} */
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    /** @type {number} */
    this.pendingWorkPriority = cl;
    /** @type {null} */
    this.alternate = null;
  }
  /**
   * @param {Object} arg
   * @param {number} name
   * @param {string} dataAndEvents
   * @return {?}
   */
  function start(arg, name, dataAndEvents) {
    var node = void 0;
    return "function" == typeof arg ? (node = arg.prototype && arg.prototype.isReactComponent ? new Element(worldTransform, name, dataAndEvents) : new Element(itemLen, name, dataAndEvents), node.type = arg) : "string" == typeof arg ? (node = new Element(nodeName, name, dataAndEvents), node.type = arg) : "object" == typeof arg && (null !== arg && "number" == typeof arg.tag) ? node = arg : replace("130", null == arg ? arg : typeof arg, ""), node;
  }
  /**
   * @param {?} cur
   * @return {?}
   */
  function attr(cur) {
    return null === cur || void 0 === cur ? null : "function" == typeof(cur = ontype && cur[ontype] || cur["@@iterator"]) ? cur : null;
  }
  /**
   * @param {Object} b
   * @param {Object} item
   * @return {?}
   */
  function handler(b, item) {
    var route = item.ref;
    if (null !== route && "function" != typeof route) {
      if (item._owner) {
        var response = void 0;
        if (item = item._owner) {
          if ("number" == typeof item.tag) {
            if (item.tag !== message) {
              replace("110");
            }
            response = item.stateNode;
          } else {
            response = item.getPublicInstance();
          }
        }
        if (!response) {
          replace("147", route);
        }
        /** @type {string} */
        var a = "" + route;
        return null !== b && (null !== b.ref && b.ref._stringRef === a) ? b.ref : (b = function(d) {
          var source = response.refs === index ? response.refs = {} : response.refs;
          if (null === d) {
            delete source[a];
          } else {
            /** @type {number} */
            source[a] = d;
          }
        }, b._stringRef = a, b);
      }
      if ("string" != typeof route) {
        replace("148");
      }
      if (!item._owner) {
        replace("149", route);
      }
    }
    return route;
  }
  /**
   * @param {?} property
   * @param {?} a
   * @return {undefined}
   */
  function resolve(property, a) {
    if ("textarea" !== property.type) {
      replace("31", "[object Object]" === Object.prototype.toString.call(a) ? "object with keys {" + Object.keys(a).join(", ") + "}" : a, "");
    }
  }
  /**
   * @param {boolean} recurring
   * @param {boolean} v33
   * @return {?}
   */
  function onSuccess(recurring, v33) {
    /**
     * @param {?} arg
     * @param {Object} node
     * @return {undefined}
     */
    function fn(arg, node) {
      if (v33) {
        if (!recurring) {
          if (null === node.alternate) {
            return;
          }
          node = node.alternate;
        }
        var current = arg.lastEffect;
        if (null !== current) {
          /** @type {Object} */
          current.nextEffect = node;
          /** @type {Object} */
          arg.lastEffect = node;
        } else {
          arg.firstEffect = arg.lastEffect = node;
        }
        /** @type {null} */
        node.nextEffect = null;
        /** @type {number} */
        node.effectTag = firstLine;
      }
    }
    /**
     * @param {?} label
     * @param {Object} key
     * @return {?}
     */
    function callback(label, key) {
      if (!v33) {
        return null;
      }
      for (;null !== key;) {
        fn(label, key);
        key = key.sibling;
      }
      return null;
    }
    /**
     * @param {(Node|string)} res
     * @param {Object} header
     * @return {?}
     */
    function set(res, header) {
      res = new Map;
      for (;null !== header;) {
        if (null !== header.key) {
          res.set(header.key, header);
        } else {
          res.set(header.index, header);
        }
        header = header.sibling;
      }
      return res;
    }
    /**
     * @param {Object} value
     * @param {Function} s
     * @return {?}
     */
    function $(value, s) {
      return recurring ? (value = valueOf(value, s), value.index = 0, value.sibling = null, value) : (value.pendingWorkPriority = s, value.effectTag = internalThen, value.index = 0, value.sibling = null, value);
    }
    /**
     * @param {Object} o
     * @param {?} elt
     * @param {Object} i
     * @return {?}
     */
    function indexOf(o, elt, i) {
      return o.index = i, v33 ? null !== (i = o.alternate) ? (i = i.index) < elt ? (o.effectTag = lvl, elt) : i : (o.effectTag = lvl, elt) : elt;
    }
    /**
     * @param {Object} o
     * @return {?}
     */
    function values(o) {
      return v33 && (null === o.alternate && (o.effectTag = lvl)), o;
    }
    /**
     * @param {?} source
     * @param {Object} element
     * @param {(Object|string)} value
     * @param {Function} obj
     * @return {?}
     */
    function get(source, element, value, obj) {
      return null === element || element.tag !== checkbox ? (value = call(value, source.internalContextTag, obj), value.return = source, value) : (element = $(element, obj), element.pendingProps = value, element.return = source, element);
    }
    /**
     * @param {?} v
     * @param {Object} options
     * @param {?} args
     * @param {Object} data
     * @return {?}
     */
    function render(v, options, args, data) {
      return null === options || options.type !== args.type ? (data = dataAttr(args, v.internalContextTag, data), data.ref = handler(options, args), data.return = v, data) : (data = $(options, data), data.ref = handler(options, args), data.pendingProps = args.props, data.return = v, data);
    }
    /**
     * @param {?} item
     * @param {Object} options
     * @param {?} id
     * @param {Function} obj
     * @return {?}
     */
    function toString(item, options, id, obj) {
      return null === options || options.tag !== value ? (id = indexOf(id, item.internalContextTag, obj), id.return = item, id) : (options = $(options, obj), options.pendingProps = id, options.return = item, options);
    }
    /**
     * @param {?} source
     * @param {Object} b
     * @param {?} a
     * @param {Function} d
     * @return {?}
     */
    function extend(source, b, a, d) {
      return null === b || b.tag !== binary ? (b = trigger(a, source.internalContextTag, d), b.type = a.value, b.return = source, b) : (b = $(b, d), b.type = a.value, b.return = source, b);
    }
    /**
     * @param {?} target
     * @param {Object} dom
     * @param {?} object
     * @param {Function} selector
     * @return {?}
     */
    function clone(target, dom, object, selector) {
      return null === dom || (dom.tag !== BODY || (dom.stateNode.containerInfo !== object.containerInfo || dom.stateNode.implementation !== object.implementation)) ? (object = keys(object, target.internalContextTag, selector), object.return = target, object) : (dom = $(dom, selector), dom.pendingProps = object.children || [], dom.return = target, dom);
    }
    /**
     * @param {?} data
     * @param {Object} s
     * @param {?} c
     * @param {Function} a
     * @return {?}
     */
    function parse(data, s, c, a) {
      return null === s || s.tag !== contentType ? (c = cb(c, data.internalContextTag, a), c.return = data, c) : (s = $(s, a), s.pendingProps = c, s.return = data, s);
    }
    /**
     * @param {?} index
     * @param {?} expectedHashCode
     * @param {Object} data
     * @return {?}
     */
    function process(index, expectedHashCode, data) {
      if ("string" == typeof expectedHashCode || "number" == typeof expectedHashCode) {
        return expectedHashCode = call("" + expectedHashCode, index.internalContextTag, data), expectedHashCode.return = index, expectedHashCode;
      }
      if ("object" == typeof expectedHashCode && null !== expectedHashCode) {
        switch(expectedHashCode.$$typeof) {
          case Bi:
            return data = dataAttr(expectedHashCode, index.internalContextTag, data), data.ref = handler(null, expectedHashCode), data.return = index, data;
          case tn:
            return expectedHashCode = indexOf(expectedHashCode, index.internalContextTag, data), expectedHashCode.return = index, expectedHashCode;
          case pl:
            return data = trigger(expectedHashCode, index.internalContextTag, data), data.type = expectedHashCode.value, data.return = index, data;
          case head:
            return expectedHashCode = keys(expectedHashCode, index.internalContextTag, data), expectedHashCode.return = index, expectedHashCode;
        }
        if (isArray(expectedHashCode) || attr(expectedHashCode)) {
          return expectedHashCode = cb(expectedHashCode, index.internalContextTag, data), expectedHashCode.return = index, expectedHashCode;
        }
        resolve(index, expectedHashCode);
      }
      return null;
    }
    /**
     * @param {?} value
     * @param {Object} options
     * @param {?} expectedHashCode
     * @param {Function} val
     * @return {?}
     */
    function success(value, options, expectedHashCode, val) {
      var key = null !== options ? options.key : null;
      if ("string" == typeof expectedHashCode || "number" == typeof expectedHashCode) {
        return null !== key ? null : get(value, options, "" + expectedHashCode, val);
      }
      if ("object" == typeof expectedHashCode && null !== expectedHashCode) {
        switch(expectedHashCode.$$typeof) {
          case Bi:
            return expectedHashCode.key === key ? render(value, options, expectedHashCode, val) : null;
          case tn:
            return expectedHashCode.key === key ? toString(value, options, expectedHashCode, val) : null;
          case pl:
            return null === key ? extend(value, options, expectedHashCode, val) : null;
          case head:
            return expectedHashCode.key === key ? clone(value, options, expectedHashCode, val) : null;
        }
        if (isArray(expectedHashCode) || attr(expectedHashCode)) {
          return null !== key ? null : parse(value, options, expectedHashCode, val);
        }
        resolve(value, expectedHashCode);
      }
      return null;
    }
    /**
     * @param {(Object|string)} options
     * @param {?} value
     * @param {?} i
     * @param {?} expectedHashCode
     * @param {Function} val
     * @return {?}
     */
    function filter(options, value, i, expectedHashCode, val) {
      if ("string" == typeof expectedHashCode || "number" == typeof expectedHashCode) {
        return options = options.get(i) || null, get(value, options, "" + expectedHashCode, val);
      }
      if ("object" == typeof expectedHashCode && null !== expectedHashCode) {
        switch(expectedHashCode.$$typeof) {
          case Bi:
            return options = options.get(null === expectedHashCode.key ? i : expectedHashCode.key) || null, render(value, options, expectedHashCode, val);
          case tn:
            return options = options.get(null === expectedHashCode.key ? i : expectedHashCode.key) || null, toString(value, options, expectedHashCode, val);
          case pl:
            return options = options.get(i) || null, extend(value, options, expectedHashCode, val);
          case head:
            return options = options.get(null === expectedHashCode.key ? i : expectedHashCode.key) || null, clone(value, options, expectedHashCode, val);
        }
        if (isArray(expectedHashCode) || attr(expectedHashCode)) {
          return options = options.get(i) || null, parse(value, options, expectedHashCode, val);
        }
        resolve(value, expectedHashCode);
      }
      return null;
    }
    /**
     * @param {?} value
     * @param {Object} n
     * @param {Object} a
     * @param {Function} x
     * @return {?}
     */
    function remove(value, n, a, x) {
      /** @type {null} */
      var result = null;
      /** @type {null} */
      var obj = null;
      /** @type {Object} */
      var key = n;
      /** @type {number} */
      var i = n = 0;
      /** @type {null} */
      var val = null;
      for (;null !== key && i < a.length;i++) {
        if (key.index > i) {
          val = key;
          /** @type {null} */
          key = null;
        } else {
          val = key.sibling;
        }
        var item = success(value, key, a[i], x);
        if (null === item) {
          if (null === key) {
            /** @type {null} */
            key = val;
          }
          break;
        }
        if (v33) {
          if (key) {
            if (null === item.alternate) {
              fn(value, key);
            }
          }
        }
        n = indexOf(item, n, i);
        if (null === obj) {
          result = item;
        } else {
          obj.sibling = item;
        }
        obj = item;
        /** @type {null} */
        key = val;
      }
      if (i === a.length) {
        return callback(value, key), result;
      }
      if (null === key) {
        for (;i < a.length;i++) {
          if (key = process(value, a[i], x)) {
            n = indexOf(key, n, i);
            if (null === obj) {
              result = key;
            } else {
              obj.sibling = key;
            }
            obj = key;
          }
        }
        return result;
      }
      key = set(value, key);
      for (;i < a.length;i++) {
        if (val = filter(key, value, i, a[i], x)) {
          if (v33) {
            if (null !== val.alternate) {
              key.delete(null === val.key ? i : val.key);
            }
          }
          n = indexOf(val, n, i);
          if (null === obj) {
            result = val;
          } else {
            obj.sibling = val;
          }
          obj = val;
        }
      }
      return v33 && key.forEach(function(n) {
        return fn(value, n);
      }), result;
    }
    /**
     * @param {?} name
     * @param {Object} n
     * @param {?} elem
     * @param {Function} config
     * @return {?}
     */
    function next(name, n, elem, config) {
      var result = attr(elem);
      if ("function" != typeof result) {
        replace("150");
      }
      if (null == (elem = result.call(elem))) {
        replace("151");
      }
      /** @type {null} */
      var options = result = null;
      /** @type {Object} */
      var key = n;
      /** @type {number} */
      var i = n = 0;
      /** @type {null} */
      var attrs = null;
      var item = elem.next();
      for (;null !== key && !item.done;i++, item = elem.next()) {
        if (key.index > i) {
          attrs = key;
          /** @type {null} */
          key = null;
        } else {
          attrs = key.sibling;
        }
        var val = success(name, key, item.value, config);
        if (null === val) {
          if (!key) {
            /** @type {null} */
            key = attrs;
          }
          break;
        }
        if (v33) {
          if (key) {
            if (null === val.alternate) {
              fn(name, key);
            }
          }
        }
        n = indexOf(val, n, i);
        if (null === options) {
          result = val;
        } else {
          options.sibling = val;
        }
        options = val;
        /** @type {null} */
        key = attrs;
      }
      if (item.done) {
        return callback(name, key), result;
      }
      if (null === key) {
        for (;!item.done;i++, item = elem.next()) {
          if (null !== (item = process(name, item.value, config))) {
            n = indexOf(item, n, i);
            if (null === options) {
              result = item;
            } else {
              options.sibling = item;
            }
            options = item;
          }
        }
        return result;
      }
      key = set(name, key);
      for (;!item.done;i++, item = elem.next()) {
        if (null !== (item = filter(key, name, i, item.value, config))) {
          if (v33) {
            if (null !== item.alternate) {
              key.delete(null === item.key ? i : item.key);
            }
          }
          n = indexOf(item, n, i);
          if (null === options) {
            result = item;
          } else {
            options.sibling = item;
          }
          options = item;
        }
      }
      return v33 && key.forEach(function(n) {
        return fn(name, n);
      }), result;
    }
    return function(obj, node, expectedHashCode, data) {
      /** @type {boolean} */
      var id = "object" == typeof expectedHashCode && null !== expectedHashCode;
      if (id) {
        switch(expectedHashCode.$$typeof) {
          case Bi:
            t: {
              var key = expectedHashCode.key;
              /** @type {Object} */
              id = node;
              for (;null !== id;) {
                if (id.key === key) {
                  if (id.type === expectedHashCode.type) {
                    callback(obj, id.sibling);
                    (node = $(id, data)).ref = handler(id, expectedHashCode);
                    node.pendingProps = expectedHashCode.props;
                    node.return = obj;
                    /** @type {Object} */
                    obj = node;
                    break t;
                  }
                  callback(obj, id);
                  break;
                }
                fn(obj, id);
                id = id.sibling;
              }
              (data = dataAttr(expectedHashCode, obj.internalContextTag, data)).ref = handler(node, expectedHashCode);
              data.return = obj;
              /** @type {Function} */
              obj = data;
            }
            return values(obj);
          case tn:
            t: {
              id = expectedHashCode.key;
              for (;null !== node;) {
                if (node.key === id) {
                  if (node.tag === value) {
                    callback(obj, node.sibling);
                    (node = $(node, data)).pendingProps = expectedHashCode;
                    node.return = obj;
                    /** @type {Object} */
                    obj = node;
                    break t;
                  }
                  callback(obj, node);
                  break;
                }
                fn(obj, node);
                node = node.sibling;
              }
              (expectedHashCode = indexOf(expectedHashCode, obj.internalContextTag, data)).return = obj;
              obj = expectedHashCode;
            }
            return values(obj);
          case pl:
            t: {
              if (null !== node) {
                if (node.tag === binary) {
                  callback(obj, node.sibling);
                  (node = $(node, data)).type = expectedHashCode.value;
                  node.return = obj;
                  /** @type {Object} */
                  obj = node;
                  break t;
                }
                callback(obj, node);
              }
              (node = trigger(expectedHashCode, obj.internalContextTag, data)).type = expectedHashCode.value;
              node.return = obj;
              /** @type {Object} */
              obj = node;
            }
            return values(obj);
          case head:
            t: {
              id = expectedHashCode.key;
              for (;null !== node;) {
                if (node.key === id) {
                  if (node.tag === BODY && (node.stateNode.containerInfo === expectedHashCode.containerInfo && node.stateNode.implementation === expectedHashCode.implementation)) {
                    callback(obj, node.sibling);
                    (node = $(node, data)).pendingProps = expectedHashCode.children || [];
                    node.return = obj;
                    /** @type {Object} */
                    obj = node;
                    break t;
                  }
                  callback(obj, node);
                  break;
                }
                fn(obj, node);
                node = node.sibling;
              }
              (expectedHashCode = keys(expectedHashCode, obj.internalContextTag, data)).return = obj;
              obj = expectedHashCode;
            }
            return values(obj);
        }
      }
      if ("string" == typeof expectedHashCode || "number" == typeof expectedHashCode) {
        return expectedHashCode = "" + expectedHashCode, null !== node && node.tag === checkbox ? (callback(obj, node.sibling), node = $(node, data), node.pendingProps = expectedHashCode, node.return = obj, obj = node) : (callback(obj, node), expectedHashCode = call(expectedHashCode, obj.internalContextTag, data), expectedHashCode.return = obj, obj = expectedHashCode), values(obj);
      }
      if (isArray(expectedHashCode)) {
        return remove(obj, node, expectedHashCode, data);
      }
      if (attr(expectedHashCode)) {
        return next(obj, node, expectedHashCode, data);
      }
      if (id && resolve(obj, expectedHashCode), void 0 === expectedHashCode) {
        switch(obj.tag) {
          case message:
          ;
          case renderElement:
            replace("152", (expectedHashCode = obj.type).displayName || (expectedHashCode.name || "Component"));
        }
      }
      return callback(obj, node);
    };
  }
  /**
   * @param {Function} success
   * @param {Function} nextApp
   * @param {Function} fn
   * @param {Function} error
   * @return {?}
   */
  function get(success, nextApp, fn, error) {
    /**
     * @param {?} value
     * @param {?} key
     * @return {undefined}
     */
    function setter(value, key) {
      key.updater = assert;
      value.stateNode = key;
      cache.set(key, value);
    }
    var assert = {
      /** @type {function (?): ?} */
      isMounted : nTokens,
      /**
       * @param {?} expectedHashCode
       * @param {string} opt_attributes
       * @param {?} value
       * @return {undefined}
       */
      enqueueSetState : function(expectedHashCode, opt_attributes, value) {
        expectedHashCode = cache.get(expectedHashCode);
        var resp = nextApp(expectedHashCode, false);
        _error(expectedHashCode, opt_attributes, void 0 === value ? null : value, resp);
        success(expectedHashCode, resp);
      },
      /**
       * @param {?} expectedHashCode
       * @param {?} deepDataAndEvents
       * @param {?} recurring
       * @return {undefined}
       */
      enqueueReplaceState : function(expectedHashCode, deepDataAndEvents, recurring) {
        expectedHashCode = cache.get(expectedHashCode);
        var resp = nextApp(expectedHashCode, false);
        flag(expectedHashCode, deepDataAndEvents, void 0 === recurring ? null : recurring, resp);
        success(expectedHashCode, resp);
      },
      /**
       * @param {?} expectedHashCode
       * @param {?} deepDataAndEvents
       * @return {undefined}
       */
      enqueueForceUpdate : function(expectedHashCode, deepDataAndEvents) {
        expectedHashCode = cache.get(expectedHashCode);
        var resp = nextApp(expectedHashCode, false);
        storeInCache(expectedHashCode, void 0 === deepDataAndEvents ? null : deepDataAndEvents, resp);
        success(expectedHashCode, resp);
      }
    };
    return{
      /** @type {function (?, ?): undefined} */
      adoptClassInstance : setter,
      /**
       * @param {Object} node
       * @param {string} val
       * @return {?}
       */
      constructClassInstance : function(node, val) {
        var type = node.type;
        var result = getter(node);
        var id = _nodeUID(node);
        var value = id ? $(node, result) : index;
        return val = new type(val, value), setter(node, val), id && assertEquals(node, result, value), val;
      },
      /**
       * @param {Object} object
       * @param {?} until
       * @return {undefined}
       */
      mountClassInstance : function(object, until) {
        var url = object.alternate;
        var self = object.stateNode;
        var state = self.state || null;
        var p = object.pendingProps;
        if (!p) {
          replace("158");
        }
        var value = getter(object);
        self.props = p;
        self.state = state;
        self.refs = index;
        self.context = $(object, value);
        if (enableAsyncSubtreeAPI.enableAsyncSubtreeAPI) {
          if (null != object.type) {
            if (null != object.type.prototype) {
              if (true === object.type.prototype.unstable_isAsyncReactComponent) {
                object.internalContextTag |= valuesLen;
              }
            }
          }
        }
        if ("function" == typeof self.componentWillMount) {
          value = self.state;
          self.componentWillMount();
          if (value !== self.state) {
            assert.enqueueReplaceState(self, self.state, null);
          }
          if (null !== (value = object.updateQueue)) {
            self.state = debug(url, object, value, self, state, p, until);
          }
        }
        if ("function" == typeof self.componentDidMount) {
          object.effectTag |= Update;
        }
      },
      /**
       * @param {Object} a
       * @param {Object} data
       * @param {Object} err
       * @return {?}
       */
      updateClassInstance : function(a, data, err) {
        var source = data.stateNode;
        source.props = data.memoizedProps;
        source.state = data.memoizedState;
        var start = data.memoizedProps;
        var type = data.pendingProps;
        if (!type) {
          if (null == (type = start)) {
            replace("159");
          }
        }
        var length = source.context;
        var value = getter(data);
        if (value = $(data, value), "function" != typeof source.componentWillReceiveProps || (start === type && length === value || (length = source.state, source.componentWillReceiveProps(type, value), source.state !== length && assert.enqueueReplaceState(source, source.state, null))), length = data.memoizedState, err = null !== data.updateQueue ? debug(a, data, data.updateQueue, source, length, type, err) : length, !(start !== type || (length !== err || (port() || null !== data.updateQueue && data.updateQueue.hasForceUpdate)))) {
          return "function" != typeof source.componentDidUpdate || (start === a.memoizedProps && length === a.memoizedState || (data.effectTag |= Update)), false;
        }
        var t = type;
        if (null === start || null !== data.updateQueue && data.updateQueue.hasForceUpdate) {
          /** @type {boolean} */
          t = true;
        } else {
          var callback = data.stateNode;
          var method = data.type;
          t = "function" == typeof callback.shouldComponentUpdate ? callback.shouldComponentUpdate(t, err, value) : !method.prototype || (!method.prototype.isPureReactComponent || (!parseFloat(start, t) || !parseFloat(length, err)));
        }
        return t ? ("function" == typeof source.componentWillUpdate && source.componentWillUpdate(type, err, value), "function" == typeof source.componentDidUpdate && (data.effectTag |= Update)) : ("function" != typeof source.componentDidUpdate || (start === a.memoizedProps && length === a.memoizedState || (data.effectTag |= Update)), fn(data, type), error(data, err)), source.props = type, source.state = err, source.context = value, t;
      }
    };
  }
  /**
   * @param {(Element|string)} p
   * @param {?} result
   * @param {?} dataAndEvents
   * @param {Function} obj
   * @param {Function} type
   * @return {?}
   */
  function log(p, result, dataAndEvents, obj, type) {
    /**
     * @param {Object} node
     * @param {Object} s
     * @param {?} object
     * @return {undefined}
     */
    function cb(node, s, object) {
      traverseNode(node, s, object, s.pendingWorkPriority);
    }
    /**
     * @param {Object} el
     * @param {Object} node
     * @param {Function} callback
     * @param {?} thisObj
     * @return {undefined}
     */
    function traverseNode(el, node, callback, thisObj) {
      node.child = null === el ? traverseNode(node, node.child, callback, thisObj) : el.child === node.child ? fun(node, node.child, callback, thisObj) : addElement(node, node.child, callback, thisObj);
    }
    /**
     * @param {Object} doc
     * @param {Object} event
     * @return {undefined}
     */
    function fn(doc, event) {
      var id = event.ref;
      if (!(null === id)) {
        if (!(doc && doc.ref === id)) {
          event.effectTag |= Ref;
        }
      }
    }
    /**
     * @param {Object} doc
     * @param {Object} o
     * @param {Object} s
     * @param {(Node|string)} content
     * @return {?}
     */
    function callback(doc, o, s, content) {
      if (fn(doc, o), !s) {
        return content && complete(o, false), f(doc, o);
      }
      s = o.stateNode;
      /** @type {Object} */
      F.current = o;
      var act = s.render();
      return o.effectTag |= effectTag, cb(doc, o, act), o.memoizedState = s.state, o.memoizedProps = s.props, content && complete(o, true), o.child;
    }
    /**
     * @param {Object} object
     * @return {undefined}
     */
    function serialize(object) {
      var element = object.stateNode;
      if (element.pendingContext) {
        forOwn(object, element.pendingContext, element.pendingContext !== element.context);
      } else {
        if (element.context) {
          forOwn(object, element.context, false);
        }
      }
      $(object, element.containerInfo);
    }
    /**
     * @param {Object} a
     * @param {Object} s
     * @return {?}
     */
    function f(a, s) {
      return ok(a, s), s.child;
    }
    /**
     * @param {number} recurring
     * @param {Object} child
     * @return {?}
     */
    function appendChild(recurring, child) {
      switch(child.tag) {
        case source:
          serialize(child);
          break;
        case tag:
          isNode(child);
          break;
        case triangles:
          $(child, child.stateNode.containerInfo);
      }
      return null;
    }
    var func = p.shouldSetTextContent;
    var pl = p.useSyncScheduling;
    var parseAttributes = p.shouldDeprioritizeSubtree;
    var index = result.pushHostContext;
    var $ = result.pushHostContainer;
    var pred = dataAndEvents.enterHydrationState;
    var throttledUpdate = dataAndEvents.resetHydrationState;
    var getAll = dataAndEvents.tryToClaimNextHydratableInstance;
    var _insert = (p = get(obj, type, function(a, e) {
      a.memoizedProps = e;
    }, function(a, e) {
      a.memoizedState = e;
    })).adoptClassInstance;
    var propName = p.constructClassInstance;
    var _nodeUID = p.mountClassInstance;
    var h = p.updateClassInstance;
    return{
      /**
       * @param {Object} doc
       * @param {Object} node
       * @param {?} expectedHashCode
       * @return {?}
       */
      beginWork : function(doc, node, expectedHashCode) {
        if (node.pendingWorkPriority === $e || node.pendingWorkPriority > expectedHashCode) {
          return appendChild(0, node);
        }
        switch(node.tag) {
          case content:
            if (null !== doc) {
              replace("155");
            }
            var data = node.type;
            var child = node.pendingProps;
            var camelKey = report(node);
            return camelKey = ready(node, camelKey), data = data(child, camelKey), node.effectTag |= effectTag, "object" == typeof data && (null !== data && "function" == typeof data.render) ? (node.tag = tag, child = isNode(node), _insert(node, data), _nodeUID(node, expectedHashCode), node = callback(doc, node, true, child)) : (node.tag = group, cb(doc, node, data), node.memoizedProps = child, node = node.child), node;
          case group:
            t: {
              if (child = node.type, expectedHashCode = node.pendingProps, data = node.memoizedProps, getNatural()) {
                if (null === expectedHashCode) {
                  expectedHashCode = data;
                }
              } else {
                if (null === expectedHashCode || data === expectedHashCode) {
                  node = f(doc, node);
                  break t;
                }
              }
              data = report(node);
              child = child(expectedHashCode, data = ready(node, data));
              node.effectTag |= effectTag;
              cb(doc, node, child);
              node.memoizedProps = expectedHashCode;
              node = node.child;
            }
            return node;
          case tag:
            return child = isNode(node), data = void 0, null === doc ? node.stateNode ? replace("153") : (propName(node, node.pendingProps), _nodeUID(node, expectedHashCode), data = true) : data = h(doc, node, expectedHashCode), callback(doc, node, data, child);
          case source:
            return serialize(node), null !== (data = node.updateQueue) ? (child = node.memoizedState, data = merge(doc, node, data, null, child, null, expectedHashCode), child === data ? (throttledUpdate(), node = f(doc, node)) : (child = data.element, null !== doc && null !== doc.child || !pred(node) ? (throttledUpdate(), cb(doc, node, child)) : (node.effectTag |= Placement, node.child = traverseNode(node, node.child, child, expectedHashCode)), node.memoizedState = data, node = node.child)) : (throttledUpdate(),
            node = f(doc, node)), node;
          case _id:
            index(node);
            if (null === doc) {
              getAll(node);
            }
            child = node.type;
            var type = node.memoizedProps;
            return null === (data = node.pendingProps) && (null === (data = type) && replace("154")), camelKey = null !== doc ? doc.memoizedProps : null, getNatural() || null !== data && type !== data ? (type = data.children, func(child, data) ? type = null : camelKey && (func(child, camelKey) && (node.effectTag |= ContentReset)), fn(doc, node), expectedHashCode !== contents && (!pl && parseAttributes(child, data)) ? (node.pendingWorkPriority = contents, node = null) : (cb(doc, node, type), node.memoizedProps =
            data, node = node.child)) : node = f(doc, node), node;
          case uri:
            return null === doc && getAll(node), null === (doc = node.pendingProps) && (doc = node.memoizedProps), node.memoizedProps = doc, null;
          case ext:
            /** @type {number} */
            node.tag = selector;
          case selector:
            return expectedHashCode = node.pendingProps, getNatural() ? null === expectedHashCode && (null === (expectedHashCode = doc && doc.memoizedProps) && replace("154")) : null !== expectedHashCode && node.memoizedProps !== expectedHashCode || (expectedHashCode = node.memoizedProps), child = expectedHashCode.children, data = node.pendingWorkPriority, node.stateNode = null === doc ? traverseNode(node, node.stateNode, child, data) : doc.child === node.child ? fun(node, node.stateNode, child,
            data) : addElement(node, node.stateNode, child, data), node.memoizedProps = expectedHashCode, node.stateNode;
          case iconName:
            return null;
          case triangles:
            t: {
              if ($(node, node.stateNode.containerInfo), expectedHashCode = node.pendingWorkPriority, child = node.pendingProps, getNatural()) {
                if (null === child) {
                  if (null == (child = doc && doc.memoizedProps)) {
                    replace("154");
                  }
                }
              } else {
                if (null === child || node.memoizedProps === child) {
                  node = f(doc, node);
                  break t;
                }
              }
              if (null === doc) {
                node.child = addElement(node, node.child, child, expectedHashCode);
              } else {
                cb(doc, node, child);
              }
              node.memoizedProps = child;
              node = node.child;
            }
            return node;
          case itemText:
            t: {
              if (expectedHashCode = node.pendingProps, getNatural()) {
                if (null === expectedHashCode) {
                  expectedHashCode = node.memoizedProps;
                }
              } else {
                if (null === expectedHashCode || node.memoizedProps === expectedHashCode) {
                  node = f(doc, node);
                  break t;
                }
              }
              cb(doc, node, expectedHashCode);
              node.memoizedProps = expectedHashCode;
              node = node.child;
            }
            return node;
          default:
            replace("156");
        }
      },
      /**
       * @param {Object} parent
       * @param {Object} child
       * @param {?} thisObj
       * @return {?}
       */
      beginFailedWork : function(parent, child, thisObj) {
        switch(child.tag) {
          case tag:
            isNode(child);
            break;
          case source:
            serialize(child);
            break;
          default:
            replace("157");
        }
        return child.effectTag |= Err, null === parent ? child.child = null : child.child !== parent.child && (child.child = parent.child), child.pendingWorkPriority === $e || child.pendingWorkPriority > thisObj ? appendChild(0, child) : (child.firstEffect = null, child.lastEffect = null, traverseNode(parent, child, null, thisObj), child.tag === tag && (parent = child.stateNode, child.memoizedProps = parent.props, child.memoizedState = parent.state), child.child);
      }
    };
  }
  /**
   * @param {Element} options
   * @param {?} c
   * @param {?} context
   * @return {?}
   */
  function request(options, c, context) {
    var callback = options.createInstance;
    var template = options.createTextInstance;
    var compiled = options.appendInitialChild;
    var next = options.finalizeInitialChildren;
    var fn = options.prepareUpdate;
    var compileOptions = c.getRootHostContainer;
    var p = c.popHostContext;
    var cl = c.getHostContext;
    var copyProps = c.popHostContainer;
    var onError = context.prepareToHydrateHostInstance;
    var j = context.prepareToHydrateHostTextInstance;
    var withinElement = context.popHydrationState;
    return{
      /**
       * @param {Object} options
       * @param {Object} event
       * @param {string} camelKey
       * @return {?}
       */
      completeWork : function(options, event, camelKey) {
        var data = event.pendingProps;
        switch(null === data ? data = event.memoizedProps : event.pendingWorkPriority === element && camelKey !== element || (event.pendingProps = null), event.tag) {
          case arrayLength:
            return null;
          case compl:
            return cancelEvent(event), null;
          case rect:
            return copyProps(event), e_prop(event), (data = event.stateNode).pendingContext && (data.context = data.pendingContext, data.pendingContext = null), null !== options && null !== options.child || (withinElement(event), event.effectTag &= ~Ko), null;
          case EADDRINUSE:
            p(event);
            camelKey = compileOptions();
            var result = event.type;
            if (null !== options && null != event.stateNode) {
              var e = options.memoizedProps;
              var elem = event.stateNode;
              var renderSection = cl();
              data = fn(elem, result, e, data, camelKey, renderSection);
              if (event.updateQueue = data) {
                event.effectTag |= Go;
              }
              if (options.ref !== event.ref) {
                event.effectTag |= Yo;
              }
            } else {
              if (!data) {
                return null === event.stateNode && replace("166"), null;
              }
              if (options = cl(), withinElement(event)) {
                if (onError(event, camelKey, options)) {
                  event.effectTag |= Go;
                }
              } else {
                options = callback(result, data, camelKey, options, event);
                e = event.child;
                t: for (;null !== e;) {
                  if (e.tag === EADDRINUSE || e.tag === n) {
                    compiled(options, e.stateNode);
                  } else {
                    if (e.tag !== ENOENT && null !== e.child) {
                      e = e.child;
                      continue;
                    }
                  }
                  if (e === event) {
                    break t;
                  }
                  for (;null === e.sibling;) {
                    if (null === e.return || e.return === event) {
                      break t;
                    }
                    e = e.return;
                  }
                  e = e.sibling;
                }
                if (next(options, result, data, camelKey)) {
                  event.effectTag |= Go;
                }
                /** @type {Object} */
                event.stateNode = options;
              }
              if (null !== event.ref) {
                event.effectTag |= Yo;
              }
            }
            return null;
          case n:
            if (options && null != event.stateNode) {
              if (options.memoizedProps !== data) {
                event.effectTag |= Go;
              }
            } else {
              if ("string" != typeof data) {
                return null === event.stateNode && replace("166"), null;
              }
              options = compileOptions();
              camelKey = cl();
              if (withinElement(event)) {
                if (j(event)) {
                  event.effectTag |= Go;
                }
              } else {
                event.stateNode = template(data, options, camelKey, event);
              }
            }
            return null;
          case args:
            if (!(data = event.memoizedProps)) {
              replace("165");
            }
            /** @type {number} */
            event.tag = stopMethod;
            /** @type {Array} */
            camelKey = [];
            if (result = event.stateNode) {
              /** @type {Object} */
              result.return = event;
            }
            t: for (;null !== result;) {
              if (result.tag === EADDRINUSE || (result.tag === n || result.tag === ENOENT)) {
                replace("164");
              } else {
                if (result.tag === expected) {
                  camelKey.push(result.type);
                } else {
                  if (null !== result.child) {
                    result.child.return = result;
                    result = result.child;
                    continue;
                  }
                }
              }
              for (;null === result.sibling;) {
                if (null === result.return || result.return === event) {
                  break t;
                }
                result = result.return;
              }
              result.sibling.return = result.return;
              result = result.sibling;
            }
            return result = data.handler, data = result(data.props, camelKey), event.child = logMessage(event, null !== options ? options.child : null, data, event.pendingWorkPriority), event.child;
          case stopMethod:
            return event.tag = args, null;
          case expected:
          ;
          case itemOffsetTop:
            return null;
          case ENOENT:
            return event.effectTag |= Go, copyProps(event), null;
          case itemOffsetHeight:
            replace("167");
          default:
            replace("156");
        }
      }
    };
  }
  /**
   * @param {Function} cb
   * @return {?}
   */
  function async(cb) {
    return function(outErr) {
      try {
        return cb(outErr);
      } catch (t) {
      }
    };
  }
  /**
   * @param {Element} c
   * @param {Function} callback
   * @return {?}
   */
  function run(c, callback) {
    /**
     * @param {Object} data
     * @return {undefined}
     */
    function done(data) {
      var end = data.ref;
      if (null !== end) {
        try {
          end(null);
        } catch (feed) {
          callback(data, feed);
        }
      }
    }
    /**
     * @param {?} self
     * @return {?}
     */
    function fn(self) {
      return self.tag === method || (self.tag === error || self.tag === status);
    }
    /**
     * @param {?} error
     * @return {undefined}
     */
    function onError(error) {
      var self = error;
      for (;;) {
        if (check(self), null !== self.child && self.tag !== status) {
          self.child.return = self;
          self = self.child;
        } else {
          if (self === error) {
            break;
          }
          for (;null === self.sibling;) {
            if (null === self.return || self.return === error) {
              return;
            }
            self = self.return;
          }
          self.sibling.return = self.return;
          self = self.sibling;
        }
      }
    }
    /**
     * @param {Object} v
     * @return {undefined}
     */
    function handler(v) {
      /** @type {Object} */
      var self = v;
      /** @type {boolean} */
      var f = false;
      var content = void 0;
      var a = void 0;
      for (;;) {
        if (!f) {
          f = self.return;
          t: for (;;) {
            switch(null === f && replace("160"), f.tag) {
              case method:
                content = f.stateNode;
                /** @type {boolean} */
                a = false;
                break t;
              case error:
              ;
              case status:
                content = f.stateNode.containerInfo;
                /** @type {boolean} */
                a = true;
                break t;
            }
            f = f.return;
          }
          /** @type {boolean} */
          f = true;
        }
        if (self.tag === method || self.tag === state) {
          onError(self);
          if (a) {
            compile(content, self.stateNode);
          } else {
            reply(content, self.stateNode);
          }
        } else {
          if (self.tag === status ? content = self.stateNode.containerInfo : check(self), null !== self.child) {
            self.child.return = self;
            self = self.child;
            continue;
          }
        }
        if (self === v) {
          break;
        }
        for (;null === self.sibling;) {
          if (null === self.return || self.return === v) {
            return;
          }
          if ((self = self.return).tag === status) {
            /** @type {boolean} */
            f = false;
          }
        }
        self.sibling.return = self.return;
        self = self.sibling;
      }
    }
    /**
     * @param {Object} event
     * @return {undefined}
     */
    function check(event) {
      switch("function" == typeof layout && layout(event), event.tag) {
        case line:
          done(event);
          var data = event.stateNode;
          if ("function" == typeof data.componentWillUnmount) {
            try {
              data.props = event.memoizedProps;
              data.state = event.memoizedState;
              data.componentWillUnmount();
            } catch (feed) {
              callback(event, feed);
            }
          }
          break;
        case method:
          done(event);
          break;
        case itemWidth:
          onError(event.stateNode);
          break;
        case status:
          handler(event);
      }
    }
    var format = c.commitMount;
    var cancelAnimationFrame = c.commitUpdate;
    var l = c.resetTextContent;
    var assert = c.commitTextUpdate;
    var after = c.appendChild;
    var query = c.appendChildToContainer;
    var removeDOMAsEventListener = c.insertBefore;
    var addDOMAsEventListener = c.insertInContainerBefore;
    var reply = c.removeChild;
    var compile = c.removeChildFromContainer;
    var cl = c.getPublicInstance;
    return{
      /**
       * @param {?} value
       * @return {undefined}
       */
      commitPlacement : function(value) {
        t: {
          var target = value.return;
          for (;null !== target;) {
            if (fn(target)) {
              var self = target;
              break t;
            }
            target = target.return;
          }
          replace("160");
          self = void 0;
        }
        var o = target = void 0;
        switch(self.tag) {
          case method:
            target = self.stateNode;
            /** @type {boolean} */
            o = false;
            break;
          case error:
          ;
          case status:
            target = self.stateNode.containerInfo;
            /** @type {boolean} */
            o = true;
            break;
          default:
            replace("161");
        }
        if (self.effectTag & S_IFMT) {
          l(target);
          self.effectTag &= ~S_IFMT;
        }
        self = value;
        t: e: for (;;) {
          for (;null === self.sibling;) {
            if (null === self.return || fn(self.return)) {
              /** @type {null} */
              self = null;
              break t;
            }
            self = self.return;
          }
          self.sibling.return = self.return;
          self = self.sibling;
          for (;self.tag !== method && self.tag !== state;) {
            if (self.effectTag & sa) {
              continue e;
            }
            if (null === self.child || self.tag === status) {
              continue e;
            }
            self.child.return = self;
            self = self.child;
          }
          if (!(self.effectTag & sa)) {
            self = self.stateNode;
            break t;
          }
        }
        var item = value;
        for (;;) {
          if (item.tag === method || item.tag === state) {
            if (self) {
              if (o) {
                addDOMAsEventListener(target, item.stateNode, self);
              } else {
                removeDOMAsEventListener(target, item.stateNode, self);
              }
            } else {
              if (o) {
                query(target, item.stateNode);
              } else {
                after(target, item.stateNode);
              }
            }
          } else {
            if (item.tag !== status && null !== item.child) {
              item.child.return = item;
              item = item.child;
              continue;
            }
          }
          if (item === value) {
            break;
          }
          for (;null === item.sibling;) {
            if (null === item.return || item.return === value) {
              return;
            }
            item = item.return;
          }
          item.sibling.return = item.return;
          item = item.sibling;
        }
      },
      /**
       * @param {Object} node
       * @return {undefined}
       */
      commitDeletion : function(node) {
        handler(node);
        /** @type {null} */
        node.return = null;
        /** @type {null} */
        node.child = null;
        if (node.alternate) {
          /** @type {null} */
          node.alternate.child = null;
          /** @type {null} */
          node.alternate.return = null;
        }
      },
      /**
       * @param {Object} deepDataAndEvents
       * @param {Object} obj
       * @return {undefined}
       */
      commitWork : function(deepDataAndEvents, obj) {
        switch(obj.tag) {
          case line:
            break;
          case method:
            var id = obj.stateNode;
            if (null != id) {
              var ol = obj.memoizedProps;
              deepDataAndEvents = null !== deepDataAndEvents ? deepDataAndEvents.memoizedProps : ol;
              var curValue = obj.type;
              var camelKey = obj.updateQueue;
              /** @type {null} */
              obj.updateQueue = null;
              if (null !== camelKey) {
                cancelAnimationFrame(id, camelKey, curValue, deepDataAndEvents, ol, obj);
              }
            }
            break;
          case state:
            if (null === obj.stateNode) {
              replace("162");
            }
            id = obj.memoizedProps;
            assert(obj.stateNode, null !== deepDataAndEvents ? deepDataAndEvents.memoizedProps : id, id);
            break;
          case error:
          ;
          case status:
            break;
          default:
            replace("163");
        }
      },
      /**
       * @param {(Object|string)} context
       * @param {Object} options
       * @return {undefined}
       */
      commitLifeCycles : function(context, options) {
        switch(options.tag) {
          case line:
            var obj = options.stateNode;
            if (options.effectTag & ua) {
              if (null === context) {
                obj.props = options.memoizedProps;
                obj.state = options.memoizedState;
                obj.componentDidMount();
              } else {
                var j = context.memoizedProps;
                context = context.memoizedState;
                obj.props = options.memoizedProps;
                obj.state = options.memoizedState;
                obj.componentDidUpdate(j, context);
              }
            }
            if (options.effectTag & CALLBACK) {
              if (null !== options.updateQueue) {
                tmpl(options, options.updateQueue, obj);
              }
            }
            break;
          case error:
            if (null !== (context = options.updateQueue)) {
              tmpl(options, context, options.child && options.child.stateNode);
            }
            break;
          case method:
            obj = options.stateNode;
            if (null === context) {
              if (options.effectTag & ua) {
                format(obj, options.type, options.memoizedProps, options);
              }
            }
            break;
          case state:
          ;
          case status:
            break;
          default:
            replace("163");
        }
      },
      /**
       * @param {Object} item
       * @return {undefined}
       */
      commitAttachRef : function(item) {
        var el = item.ref;
        if (null !== el) {
          var expectedHashCode = item.stateNode;
          switch(item.tag) {
            case method:
              el(cl(expectedHashCode));
              break;
            default:
              el(expectedHashCode);
          }
        }
      },
      /**
       * @param {Object} ref
       * @return {undefined}
       */
      commitDetachRef : function(ref) {
        if (null !== (ref = ref.ref)) {
          ref(null);
        }
      }
    };
  }
  /**
   * @param {Element} collection
   * @return {?}
   */
  function test(collection) {
    /**
     * @param {string} x
     * @return {?}
     */
    function f(x) {
      return x === v && replace("174"), x;
    }
    var hasKey = collection.getChildHostContext;
    var e = collection.getRootHostContext;
    var expectedHashCode = spawn(v);
    var self = spawn(v);
    var t = spawn(v);
    return{
      /**
       * @return {?}
       */
      getHostContext : function() {
        return f(expectedHashCode.current);
      },
      /**
       * @return {?}
       */
      getRootHostContainer : function() {
        return f(t.current);
      },
      /**
       * @param {Object} v
       * @return {undefined}
       */
      popHostContainer : function(v) {
        buildParams(expectedHashCode, v);
        buildParams(self, v);
        buildParams(t, v);
      },
      /**
       * @param {Object} v
       * @return {undefined}
       */
      popHostContext : function(v) {
        if (self.current === v) {
          buildParams(expectedHashCode, v);
          buildParams(self, v);
        }
      },
      /**
       * @param {string} bytenew
       * @param {string} pdataOld
       * @return {undefined}
       */
      pushHostContainer : function(bytenew, pdataOld) {
        runTest(t, pdataOld, bytenew);
        pdataOld = e(pdataOld);
        runTest(self, bytenew, bytenew);
        runTest(expectedHashCode, pdataOld, bytenew);
      },
      /**
       * @param {string} pdataOld
       * @return {undefined}
       */
      pushHostContext : function(pdataOld) {
        var udataCur = f(t.current);
        var result = f(expectedHashCode.current);
        if (result !== (udataCur = hasKey(result, pdataOld.type, udataCur))) {
          runTest(self, pdataOld, pdataOld);
          runTest(expectedHashCode, udataCur, pdataOld);
        }
      },
      /**
       * @return {undefined}
       */
      resetHostContainer : function() {
        expectedHashCode.current = v;
        t.current = v;
      }
    };
  }
  /**
   * @param {?} options
   * @return {?}
   */
  function initialize(options) {
    /**
     * @param {?} msg
     * @param {?} type
     * @return {undefined}
     */
    function handler(msg, type) {
      var self = fix();
      self.stateNode = type;
      self.return = msg;
      /** @type {number} */
      self.effectTag = compassResult;
      if (null !== msg.lastEffect) {
        msg.lastEffect.nextEffect = self;
        msg.lastEffect = self;
      } else {
        msg.firstEffect = msg.lastEffect = self;
      }
    }
    /**
     * @param {Object} e
     * @param {Object} result
     * @return {?}
     */
    function log(e, result) {
      switch(e.tag) {
        case EEXIST:
          return callback(result, e.type, e.pendingProps);
        case MOVE_EV:
          return print(result, e.pendingProps);
        default:
          return false;
      }
    }
    /**
     * @param {Object} e
     * @return {undefined}
     */
    function fn(e) {
      e = e.return;
      for (;null !== e && (e.tag !== EEXIST && e.tag !== ENTER_KEY);) {
        e = e.return;
      }
      /** @type {Object} */
      b = e;
    }
    var successFn = options.shouldSetTextContent;
    var callback = options.canHydrateInstance;
    var print = options.canHydrateTextInstance;
    var unescape = options.getNextHydratableSibling;
    var filter = options.getFirstHydratableChild;
    var cb = options.hydrateInstance;
    var addAttrib = options.hydrateTextInstance;
    var value = options.didNotHydrateInstance;
    var type = options.didNotFindHydratableInstance;
    if (options = options.didNotFindHydratableTextInstance, !(callback && (print && (unescape && (filter && (cb && (addAttrib && (value && (type && options))))))))) {
      return{
        /**
         * @return {?}
         */
        enterHydrationState : function() {
          return false;
        },
        /**
         * @return {undefined}
         */
        resetHydrationState : function() {
        },
        /**
         * @return {undefined}
         */
        tryToClaimNextHydratableInstance : function() {
        },
        /**
         * @return {undefined}
         */
        prepareToHydrateHostInstance : function() {
          replace("175");
        },
        /**
         * @return {undefined}
         */
        prepareToHydrateHostTextInstance : function() {
          replace("176");
        },
        /**
         * @return {?}
         */
        popHydrationState : function() {
          return false;
        }
      };
    }
    /** @type {null} */
    var b = null;
    /** @type {null} */
    var a = null;
    /** @type {boolean} */
    var v = false;
    return{
      /**
       * @param {?} dataAndEvents
       * @return {?}
       */
      enterHydrationState : function(dataAndEvents) {
        return a = filter(dataAndEvents.stateNode.containerInfo), b = dataAndEvents, v = true;
      },
      /**
       * @return {undefined}
       */
      resetHydrationState : function() {
        /** @type {null} */
        a = b = null;
        /** @type {boolean} */
        v = false;
      },
      /**
       * @param {Object} data
       * @return {?}
       */
      tryToClaimNextHydratableInstance : function(data) {
        if (v) {
          var result = a;
          if (result) {
            if (!log(data, result)) {
              if (!(result = unescape(result)) || !log(data, result)) {
                return data.effectTag |= ba, v = false, void(b = data);
              }
              handler(b, a);
            }
            data.stateNode = result;
            /** @type {Object} */
            b = data;
            a = filter(result);
          } else {
            data.effectTag |= ba;
            /** @type {boolean} */
            v = false;
            /** @type {Object} */
            b = data;
          }
        }
      },
      /**
       * @param {Object} data
       * @param {Object} value
       * @param {Object} deepDataAndEvents
       * @return {?}
       */
      prepareToHydrateHostInstance : function(data, value, deepDataAndEvents) {
        return value = cb(data.stateNode, data.type, data.memoizedProps, value, deepDataAndEvents, data), data.updateQueue = value, null !== value;
      },
      /**
       * @param {Object} x
       * @return {?}
       */
      prepareToHydrateHostTextInstance : function(x) {
        return addAttrib(x.stateNode, x.memoizedProps, x);
      },
      /**
       * @param {Object} e
       * @return {?}
       */
      popHydrationState : function(e) {
        if (e !== b) {
          return false;
        }
        if (!v) {
          return fn(e), v = true, false;
        }
        var result = e.type;
        if (e.tag !== EEXIST || "head" !== result && ("body" !== result && !successFn(result, e.memoizedProps))) {
          result = a;
          for (;result;) {
            handler(e, result);
            result = unescape(result);
          }
        }
        return fn(e), a = b ? unescape(e.stateNode) : null, true;
      }
    };
  }
  /**
   * @param {Element} options
   * @return {?}
   */
  function ajax(options) {
    /**
     * @return {?}
     */
    function reset() {
      for (;null !== attrs && attrs.current.pendingWorkPriority === radio;) {
        /** @type {boolean} */
        attrs.isScheduled = false;
        var key = attrs.nextScheduledRoot;
        if (attrs.nextScheduledRoot = null, attrs === clock) {
          return clock = attrs = null, e = radio, null;
        }
        attrs = key;
      }
      key = attrs;
      /** @type {null} */
      var val = null;
      var value = radio;
      for (;null !== key;) {
        if (key.current.pendingWorkPriority !== radio) {
          if (value === radio || value > key.current.pendingWorkPriority) {
            value = key.current.pendingWorkPriority;
            val = key;
          }
        }
        key = key.nextScheduledRoot;
      }
      if (null !== val) {
        e = value;
        reset();
        rmEvt();
        forOwn();
        ctx = dispose(val.current, value);
        if (val !== skip) {
          /** @type {number} */
          a = 0;
          skip = val;
        }
      } else {
        e = radio;
        /** @type {null} */
        skip = ctx = null;
      }
    }
    /**
     * @param {?} event
     * @return {undefined}
     */
    function complete(event) {
      /** @type {boolean} */
      vvar = true;
      /** @type {null} */
      cmd = null;
      var params = event.stateNode;
      if (params.current === event && replace("177"), e !== success && e !== err || a++, user.current = null, event.effectTag > h) {
        if (null !== event.lastEffect) {
          event.lastEffect.nextEffect = event;
          var data = event.firstEffect;
        } else {
          data = event;
        }
      } else {
        data = event.firstEffect;
      }
      onComplete();
      option = data;
      for (;null !== option;) {
        /** @type {boolean} */
        var expectedHashCode = false;
        var config = void 0;
        try {
          for (;null !== option;) {
            var b = option.effectTag;
            if (b & d && options.resetTextContent(option.stateNode), b & mask) {
              var suiteView = option.alternate;
              if (null !== suiteView) {
                isUndefined(suiteView);
              }
            }
            switch(b & ~(b2 | y | d | mask | h)) {
              case Da:
                getter(option);
                option.effectTag &= ~Da;
                break;
              case PlacementAndUpdate:
                getter(option);
                option.effectTag &= ~Da;
                interpret(option.alternate, option);
                break;
              case b1:
                interpret(option.alternate, option);
                break;
              case Deletion:
                /** @type {boolean} */
                et = true;
                jQuery(option);
                /** @type {boolean} */
                et = false;
            }
            option = option.nextEffect;
          }
        } catch (deps) {
          /** @type {boolean} */
          expectedHashCode = true;
          config = deps;
        }
        if (expectedHashCode) {
          if (null === option) {
            replace("178");
          }
          init(option, config);
          if (null !== option) {
            option = option.nextEffect;
          }
        }
      }
      dispose();
      params.current = event;
      option = data;
      for (;null !== option;) {
        /** @type {boolean} */
        params = false;
        data = void 0;
        try {
          for (;null !== option;) {
            var x = option.effectTag;
            if (x & (b1 | b2) && c(option.alternate, option), x & mask && isDocumentComplete(option), x & y) {
              switch(expectedHashCode = option, config = void 0, null !== model && (config = model.get(expectedHashCode), model.delete(expectedHashCode), null == config && (null !== expectedHashCode.alternate && (expectedHashCode = expectedHashCode.alternate, config = model.get(expectedHashCode), model.delete(expectedHashCode)))), null == config && replace("184"), expectedHashCode.tag) {
                case json:
                  expectedHashCode.stateNode.componentDidCatch(config.error, {
                    componentStack : config.componentStack
                  });
                  break;
                case HTML:
                  if (null === root) {
                    root = config.error;
                  }
                  break;
                default:
                  replace("157");
              }
            }
            var newOption = option.nextEffect;
            /** @type {null} */
            option.nextEffect = null;
            option = newOption;
          }
        } catch (tmp) {
          /** @type {boolean} */
          params = true;
          data = tmp;
        }
        if (params) {
          if (null === option) {
            replace("178");
          }
          init(option, data);
          if (null !== option) {
            option = option.nextEffect;
          }
        }
      }
      /** @type {boolean} */
      vvar = false;
      if ("function" == typeof length) {
        length(event.stateNode);
      }
      if (result) {
        result.forEach(check);
        /** @type {null} */
        result = null;
      }
      reset();
    }
    /**
     * @param {Object} node
     * @return {?}
     */
    function get(node) {
      for (;;) {
        var ret = cb(node.alternate, node, e);
        var root = node.return;
        var text = node.sibling;
        /** @type {Object} */
        var box = node;
        if (!(box.pendingWorkPriority !== radio && box.pendingWorkPriority > e)) {
          var y = getPosition(box);
          var t = box.child;
          for (;null !== t;) {
            y = unescape(y, t.pendingWorkPriority);
            t = t.sibling;
          }
          box.pendingWorkPriority = y;
        }
        if (null !== ret) {
          return ret;
        }
        if (null !== root && (null === root.firstEffect && (root.firstEffect = node.firstEffect), null !== node.lastEffect && (null !== root.lastEffect && (root.lastEffect.nextEffect = node.firstEffect), root.lastEffect = node.lastEffect), node.effectTag > h && (null !== root.lastEffect ? root.lastEffect.nextEffect = node : root.firstEffect = node, root.lastEffect = node)), null !== text) {
          return text;
        }
        if (null === root) {
          /** @type {Object} */
          cmd = node;
          break;
        }
        node = root;
      }
      return null;
    }
    /**
     * @param {Object} node
     * @return {?}
     */
    function clear(node) {
      var ret = fn(node.alternate, node, e);
      return null === ret && (ret = get(node)), user.current = null, ret;
    }
    /**
     * @param {Object} node
     * @return {?}
     */
    function end(node) {
      var value = f(node.alternate, node, e);
      return null === value && (value = get(node)), user.current = null, value;
    }
    /**
     * @param {Object} collection
     * @return {undefined}
     */
    function clean(collection) {
      done(pdataCur, collection);
    }
    /**
     * @return {undefined}
     */
    function update() {
      if (null !== model && (0 < model.size && e === err)) {
        for (;null !== ctx;) {
          var expectedHashCode = ctx;
          if (null === (ctx = null !== model && (model.has(expectedHashCode) || null !== expectedHashCode.alternate && model.has(expectedHashCode.alternate)) ? end(ctx) : clear(ctx)) && (null === cmd && replace("179"), error = err, complete(cmd), error = e, null === model || (0 === model.size || e !== err))) {
            break;
          }
        }
      }
    }
    /**
     * @param {Object} r
     * @param {Object} status
     * @return {undefined}
     */
    function success(r, status) {
      if (null !== cmd ? (error = err, complete(cmd), update()) : null === ctx && reset(), !(e === radio || e > r)) {
        error = e;
        t: for (;;) {
          if (e <= err) {
            for (;null !== ctx && !(null === (ctx = clear(ctx)) && (null === cmd && replace("179"), error = err, complete(cmd), error = e, update(), e === radio || (e > r || e > err)));) {
            }
          } else {
            if (null !== status) {
              for (;null !== ctx && !memory;) {
                if (1 < status.timeRemaining()) {
                  if (null === (ctx = clear(ctx))) {
                    if (null === cmd && replace("179"), 1 < status.timeRemaining()) {
                      if (error = err, complete(cmd), error = e, update(), e === radio || (e > r || e < timeout)) {
                        break;
                      }
                    } else {
                      /** @type {boolean} */
                      memory = true;
                    }
                  }
                } else {
                  /** @type {boolean} */
                  memory = true;
                }
              }
            }
          }
          switch(e) {
            case success:
            ;
            case err:
              if (e <= r) {
                continue t;
              }
              break t;
            case timeout:
            ;
            case a2:
            ;
            case pdataCur:
              if (null === status) {
                break t;
              }
              if (!memory && e <= r) {
                continue t;
              }
              break t;
            case radio:
              break t;
            default:
              replace("181");
          }
        }
      }
    }
    /**
     * @param {Object} data
     * @param {Object} resp
     * @return {undefined}
     */
    function done(data, resp) {
      if (firing) {
        replace("182");
      }
      /** @type {boolean} */
      firing = true;
      var a2 = error;
      /** @type {boolean} */
      var node = false;
      /** @type {null} */
      var doc = null;
      try {
        success(data, resp);
      } catch (_doc) {
        /** @type {boolean} */
        node = true;
        doc = _doc;
      }
      for (;node;) {
        if (stack) {
          root = doc;
          break;
        }
        var params = ctx;
        if (null === params) {
          /** @type {boolean} */
          stack = true;
        } else {
          var body = init(params, doc);
          if (null === body && replace("183"), !stack) {
            try {
              node = body;
              /** @type {Object} */
              doc = data;
              /** @type {Object} */
              body = resp;
              var next = node;
              for (;null !== params;) {
                switch(params.tag) {
                  case json:
                    redirect(params);
                    break;
                  case home:
                    isFunction(params);
                    break;
                  case HTML:
                    submit(params);
                    break;
                  case originalId:
                    submit(params);
                }
                if (params === next || params.alternate === next) {
                  break;
                }
                params = params.return;
              }
              ctx = end(node);
              success(doc, body);
            } catch (docs) {
              /** @type {boolean} */
              node = true;
              doc = docs;
              continue;
            }
            break;
          }
        }
      }
      if (error = a2, null !== resp && (G = false), e > err && (!G && (after(clean), G = true)), data = root, stack = memory = firing = false, skip = value = model = root = null, a = 0, null !== data) {
        throw data;
      }
    }
    /**
     * @param {Object} type
     * @param {string} data
     * @return {?}
     */
    function init(type, data) {
      /** @type {null} */
      var key = user.current = null;
      /** @type {boolean} */
      var r = false;
      /** @type {boolean} */
      var willRetry = false;
      /** @type {null} */
      var t = null;
      if (type.tag === HTML) {
        /** @type {Object} */
        key = type;
        if (enter(type)) {
          /** @type {boolean} */
          stack = true;
        }
      } else {
        var expectedHashCode = type.return;
        for (;null !== expectedHashCode && null === key;) {
          if (expectedHashCode.tag === json ? "function" == typeof expectedHashCode.stateNode.componentDidCatch && (r = true, t = getType(expectedHashCode), key = expectedHashCode, willRetry = true) : expectedHashCode.tag === HTML && (key = expectedHashCode), enter(expectedHashCode)) {
            if (et || null !== result && (result.has(expectedHashCode) || null !== expectedHashCode.alternate && result.has(expectedHashCode.alternate))) {
              return null;
            }
            /** @type {null} */
            key = null;
            /** @type {boolean} */
            willRetry = false;
          }
          expectedHashCode = expectedHashCode.return;
        }
      }
      if (null !== key) {
        if (null === value) {
          value = new Set;
        }
        value.add(key);
        /** @type {string} */
        var optsData = "";
        /** @type {Object} */
        expectedHashCode = type;
        do {
          t: {
            switch(expectedHashCode.tag) {
              case iKey:
              ;
              case at:
              ;
              case payload:
              ;
              case proxy:
                var args = expectedHashCode._debugOwner;
                var tmp_args = expectedHashCode._debugSource;
                var buf = getType(expectedHashCode);
                /** @type {null} */
                var fragment = null;
                if (args) {
                  fragment = getType(args);
                }
                args = tmp_args;
                /** @type {string} */
                buf = "\n    in " + (buf || "Unknown") + (args ? " (at " + args.fileName.replace(/^.*[\\\/]/, "") + ":" + args.lineNumber + ")" : fragment ? " (created by " + fragment + ")" : "");
                break t;
              default:
                /** @type {string} */
                buf = "";
            }
          }
          optsData += buf;
          expectedHashCode = expectedHashCode.return;
        } while (expectedHashCode);
        /** @type {string} */
        expectedHashCode = optsData;
        type = getType(type);
        if (null === model) {
          model = new Map;
        }
        data = {
          componentName : type,
          componentStack : expectedHashCode,
          error : data,
          errorBoundary : r ? key.stateNode : null,
          errorBoundaryFound : r,
          errorBoundaryName : t,
          willRetry : willRetry
        };
        model.set(key, data);
        try {
          console.error(data.error);
        } catch (fmt) {
          console.error(fmt);
        }
        return vvar ? (null === result && (result = new Set), result.add(key)) : check(key), key;
      }
      return null === root && (root = data), null;
    }
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    function enter(expectedHashCode) {
      return null !== value && (value.has(expectedHashCode) || null !== expectedHashCode.alternate && value.has(expectedHashCode.alternate));
    }
    /**
     * @param {Object} name
     * @param {?} data
     * @return {?}
     */
    function _data(name, data) {
      return next(name, data, false);
    }
    /**
     * @param {Object} element
     * @param {?} value
     * @return {undefined}
     */
    function next(element, value) {
      if (a > b) {
        /** @type {boolean} */
        stack = true;
        replace("185");
      }
      if (!firing) {
        if (value <= e) {
          /** @type {null} */
          ctx = null;
        }
      }
      /** @type {boolean} */
      var name = true;
      for (;null !== element && name;) {
        if (name = false, (element.pendingWorkPriority === radio || element.pendingWorkPriority > value) && (name = true, element.pendingWorkPriority = value), null !== element.alternate && ((element.alternate.pendingWorkPriority === radio || element.alternate.pendingWorkPriority > value) && (name = true, element.alternate.pendingWorkPriority = value)), null === element.return) {
          if (element.tag !== HTML) {
            break;
          }
          var now = element.stateNode;
          if (value === radio || (now.isScheduled || (now.isScheduled = true, clock ? clock.nextScheduledRoot = now : attrs = now, clock = now)), !firing) {
            switch(value) {
              case success:
                if (queuedFn) {
                  done(success, null);
                } else {
                  done(err, null);
                }
                break;
              case err:
                if (!node2) {
                  replace("186");
                }
                break;
              default:
                if (!G) {
                  after(clean);
                  /** @type {boolean} */
                  G = true;
                }
              ;
            }
          }
        }
        element = element.return;
      }
    }
    /**
     * @param {?} state
     * @param {boolean} failing_message
     * @return {?}
     */
    function report(state, failing_message) {
      var type = error;
      return type === radio && (type = !async || (state.internalContextTag & jlen || failing_message) ? a2 : success), type === success && (firing || node2) ? err : type;
    }
    /**
     * @param {Object} name
     * @return {undefined}
     */
    function check(name) {
      next(name, err, true);
    }
    var callback = test(options);
    var node = initialize(options);
    var submit = callback.popHostContainer;
    var isFunction = callback.popHostContext;
    var forOwn = callback.resetHostContainer;
    var handler = log(options, callback, node, _data, report);
    var fn = handler.beginWork;
    var f = handler.beginFailedWork;
    var cb = request(options, callback, node).completeWork;
    var getter = (callback = run(options, init)).commitPlacement;
    var jQuery = callback.commitDeletion;
    var interpret = callback.commitWork;
    var c = callback.commitLifeCycles;
    var isDocumentComplete = callback.commitAttachRef;
    var isUndefined = callback.commitDetachRef;
    var after = options.scheduleDeferredCallback;
    var async = options.useSyncScheduling;
    var onComplete = options.prepareForCommit;
    var dispose = options.resetAfterCommit;
    /** @type {number} */
    var error = radio;
    /** @type {boolean} */
    var firing = false;
    /** @type {boolean} */
    var memory = false;
    /** @type {boolean} */
    var node2 = false;
    /** @type {boolean} */
    var queuedFn = false;
    /** @type {null} */
    var ctx = null;
    /** @type {number} */
    var e = radio;
    /** @type {null} */
    var option = null;
    /** @type {null} */
    var cmd = null;
    /** @type {null} */
    var attrs = null;
    /** @type {null} */
    var clock = null;
    /** @type {boolean} */
    var G = false;
    /** @type {null} */
    var model = null;
    /** @type {null} */
    var value = null;
    /** @type {null} */
    var result = null;
    /** @type {null} */
    var root = null;
    /** @type {boolean} */
    var stack = false;
    /** @type {boolean} */
    var vvar = false;
    /** @type {boolean} */
    var et = false;
    /** @type {number} */
    var b = 1E3;
    /** @type {number} */
    var a = 0;
    /** @type {null} */
    var skip = null;
    return{
      /** @type {function (Object, ?): ?} */
      scheduleUpdate : _data,
      /** @type {function (?, boolean): ?} */
      getPriorityContext : report,
      /**
       * @param {Function} func
       * @param {?} name
       * @return {?}
       */
      batchedUpdates : function(func, name) {
        var n = node2;
        /** @type {boolean} */
        node2 = true;
        try {
          return func(name);
        } finally {
          node2 = n;
          if (!firing) {
            if (!node2) {
              done(err, null);
            }
          }
        }
      },
      /**
       * @param {Function} $sanitize
       * @return {?}
       */
      unbatchedUpdates : function($sanitize) {
        var fn = queuedFn;
        var n = node2;
        queuedFn = node2;
        /** @type {boolean} */
        node2 = false;
        try {
          return $sanitize();
        } finally {
          node2 = n;
          queuedFn = fn;
        }
      },
      /**
       * @param {?} $sanitize
       * @return {?}
       */
      flushSync : function($sanitize) {
        var n = node2;
        var a2 = error;
        /** @type {boolean} */
        node2 = true;
        /** @type {number} */
        error = success;
        try {
          return $sanitize();
        } finally {
          node2 = n;
          error = a2;
          if (firing) {
            replace("187");
          }
          done(err, null);
        }
      },
      /**
       * @param {?} $sanitize
       * @return {?}
       */
      deferredUpdates : function($sanitize) {
        var err = error;
        /** @type {number} */
        error = a2;
        try {
          return $sanitize();
        } finally {
          error = err;
        }
      }
    };
  }
  /**
   * @return {undefined}
   */
  function parseCookies() {
    replace("196");
  }
  /**
   * @param {?} expectedHashCode
   * @return {?}
   */
  function filter(expectedHashCode) {
    return expectedHashCode ? "number" == typeof(expectedHashCode = cache.get(expectedHashCode)).tag ? parseCookies(expectedHashCode) : expectedHashCode._processChildContext(expectedHashCode._context) : index;
  }
  /**
   * @param {Object} e
   * @return {?}
   */
  function f(e) {
    for (;e && e.firstChild;) {
      e = e.firstChild;
    }
    return e;
  }
  /**
   * @param {number} start
   * @param {number} timestamp
   * @return {?}
   */
  function traverse(start, timestamp) {
    var n = f(start);
    /** @type {number} */
    start = 0;
    var end;
    for (;n;) {
      if (n.nodeType === cn) {
        if (end = start + n.textContent.length, start <= timestamp && end >= timestamp) {
          return{
            node : n,
            offset : timestamp - start
          };
        }
        start = end;
      }
      t: {
        for (;n;) {
          if (n.nextSibling) {
            n = n.nextSibling;
            break t;
          }
          n = n.parentNode;
        }
        n = void 0;
      }
      n = f(n);
    }
  }
  /**
   * @return {?}
   */
  function updateRemainingCount() {
    return!textProp && (Block.canUseDOM && (textProp = "textContent" in document.documentElement ? "textContent" : "innerText")), textProp;
  }
  /**
   * @return {undefined}
   */
  function restore() {
    replace("211");
  }
  /**
   * @return {undefined}
   */
  function template() {
    replace("212");
  }
  /**
   * @param {?} expectedHashCode
   * @return {?}
   */
  function render(expectedHashCode) {
    if (null == expectedHashCode) {
      return null;
    }
    if (expectedHashCode.nodeType === offsetParent) {
      return expectedHashCode;
    }
    var map = cache.get(expectedHashCode);
    if (map) {
      return "number" == typeof map.tag ? restore(map) : template(map);
    }
    if ("function" == typeof expectedHashCode.render) {
      replace("188");
    } else {
      replace("213", Object.keys(expectedHashCode));
    }
  }
  /**
   * @param {Object} f
   * @return {?}
   */
  function Number(f) {
    if (void 0 !== f._hostParent) {
      return f._hostParent;
    }
    if ("number" == typeof f.tag) {
      do {
        f = f.return;
      } while (f && f.tag !== theta);
      if (f) {
        return f;
      }
    }
    return null;
  }
  /**
   * @param {?} a
   * @param {?} b
   * @return {?}
   */
  function reduce(a, b) {
    /** @type {number} */
    var newIndex = 0;
    var fromIndex = a;
    for (;fromIndex;fromIndex = Number(fromIndex)) {
      newIndex++;
    }
    /** @type {number} */
    fromIndex = 0;
    var val = b;
    for (;val;val = Number(val)) {
      fromIndex++;
    }
    for (;0 < newIndex - fromIndex;) {
      a = Number(a);
      newIndex--;
    }
    for (;0 < fromIndex - newIndex;) {
      b = Number(b);
      fromIndex--;
    }
    for (;newIndex--;) {
      if (a === b || a === b.alternate) {
        return a;
      }
      a = Number(a);
      b = Number(b);
    }
    return null;
  }
  /**
   * @param {string} x
   * @param {string} a
   * @param {Object} event
   * @return {undefined}
   */
  function f2(x, a, event) {
    if (a = safe_add(x, event.dispatchConfig.phasedRegistrationNames[a])) {
      event._dispatchListeners = push(event._dispatchListeners, a);
      event._dispatchInstances = push(event._dispatchInstances, x);
    }
  }
  /**
   * @param {Object} event
   * @return {undefined}
   */
  function w(event) {
    if (event) {
      if (event.dispatchConfig.phasedRegistrationNames) {
        goog.traverseTwoPhase(event._targetInst, f2, event);
      }
    }
  }
  /**
   * @param {Object} event
   * @return {undefined}
   */
  function action(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var selector = event._targetInst;
      selector = selector ? goog.getParentInstance(selector) : null;
      goog.traverseTwoPhase(selector, f2, event);
    }
  }
  /**
   * @param {string} x
   * @param {string} a
   * @param {Object} event
   * @return {undefined}
   */
  function equals(x, a, event) {
    if (x) {
      if (event) {
        if (event.dispatchConfig.registrationName) {
          if (a = safe_add(x, event.dispatchConfig.registrationName)) {
            event._dispatchListeners = push(event._dispatchListeners, a);
            event._dispatchInstances = push(event._dispatchInstances, x);
          }
        }
      }
    }
  }
  /**
   * @param {Object} event
   * @return {undefined}
   */
  function f1(event) {
    if (event) {
      if (event.dispatchConfig.registrationName) {
        equals(event._targetInst, null, event);
      }
    }
  }
  /**
   * @param {Object} options
   * @param {Node} callback
   * @param {Object} source
   * @param {Object} opt_target
   * @return {?}
   */
  function Event(options, callback, source, opt_target) {
    /** @type {Object} */
    this.dispatchConfig = options;
    /** @type {Node} */
    this._targetInst = callback;
    /** @type {Object} */
    this.nativeEvent = source;
    options = this.constructor.Interface;
    var key;
    for (key in options) {
      if (options.hasOwnProperty(key)) {
        if (callback = options[key]) {
          this[key] = callback(source);
        } else {
          if ("target" === key) {
            /** @type {Object} */
            this.target = opt_target;
          } else {
            this[key] = source[key];
          }
        }
      }
    }
    return this.isDefaultPrevented = (null != source.defaultPrevented ? source.defaultPrevented : false === source.returnValue) ? foo.thatReturnsTrue : foo.thatReturnsFalse, this.isPropagationStopped = foo.thatReturnsFalse, this;
  }
  /**
   * @param {?} a
   * @param {string} event
   * @param {Object} callback
   * @param {Object} s
   * @return {?}
   */
  function destroy(a, event, callback, s) {
    if (this.eventPool.length) {
      var r20 = this.eventPool.pop();
      return this.call(r20, a, event, callback, s), r20;
    }
    return new this(a, event, callback, s);
  }
  /**
   * @param {?} expectedHashCode
   * @return {undefined}
   */
  function e(expectedHashCode) {
    if (!(expectedHashCode instanceof this)) {
      replace("223");
    }
    expectedHashCode.destructor();
    if (10 > this.eventPool.length) {
      this.eventPool.push(expectedHashCode);
    }
  }
  /**
   * @param {Function} t
   * @return {undefined}
   */
  function func(t) {
    /** @type {Array} */
    t.eventPool = [];
    /** @type {function (?, string, Object, Object): ?} */
    t.getPooled = destroy;
    /** @type {function (?): undefined} */
    t.release = e;
  }
  /**
   * @param {?} o
   * @param {?} data
   * @param {?} obj
   * @param {?} method
   * @return {?}
   */
  function path(o, data, obj, method) {
    return Event.call(this, o, data, obj, method);
  }
  /**
   * @param {?} mapper
   * @param {?} callback
   * @param {?} fn
   * @param {?} list
   * @return {?}
   */
  function map(mapper, callback, fn, list) {
    return Event.call(this, mapper, callback, fn, list);
  }
  /**
   * @param {string} keepData
   * @param {Object} e
   * @return {?}
   */
  function startsWith(keepData, e) {
    switch(keepData) {
      case "topKeyUp":
        return-1 !== restricted.indexOf(e.keyCode);
      case "topKeyDown":
        return 229 !== e.keyCode;
      case "topKeyPress":
      ;
      case "topMouseDown":
      ;
      case "topBlur":
        return true;
      default:
        return false;
    }
  }
  /**
   * @param {Object} e
   * @return {?}
   */
  function listener(e) {
    return "object" == typeof(e = e.detail) && "data" in e ? e.data : null;
  }
  /**
   * @param {Object} type
   * @param {Object} e
   * @return {?}
   */
  function event(type, e) {
    switch(type) {
      case "topCompositionEnd":
        return listener(e);
      case "topKeyPress":
        return 32 !== e.which ? null : (eol = true, EOL);
      case "topTextInput":
        return(type = e.data) === EOL && eol ? null : type;
      default:
        return null;
    }
  }
  /**
   * @param {string} type
   * @param {Object} event
   * @return {?}
   */
  function handleClick(type, event) {
    if ($col) {
      return "topCompositionEnd" === type || !inst && startsWith(type, event) ? (type = button.getData(), button.reset(), $col = false, type) : null;
    }
    switch(type) {
      case "topPaste":
        return null;
      case "topKeyPress":
        if (!(event.ctrlKey || (event.altKey || event.metaKey)) || event.ctrlKey && event.altKey) {
          if (event.char && 1 < event.char.length) {
            return event.char;
          }
          if (event.which) {
            return String.fromCharCode(event.which);
          }
        }
        return null;
      case "topCompositionEnd":
        return isFunction ? null : event.data;
      default:
        return null;
    }
  }
  /**
   * @param {boolean} el
   * @return {?}
   */
  function setAttr(el) {
    var name = el && (el.nodeName && el.nodeName.toLowerCase());
    return "input" === name ? !!defaults[el.type] : "textarea" === name;
  }
  /**
   * @param {Object} event
   * @param {Object} callback
   * @param {string} options
   * @return {?}
   */
  function format(event, callback, options) {
    return event = Event.getPooled(events.change, event, callback, options), event.type = "change", container.enqueueStateRestore(options), set.accumulateTwoPhaseDispatches(event), event;
  }
  /**
   * @param {string} node
   * @return {undefined}
   */
  function header(node) {
    acc.enqueueEvents(node);
    acc.processEventQueue(false);
  }
  /**
   * @param {string} i
   * @return {?}
   */
  function fail(i) {
    var text = reserved.getNodeFromInstance(i);
    if (block.updateValueIfChanged(text)) {
      return i;
    }
  }
  /**
   * @param {string} obj
   * @param {string} object
   * @return {?}
   */
  function seal(obj, object) {
    if ("topChange" === obj) {
      return object;
    }
  }
  /**
   * @return {undefined}
   */
  function init() {
    if (oElement) {
      oElement.detachEvent("onpropertychange", done);
      /** @type {null} */
      b = oElement = null;
    }
  }
  /**
   * @param {Object} name
   * @return {undefined}
   */
  function done(name) {
    if ("value" === name.propertyName) {
      if (fail(b)) {
        name = format(b, name, find(name));
        socket.batchedUpdates(header, name);
      }
    }
  }
  /**
   * @param {string} opt_scope
   * @param {Function} src
   * @param {?} f
   * @return {undefined}
   */
  function listen(opt_scope, src, f) {
    if ("topFocus" === opt_scope) {
      init();
      /** @type {Function} */
      oElement = src;
      b = f;
      oElement.attachEvent("onpropertychange", done);
    } else {
      if ("topBlur" === opt_scope) {
        init();
      }
    }
  }
  /**
   * @param {string} value
   * @return {?}
   */
  function mode(value) {
    if ("topSelectionChange" === value || ("topKeyUp" === value || "topKeyDown" === value)) {
      return fail(b);
    }
  }
  /**
   * @param {string} value
   * @param {string} classNames
   * @return {?}
   */
  function removeClass(value, classNames) {
    if ("topClick" === value) {
      return fail(classNames);
    }
  }
  /**
   * @param {string} value
   * @param {string} classNames
   * @return {?}
   */
  function toggleClass(value, classNames) {
    if ("topInput" === value || "topChange" === value) {
      return fail(classNames);
    }
  }
  /**
   * @param {?} el
   * @param {?} data
   * @param {?} obj
   * @param {?} scope
   * @return {?}
   */
  function Class(el, data, obj, scope) {
    return Event.call(this, el, data, obj, scope);
  }
  /**
   * @param {Text} event
   * @return {?}
   */
  function mouseup(event) {
    var fixHook = this.nativeEvent;
    return fixHook.getModifierState ? fixHook.getModifierState(event) : !!(event = _ref1[event]) && !!fixHook[event];
  }
  /**
   * @return {?}
   */
  function getModifierState() {
    return mouseup;
  }
  /**
   * @param {?} element
   * @param {?} callback
   * @param {?} obj
   * @param {?} a
   * @return {?}
   */
  function val(element, callback, obj, a) {
    return Event.call(this, element, callback, obj, a);
  }
  /**
   * @param {Object} item
   * @param {Object} obj
   * @return {?}
   */
  function select(item, obj) {
    if (Ws || (null == target || target !== isHTML())) {
      return null;
    }
    var selection = target;
    return "selectionStart" in selection && testRange.hasSelectionCapabilities(selection) ? selection = {
      start : selection.selectionStart,
      end : selection.selectionEnd
    } : window.getSelection ? (selection = window.getSelection(), selection = {
      anchorNode : selection.anchorNode,
      anchorOffset : selection.anchorOffset,
      focusNode : selection.focusNode,
      focusOffset : selection.focusOffset
    }) : selection = void 0, version && parseFloat(version, selection) ? null : (version = selection, item = Event.getPooled(conf.select, name, item, obj), item.type = "select", item.target = target, set.accumulateTwoPhaseDispatches(item), item);
  }
  /**
   * @param {?} event
   * @param {?} i
   * @param {?} options
   * @param {?} caller
   * @return {?}
   */
  function condition(event, i, options, caller) {
    return Event.call(this, event, i, options, caller);
  }
  /**
   * @param {?} name
   * @param {?} data
   * @param {?} obj
   * @param {?} e
   * @return {?}
   */
  function fire(name, data, obj, e) {
    return Event.call(this, name, data, obj, e);
  }
  /**
   * @param {?} element
   * @param {?} fn
   * @param {?} context
   * @param {?} locals
   * @return {?}
   */
  function attach(element, fn, context, locals) {
    return Event.call(this, element, fn, context, locals);
  }
  /**
   * @param {number} e
   * @return {?}
   */
  function fixEvent(e) {
    var c = e.keyCode;
    return "charCode" in e ? 0 === (e = e.charCode) && (13 === c && (e = 13)) : e = c, 32 <= e || 13 === e ? e : 0;
  }
  /**
   * @param {?} element
   * @param {?} args
   * @param {?} list
   * @param {?} scope
   * @return {?}
   */
  function match(element, args, list, scope) {
    return Event.call(this, element, args, list, scope);
  }
  /**
   * @param {?} eventName
   * @param {?} data
   * @param {?} obj
   * @param {?} scope
   * @return {?}
   */
  function emit(eventName, data, obj, scope) {
    return Event.call(this, eventName, data, obj, scope);
  }
  /**
   * @param {?} name
   * @param {?} callback
   * @param {?} fn
   * @param {?} scope
   * @return {?}
   */
  function post(name, callback, fn, scope) {
    return Event.call(this, name, callback, fn, scope);
  }
  /**
   * @param {?} ev
   * @param {?} wrapper
   * @param {?} obj
   * @param {?} scope
   * @return {?}
   */
  function wrap(ev, wrapper, obj, scope) {
    return Event.call(this, ev, wrapper, obj, scope);
  }
  /**
   * @param {?} obj
   * @param {?} data
   * @param {?} array
   * @param {?} a
   * @return {?}
   */
  function last(obj, data, array, a) {
    return Event.call(this, obj, data, array, a);
  }
  /**
   * @param {number} m
   * @return {?}
   */
  function pdataOld(m) {
    return m[1].toUpperCase();
  }
  /**
   * @param {Node} node
   * @return {?}
   */
  function createElement(node) {
    return!(!node || node.nodeType !== ELEMENT_NODE && (node.nodeType !== nodeType && (node.nodeType !== nType && (node.nodeType !== string || " react-mount-point-unstable " !== node.nodeValue))));
  }
  /**
   * @param {Object} node
   * @return {?}
   */
  function visit(node) {
    return!(!(node = node ? node.nodeType === nodeType ? node.documentElement : node.firstChild : null) || (node.nodeType !== ELEMENT_NODE || !node.hasAttribute(attribute)));
  }
  /**
   * @param {?} isXML
   * @param {?} condition
   * @param {Object} text
   * @param {Object} c
   * @param {Object} expectedNumberOfNonCommentArgs
   * @return {?}
   */
  function assert(isXML, condition, text, c, expectedNumberOfNonCommentArgs) {
    if (!createElement(text)) {
      replace("200");
    }
    var data = text._reactRootContainer;
    if (data) {
      client.updateContainer(condition, data, isXML, expectedNumberOfNonCommentArgs);
    } else {
      if (!c && !visit(text)) {
        c = void 0;
        for (;c = text.lastChild;) {
          text.removeChild(c);
        }
      }
      var value = client.createContainer(text);
      data = text._reactRootContainer = value;
      client.unbatchedUpdates(function() {
        client.updateContainer(condition, value, isXML, expectedNumberOfNonCommentArgs);
      });
    }
    return client.getPublicRootInstance(data);
  }
  /**
   * @param {?} deepDataAndEvents
   * @param {?} text
   * @return {?}
   */
  function span(deepDataAndEvents, text) {
    var escaped = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
    return createElement(text) || replace("200"), html.createPortal(deepDataAndEvents, text, null, escaped);
  }
  var dom = require(0);
  require(8);
  var Block = require(48);
  var fn = require(17);
  var input = require(49);
  var foo = require(6);
  var index = require(18);
  var parseFloat = require(50);
  var addClass = require(51);
  var getName = require(54);
  var isHTML = require(55);
  if (!dom) {
    replace("227");
  }
  var ret;
  var exec;
  var $$ = {
    Namespaces : {
      html : "http://www.w3.org/1999/xhtml",
      mathml : "http://www.w3.org/1998/Math/MathML",
      svg : "http://www.w3.org/2000/svg"
    },
    /** @type {function (string): ?} */
    getIntrinsicNamespace : stringifyString,
    /**
     * @param {string} v02
     * @param {string} obj
     * @return {?}
     */
    getChildNamespace : function(v02, obj) {
      return null == v02 || "http://www.w3.org/1999/xhtml" === v02 ? stringifyString(obj) : "http://www.w3.org/2000/svg" === v02 && "foreignObject" === obj ? "http://www.w3.org/1999/xhtml" : v02;
    }
  };
  /** @type {null} */
  var parents = null;
  var attributes = {};
  var _this = {
    plugins : [],
    eventNameDispatchConfigs : {},
    registrationNameModules : {},
    registrationNameDependencies : {},
    possibleRegistrationNames : null,
    /**
     * @param {Array} next_scope
     * @return {undefined}
     */
    injectEventPluginOrder : function(next_scope) {
      if (parents) {
        replace("101");
      }
      /** @type {Array.<?>} */
      parents = Array.prototype.slice.call(next_scope);
      _init();
    },
    /**
     * @param {Object} methods
     * @return {undefined}
     */
    injectEventPluginsByName : function(methods) {
      var property;
      /** @type {boolean} */
      var n = false;
      for (property in methods) {
        if (methods.hasOwnProperty(property)) {
          var value = methods[property];
          if (!(attributes.hasOwnProperty(property) && attributes[property] === value)) {
            if (attributes[property]) {
              replace("102", property);
            }
            attributes[property] = value;
            /** @type {boolean} */
            n = true;
          }
        }
      }
      if (n) {
        _init();
      }
    }
  };
  var EventPluginRegistry = _this;
  var tmp = {
    children : true,
    dangerouslySetInnerHTML : true,
    autoFocus : true,
    defaultValue : true,
    defaultChecked : true,
    innerHTML : true,
    suppressContentEditableWarning : true,
    style : true
  };
  var YY_START = {
    MUST_USE_PROPERTY : 1,
    HAS_BOOLEAN_VALUE : 4,
    HAS_NUMERIC_VALUE : 8,
    HAS_POSITIVE_NUMERIC_VALUE : 24,
    HAS_OVERLOADED_BOOLEAN_VALUE : 32,
    HAS_STRING_BOOLEAN_VALUE : 64,
    /**
     * @param {Object} regex
     * @return {undefined}
     */
    injectDOMPropertyConfig : function(regex) {
      var YYSTATE = YY_START;
      var o = regex.Properties || {};
      var descs = regex.DOMAttributeNamespaces || {};
      var additional = regex.DOMAttributeNames || {};
      regex = regex.DOMMutationMethods || {};
      var prop;
      for (prop in o) {
        if (config.properties.hasOwnProperty(prop)) {
          replace("48", prop);
        }
        /** @type {string} */
        var hasBooleanValue = prop.toLowerCase();
        var key = o[prop];
        if (!(1 >= (hasBooleanValue = {
          attributeName : hasBooleanValue,
          attributeNamespace : null,
          propertyName : prop,
          mutationMethod : null,
          mustUseProperty : clone(key, YYSTATE.MUST_USE_PROPERTY),
          hasBooleanValue : clone(key, YYSTATE.HAS_BOOLEAN_VALUE),
          hasNumericValue : clone(key, YYSTATE.HAS_NUMERIC_VALUE),
          hasPositiveNumericValue : clone(key, YYSTATE.HAS_POSITIVE_NUMERIC_VALUE),
          hasOverloadedBooleanValue : clone(key, YYSTATE.HAS_OVERLOADED_BOOLEAN_VALUE),
          hasStringBooleanValue : clone(key, YYSTATE.HAS_STRING_BOOLEAN_VALUE)
        }).hasBooleanValue + hasBooleanValue.hasNumericValue + hasBooleanValue.hasOverloadedBooleanValue)) {
          replace("50", prop);
        }
        if (additional.hasOwnProperty(prop)) {
          hasBooleanValue.attributeName = additional[prop];
        }
        if (descs.hasOwnProperty(prop)) {
          hasBooleanValue.attributeNamespace = descs[prop];
        }
        if (regex.hasOwnProperty(prop)) {
          hasBooleanValue.mutationMethod = regex[prop];
        }
        config.properties[prop] = hasBooleanValue;
      }
    }
  };
  var config = {
    ID_ATTRIBUTE_NAME : "data-reactid",
    ROOT_ATTRIBUTE_NAME : "data-reactroot",
    ATTRIBUTE_NAME_START_CHAR : ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",
    ATTRIBUTE_NAME_CHAR : ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040",
    properties : {},
    /**
     * @param {string} defaults
     * @param {?} value
     * @return {?}
     */
    shouldSetAttribute : function(defaults, value) {
      if (config.isReservedProp(defaults) || !("o" !== defaults[0] && "O" !== defaults[0] || "n" !== defaults[1] && "N" !== defaults[1])) {
        return false;
      }
      if (null === value) {
        return true;
      }
      switch(typeof value) {
        case "boolean":
          return config.shouldAttributeAcceptBooleanValue(defaults);
        case "undefined":
        ;
        case "number":
        ;
        case "string":
        ;
        case "object":
          return true;
        default:
          return false;
      }
    },
    /**
     * @param {string} x
     * @return {?}
     */
    getPropertyInfo : function(x) {
      return config.properties.hasOwnProperty(x) ? config.properties[x] : null;
    },
    /**
     * @param {string} c
     * @return {?}
     */
    shouldAttributeAcceptBooleanValue : function(c) {
      if (config.isReservedProp(c)) {
        return true;
      }
      var pos = config.getPropertyInfo(c);
      return pos ? pos.hasBooleanValue || (pos.hasStringBooleanValue || pos.hasOverloadedBooleanValue) : "data-" === (c = c.toLowerCase().slice(0, 5)) || "aria-" === c;
    },
    /**
     * @param {string} c
     * @return {?}
     */
    isReservedProp : function(c) {
      return tmp.hasOwnProperty(c);
    },
    injection : YY_START
  };
  var app = config;
  var item = {
    IndeterminateComponent : 0,
    FunctionalComponent : 1,
    ClassComponent : 2,
    HostRoot : 3,
    HostPortal : 4,
    HostComponent : 5,
    HostText : 6,
    CoroutineComponent : 7,
    CoroutineHandlerPhase : 8,
    YieldComponent : 9,
    Fragment : 10
  };
  var elem = {
    ELEMENT_NODE : 1,
    TEXT_NODE : 3,
    COMMENT_NODE : 8,
    DOCUMENT_NODE : 9,
    DOCUMENT_FRAGMENT_NODE : 11
  };
  /** @type {number} */
  var li = item.HostComponent;
  /** @type {number} */
  var src = item.HostText;
  /** @type {number} */
  var select_one = elem.ELEMENT_NODE;
  /** @type {number} */
  var cur = elem.COMMENT_NODE;
  /** @type {string} */
  var canvas = app.ID_ATTRIBUTE_NAME;
  var b2Body = {
    hasCachedChildNodes : 1
  };
  /** @type {string} */
  var headerLength = Math.random().toString(36).slice(2);
  /** @type {string} */
  var i = "__reactInternalInstance$" + headerLength;
  /** @type {string} */
  var loc = "__reactEventHandlers$" + headerLength;
  var reserved = {
    /** @type {function (?): ?} */
    getClosestInstanceFromNode : pop,
    /**
     * @param {Object} a
     * @return {?}
     */
    getInstanceFromNode : function(a) {
      var b = a[i];
      return b ? b.tag === li || b.tag === src ? b : b._hostNode === a ? b : null : null != (b = pop(a)) && b._hostNode === a ? b : null;
    },
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    getNodeFromInstance : function(expectedHashCode) {
      if (expectedHashCode.tag === li || expectedHashCode.tag === src) {
        return expectedHashCode.stateNode;
      }
      if (void 0 === expectedHashCode._hostNode && replace("33"), expectedHashCode._hostNode) {
        return expectedHashCode._hostNode;
      }
      /** @type {Array} */
      var eventPath = [];
      for (;!expectedHashCode._hostNode;) {
        eventPath.push(expectedHashCode);
        if (!expectedHashCode._hostParent) {
          replace("34");
        }
        expectedHashCode = expectedHashCode._hostParent;
      }
      for (;eventPath.length;expectedHashCode = eventPath.pop()) {
        walk(expectedHashCode, expectedHashCode._hostNode);
      }
      return expectedHashCode._hostNode;
    },
    /** @type {function (?, Object): undefined} */
    precacheChildNodes : walk,
    /** @type {function ((RegExp|string), Object): undefined} */
    precacheNode : contains,
    /**
     * @param {?} dataAndEvents
     * @return {undefined}
     */
    uncacheNode : function(dataAndEvents) {
      var prevSources = dataAndEvents._hostNode;
      if (prevSources) {
        delete prevSources[i];
        /** @type {null} */
        dataAndEvents._hostNode = null;
      }
    },
    /**
     * @param {Object} o
     * @param {Object} atts
     * @return {undefined}
     */
    precacheFiberNode : function(o, atts) {
      /** @type {Object} */
      atts[i] = o;
    },
    /**
     * @param {?} v23
     * @return {?}
     */
    getFiberCurrentPropsFromNode : function(v23) {
      return v23[loc] || null;
    },
    /**
     * @param {Object} path
     * @param {?} key
     * @return {undefined}
     */
    updateFiberProps : function(path, key) {
      path[loc] = key;
    }
  };
  var cache = {
    /**
     * @param {?} keepData
     * @return {undefined}
     */
    remove : function(keepData) {
      keepData._reactInternalFiber = void 0;
    },
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    get : function(expectedHashCode) {
      return expectedHashCode._reactInternalFiber;
    },
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    has : function(expectedHashCode) {
      return void 0 !== expectedHashCode._reactInternalFiber;
    },
    /**
     * @param {?} keepData
     * @param {?} value
     * @return {undefined}
     */
    set : function(keepData, value) {
      keepData._reactInternalFiber = value;
    }
  };
  var G = {
    ReactCurrentOwner : dom.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner
  };
  var BASE = {
    NoEffect : 0,
    PerformedWork : 1,
    Placement : 2,
    Update : 4,
    PlacementAndUpdate : 6,
    Deletion : 8,
    ContentReset : 16,
    Callback : 32,
    Err : 64,
    Ref : 128
  };
  /** @type {number} */
  var overlay = item.HostComponent;
  /** @type {number} */
  var inner = item.HostRoot;
  /** @type {number} */
  var page = item.HostPortal;
  /** @type {number} */
  var property = item.HostText;
  /** @type {number} */
  var NoEffect = BASE.NoEffect;
  /** @type {number} */
  var AJAX = BASE.Placement;
  var tokens = {
    /**
     * @param {?} str
     * @return {?}
     */
    isFiberMounted : function(str) {
      return 2 === toString(str);
    },
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    isMounted : function(expectedHashCode) {
      return!!(expectedHashCode = cache.get(expectedHashCode)) && 2 === toString(expectedHashCode);
    },
    /** @type {function (Object): ?} */
    findCurrentFiberUsingSlowPath : trimWhitespace,
    /**
     * @param {(Object|string)} value
     * @return {?}
     */
    findCurrentHostFiber : function(value) {
      if (!(value = trimWhitespace(value))) {
        return null;
      }
      /** @type {(Object|string)} */
      var self = value;
      for (;;) {
        if (self.tag === overlay || self.tag === property) {
          return self;
        }
        if (self.child) {
          self.child.return = self;
          self = self.child;
        } else {
          if (self === value) {
            break;
          }
          for (;!self.sibling;) {
            if (!self.return || self.return === value) {
              return null;
            }
            self = self.return;
          }
          self.sibling.return = self.return;
          self = self.sibling;
        }
      }
      return null;
    },
    /**
     * @param {Object} value
     * @return {?}
     */
    findCurrentHostFiberWithNoPortals : function(value) {
      if (!(value = trimWhitespace(value))) {
        return null;
      }
      /** @type {Object} */
      var self = value;
      for (;;) {
        if (self.tag === overlay || self.tag === property) {
          return self;
        }
        if (self.child && self.tag !== page) {
          self.child.return = self;
          self = self.child;
        } else {
          if (self === value) {
            break;
          }
          for (;!self.sibling;) {
            if (!self.return || self.return === value) {
              return null;
            }
            self = self.return;
          }
          self.sibling.return = self.return;
          self = self.sibling;
        }
      }
      return null;
    }
  };
  var newArgs = {
    _caughtError : null,
    _hasCaughtError : false,
    _rethrowError : null,
    _hasRethrowError : false,
    injection : {
      /**
       * @param {?} range
       * @return {undefined}
       */
      injectErrorUtils : function(range) {
        if ("function" != typeof range.invokeGuardedCallback) {
          replace("197");
        }
        wrapper = range.invokeGuardedCallback;
      }
    },
    /**
     * @param {?} dataAndEvents
     * @param {?} deepDataAndEvents
     * @param {?} ignoreMethodDoesntExist
     * @param {?} textAlt
     * @param {?} keepData
     * @param {?} opt_attributes
     * @param {?} matcherFunction
     * @param {?} execResult
     * @param {?} opt_keys
     * @return {undefined}
     */
    invokeGuardedCallback : function(dataAndEvents, deepDataAndEvents, ignoreMethodDoesntExist, textAlt, keepData, opt_attributes, matcherFunction, execResult, opt_keys) {
      wrapper.apply(newArgs, arguments);
    },
    /**
     * @param {(Function|string)} wait
     * @param {?} triggerRoute
     * @param {?} opt_attributes
     * @param {Object} dest
     * @param {?} dataAndEvents
     * @param {?} deepDataAndEvents
     * @param {?} ignoreMethodDoesntExist
     * @param {?} textAlt
     * @param {?} keepData
     * @return {undefined}
     */
    invokeGuardedCallbackAndCatchFirstError : function(wait, triggerRoute, opt_attributes, dest, dataAndEvents, deepDataAndEvents, ignoreMethodDoesntExist, textAlt, keepData) {
      if (newArgs.invokeGuardedCallback.apply(this, arguments), newArgs.hasCaughtError()) {
        var handleXhr = newArgs.clearCaughtError();
        if (!newArgs._hasRethrowError) {
          /** @type {boolean} */
          newArgs._hasRethrowError = true;
          newArgs._rethrowError = handleXhr;
        }
      }
    },
    /**
     * @return {?}
     */
    rethrowCaughtError : function() {
      return matcherFunction.apply(newArgs, arguments);
    },
    /**
     * @return {?}
     */
    hasCaughtError : function() {
      return newArgs._hasCaughtError;
    },
    /**
     * @return {?}
     */
    clearCaughtError : function() {
      if (newArgs._hasCaughtError) {
        var j = newArgs._caughtError;
        return newArgs._caughtError = null, newArgs._hasCaughtError = false, j;
      }
      replace("198");
    }
  };
  var rquickExpr = newArgs;
  var counter = {
    /**
     * @param {string} topLevelType
     * @return {?}
     */
    isEndish : function(topLevelType) {
      return "topMouseUp" === topLevelType || ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType);
    },
    /**
     * @param {string} topLevelType
     * @return {?}
     */
    isMoveish : function(topLevelType) {
      return "topMouseMove" === topLevelType || "topTouchMove" === topLevelType;
    },
    /**
     * @param {string} topLevelType
     * @return {?}
     */
    isStartish : function(topLevelType) {
      return "topMouseDown" === topLevelType || "topTouchStart" === topLevelType;
    },
    /**
     * @param {Event} event
     * @return {?}
     */
    executeDirectDispatch : function(event) {
      var expectedHashCode = event._dispatchListeners;
      var i = event._dispatchInstances;
      return Array.isArray(expectedHashCode) && replace("103"), event.currentTarget = expectedHashCode ? counter.getNodeFromInstance(i) : null, expectedHashCode = expectedHashCode ? expectedHashCode(event) : null, event.currentTarget = null, event._dispatchListeners = null, event._dispatchInstances = null, expectedHashCode;
    },
    /**
     * @param {Object} event
     * @param {Object} selector
     * @return {undefined}
     */
    executeDispatchesInOrder : function(event, selector) {
      var expectedHashCode = event._dispatchListeners;
      var shift = event._dispatchInstances;
      if (Array.isArray(expectedHashCode)) {
        /** @type {number} */
        var ix = 0;
        for (;ix < expectedHashCode.length && !event.isPropagationStopped();ix++) {
          getTarget(event, selector, expectedHashCode[ix], shift[ix]);
        }
      } else {
        if (expectedHashCode) {
          getTarget(event, selector, expectedHashCode, shift);
        }
      }
      /** @type {null} */
      event._dispatchListeners = null;
      /** @type {null} */
      event._dispatchInstances = null;
    },
    /**
     * @param {string} event
     * @return {?}
     */
    executeDispatchesInOrderStopAtTrue : function(event) {
      t: {
        var expectedHashCode = event._dispatchListeners;
        var related = event._dispatchInstances;
        if (Array.isArray(expectedHashCode)) {
          /** @type {number} */
          var i = 0;
          for (;i < expectedHashCode.length && !event.isPropagationStopped();i++) {
            if (expectedHashCode[i](event, related[i])) {
              expectedHashCode = related[i];
              break t;
            }
          }
        } else {
          if (expectedHashCode && expectedHashCode(event, related)) {
            expectedHashCode = related;
            break t;
          }
        }
        /** @type {null} */
        expectedHashCode = null;
      }
      return event._dispatchInstances = null, event._dispatchListeners = null, expectedHashCode;
    },
    /**
     * @param {?} event
     * @return {?}
     */
    hasDispatches : function(event) {
      return!!event._dispatchListeners;
    },
    /**
     * @param {?} v23
     * @return {?}
     */
    getFiberCurrentPropsFromNode : function(v23) {
      return ret.getFiberCurrentPropsFromNode(v23);
    },
    /**
     * @param {Object} pos
     * @return {?}
     */
    getInstanceFromNode : function(pos) {
      return ret.getInstanceFromNode(pos);
    },
    /**
     * @param {string} statements
     * @return {?}
     */
    getNodeFromInstance : function(statements) {
      return ret.getNodeFromInstance(statements);
    },
    injection : {
      /**
       * @param {?} array
       * @return {undefined}
       */
      injectComponentTree : function(array) {
        ret = array;
      }
    }
  };
  var common = counter;
  /** @type {null} */
  var Assert = null;
  /** @type {null} */
  var len = null;
  /** @type {null} */
  var toResolve = null;
  var container = {
    injection : {
      /**
       * @param {?} var_args
       * @return {undefined}
       */
      injectFiberControlledHostComponent : function(var_args) {
        Assert = var_args;
      }
    },
    /**
     * @param {?} expectedHashCode
     * @return {undefined}
     */
    enqueueStateRestore : function(expectedHashCode) {
      if (len) {
        if (toResolve) {
          toResolve.push(expectedHashCode);
        } else {
          /** @type {Array} */
          toResolve = [expectedHashCode];
        }
      } else {
        len = expectedHashCode;
      }
    },
    /**
     * @return {undefined}
     */
    restoreStateIfNeeded : function() {
      if (len) {
        var i = len;
        var codeSegments = toResolve;
        if (toResolve = len = null, process(i), codeSegments) {
          /** @type {number} */
          i = 0;
          for (;i < codeSegments.length;i++) {
            process(codeSegments[i]);
          }
        }
      }
    }
  };
  /** @type {boolean} */
  var pn = false;
  var socket = {
    /**
     * @param {Function} func
     * @param {?} callback
     * @return {?}
     */
    batchedUpdates : function(func, callback) {
      if (pn) {
        return remove(restoreScript, func, callback);
      }
      /** @type {boolean} */
      pn = true;
      try {
        return remove(restoreScript, func, callback);
      } finally {
        /** @type {boolean} */
        pn = false;
        container.restoreStateIfNeeded();
      }
    },
    injection : {
      /**
       * @param {Function} dataAndEvents
       * @return {undefined}
       */
      injectStackBatchedUpdates : function(dataAndEvents) {
        /** @type {Function} */
        remove = dataAndEvents;
      },
      /**
       * @param {Function} dataAndEvents
       * @return {undefined}
       */
      injectFiberBatchedUpdates : function(dataAndEvents) {
        /** @type {Function} */
        toArray = dataAndEvents;
      }
    }
  };
  /** @type {number} */
  var type = elem.TEXT_NODE;
  /** @type {number} */
  var _in = item.HostRoot;
  /** @type {Array} */
  var eventPath = [];
  var that = {
    _enabled : true,
    _handleTopLevel : null,
    /**
     * @param {?} e
     * @return {undefined}
     */
    setHandleTopLevel : function(e) {
      that._handleTopLevel = e;
    },
    /**
     * @param {Object} enabled
     * @return {undefined}
     */
    setEnabled : function(enabled) {
      /** @type {boolean} */
      that._enabled = !!enabled;
    },
    /**
     * @return {?}
     */
    isEnabled : function() {
      return that._enabled;
    },
    /**
     * @param {string} id
     * @param {string} type
     * @param {?} parent
     * @return {?}
     */
    trapBubbledEvent : function(id, type, parent) {
      return parent ? input.listen(parent, type, that.dispatchEvent.bind(null, id)) : null;
    },
    /**
     * @param {string} deepDataAndEvents
     * @param {string} pdataOld
     * @param {?} expectedHashCode
     * @return {?}
     */
    trapCapturedEvent : function(deepDataAndEvents, pdataOld, expectedHashCode) {
      return expectedHashCode ? input.capture(expectedHashCode, pdataOld, that.dispatchEvent.bind(null, deepDataAndEvents)) : null;
    },
    /**
     * @param {?} expectedHashCode
     * @param {Object} target
     * @return {undefined}
     */
    dispatchEvent : function(expectedHashCode, target) {
      if (that._enabled) {
        var i = find(target);
        if (null === (i = reserved.getClosestInstanceFromNode(i)) || ("number" != typeof i.tag || (tokens.isFiberMounted(i) || (i = null))), eventPath.length) {
          var event = eventPath.pop();
          event.topLevelType = expectedHashCode;
          /** @type {Object} */
          event.nativeEvent = target;
          event.targetInst = i;
          expectedHashCode = event;
        } else {
          expectedHashCode = {
            topLevelType : expectedHashCode,
            nativeEvent : target,
            targetInst : i,
            ancestors : []
          };
        }
        try {
          socket.batchedUpdates(stop, expectedHashCode);
        } finally {
          /** @type {null} */
          expectedHashCode.topLevelType = null;
          /** @type {null} */
          expectedHashCode.nativeEvent = null;
          /** @type {null} */
          expectedHashCode.targetInst = null;
          /** @type {number} */
          expectedHashCode.ancestors.length = 0;
          if (10 > eventPath.length) {
            eventPath.push(expectedHashCode);
          }
        }
      }
    }
  };
  var utils = that;
  /** @type {null} */
  var fromIndex = null;
  var acc = {
    injection : {
      /** @type {function (Array): undefined} */
      injectEventPluginOrder : EventPluginRegistry.injectEventPluginOrder,
      /** @type {function (Object): undefined} */
      injectEventPluginsByName : EventPluginRegistry.injectEventPluginsByName
    },
    /**
     * @param {Object} data
     * @param {string} type
     * @return {?}
     */
    getListener : function(data, type) {
      if ("number" == typeof data.tag) {
        var d = data.stateNode;
        if (!d) {
          return null;
        }
        var opts = common.getFiberCurrentPropsFromNode(d);
        if (!opts) {
          return null;
        }
        if (d = opts[type], needsFocus(type, data.type, opts)) {
          return null;
        }
      } else {
        if ("string" == typeof(opts = data._currentElement) || ("number" == typeof opts || !data._rootNodeID)) {
          return null;
        }
        if (data = opts.props, d = data[type], needsFocus(type, opts.type, data)) {
          return null;
        }
      }
      return d && ("function" != typeof d && replace("231", type, typeof d)), d;
    },
    /**
     * @param {string} node
     * @param {Object} f
     * @param {Object} nativeEvent
     * @param {Object} obj
     * @return {?}
     */
    extractEvents : function(node, f, nativeEvent, obj) {
      var ancestors;
      /** @type {Array} */
      var codeSegments = EventPluginRegistry.plugins;
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var test = codeSegments[i];
        if (test) {
          if (test = test.extractEvents(node, f, nativeEvent, obj)) {
            ancestors = push(ancestors, test);
          }
        }
      }
      return ancestors;
    },
    /**
     * @param {string} x
     * @return {undefined}
     */
    enqueueEvents : function(x) {
      if (x) {
        fromIndex = push(fromIndex, x);
      }
    },
    /**
     * @param {boolean} recurring
     * @return {undefined}
     */
    processEventQueue : function(recurring) {
      var i = fromIndex;
      /** @type {null} */
      fromIndex = null;
      if (recurring) {
        read(i, helper);
      } else {
        read(i, update);
      }
      if (fromIndex) {
        replace("95");
      }
      rquickExpr.rethrowCaughtError();
    }
  };
  if (Block.canUseDOM) {
    /** @type {(boolean|null)} */
    exec = document.implementation && (document.implementation.hasFeature && true !== document.implementation.hasFeature("", ""));
  }
  var base = {
    animationend : prefix("Animation", "AnimationEnd"),
    animationiteration : prefix("Animation", "AnimationIteration"),
    animationstart : prefix("Animation", "AnimationStart"),
    transitionend : prefix("Transition", "TransitionEnd")
  };
  var copy = {};
  var css = {};
  if (Block.canUseDOM) {
    /** @type {(CSSStyleDeclaration|null)} */
    css = document.createElement("div").style;
    if (!("AnimationEvent" in window)) {
      delete base.animationend.animation;
      delete base.animationiteration.animation;
      delete base.animationstart.animation;
    }
    if (!("TransitionEvent" in window)) {
      delete base.transitionend.transition;
    }
  }
  var physics = {
    topAbort : "abort",
    topAnimationEnd : normalize("animationend") || "animationend",
    topAnimationIteration : normalize("animationiteration") || "animationiteration",
    topAnimationStart : normalize("animationstart") || "animationstart",
    topBlur : "blur",
    topCancel : "cancel",
    topCanPlay : "canplay",
    topCanPlayThrough : "canplaythrough",
    topChange : "change",
    topClick : "click",
    topClose : "close",
    topCompositionEnd : "compositionend",
    topCompositionStart : "compositionstart",
    topCompositionUpdate : "compositionupdate",
    topContextMenu : "contextmenu",
    topCopy : "copy",
    topCut : "cut",
    topDoubleClick : "dblclick",
    topDrag : "drag",
    topDragEnd : "dragend",
    topDragEnter : "dragenter",
    topDragExit : "dragexit",
    topDragLeave : "dragleave",
    topDragOver : "dragover",
    topDragStart : "dragstart",
    topDrop : "drop",
    topDurationChange : "durationchange",
    topEmptied : "emptied",
    topEncrypted : "encrypted",
    topEnded : "ended",
    topError : "error",
    topFocus : "focus",
    topInput : "input",
    topKeyDown : "keydown",
    topKeyPress : "keypress",
    topKeyUp : "keyup",
    topLoadedData : "loadeddata",
    topLoad : "load",
    topLoadedMetadata : "loadedmetadata",
    topLoadStart : "loadstart",
    topMouseDown : "mousedown",
    topMouseMove : "mousemove",
    topMouseOut : "mouseout",
    topMouseOver : "mouseover",
    topMouseUp : "mouseup",
    topPaste : "paste",
    topPause : "pause",
    topPlay : "play",
    topPlaying : "playing",
    topProgress : "progress",
    topRateChange : "ratechange",
    topScroll : "scroll",
    topSeeked : "seeked",
    topSeeking : "seeking",
    topSelectionChange : "selectionchange",
    topStalled : "stalled",
    topSuspend : "suspend",
    topTextInput : "textInput",
    topTimeUpdate : "timeupdate",
    topToggle : "toggle",
    topTouchCancel : "touchcancel",
    topTouchEnd : "touchend",
    topTouchMove : "touchmove",
    topTouchStart : "touchstart",
    topTransitionEnd : normalize("transitionend") || "transitionend",
    topVolumeChange : "volumechange",
    topWaiting : "waiting",
    topWheel : "wheel"
  };
  var lookup = {};
  /** @type {number} */
  var uid = 0;
  /** @type {string} */
  var prop = "_reactListenersID" + ("" + Math.random()).slice(2);
  var el = fn({}, {
    /**
     * @param {string} node
     * @param {Object} opt_obj2
     * @param {Object} nativeEvent
     * @param {Object} walkers
     * @return {undefined}
     */
    handleTopLevel : function(node, opt_obj2, nativeEvent, walkers) {
      node = acc.extractEvents(node, opt_obj2, nativeEvent, walkers);
      acc.enqueueEvents(node);
      acc.processEventQueue(false);
    }
  }, {
    /**
     * @param {Object} enabled
     * @return {undefined}
     */
    setEnabled : function(enabled) {
      if (utils) {
        utils.setEnabled(enabled);
      }
    },
    /**
     * @return {?}
     */
    isEnabled : function() {
      return!(!utils || !utils.isEnabled());
    },
    /**
     * @param {(Array|string)} a
     * @param {string} obj
     * @return {undefined}
     */
    listenTo : function(a, obj) {
      var names = hasOwn(obj);
      a = EventPluginRegistry.registrationNameDependencies[a];
      /** @type {number} */
      var i = 0;
      for (;i < a.length;i++) {
        var key = a[i];
        if (!(names.hasOwnProperty(key) && names[key])) {
          if ("topWheel" === key) {
            if (load("wheel")) {
              utils.trapBubbledEvent("topWheel", "wheel", obj);
            } else {
              if (load("mousewheel")) {
                utils.trapBubbledEvent("topWheel", "mousewheel", obj);
              } else {
                utils.trapBubbledEvent("topWheel", "DOMMouseScroll", obj);
              }
            }
          } else {
            if ("topScroll" === key) {
              utils.trapCapturedEvent("topScroll", "scroll", obj);
            } else {
              if ("topFocus" === key || "topBlur" === key) {
                utils.trapCapturedEvent("topFocus", "focus", obj);
                utils.trapCapturedEvent("topBlur", "blur", obj);
                /** @type {boolean} */
                names.topBlur = true;
                /** @type {boolean} */
                names.topFocus = true;
              } else {
                if ("topCancel" === key) {
                  if (load("cancel", true)) {
                    utils.trapCapturedEvent("topCancel", "cancel", obj);
                  }
                  /** @type {boolean} */
                  names.topCancel = true;
                } else {
                  if ("topClose" === key) {
                    if (load("close", true)) {
                      utils.trapCapturedEvent("topClose", "close", obj);
                    }
                    /** @type {boolean} */
                    names.topClose = true;
                  } else {
                    if (physics.hasOwnProperty(key)) {
                      utils.trapBubbledEvent(key, physics[key], obj);
                    }
                  }
                }
              }
            }
          }
          /** @type {boolean} */
          names[key] = true;
        }
      }
    },
    /**
     * @param {(Array|string)} codeSegments
     * @param {Object} obj
     * @return {?}
     */
    isListeningToAllDependencies : function(codeSegments, obj) {
      obj = hasOwn(obj);
      codeSegments = EventPluginRegistry.registrationNameDependencies[codeSegments];
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var member = codeSegments[i];
        if (!obj.hasOwnProperty(member) || !obj[member]) {
          return false;
        }
      }
      return true;
    },
    /**
     * @param {string} id
     * @param {string} type
     * @param {Element} node
     * @return {?}
     */
    trapBubbledEvent : function(id, type, node) {
      return utils.trapBubbledEvent(id, type, node);
    },
    /**
     * @param {string} deepDataAndEvents
     * @param {string} eventName
     * @param {string} until
     * @return {?}
     */
    trapCapturedEvent : function(deepDataAndEvents, eventName, until) {
      return utils.trapCapturedEvent(deepDataAndEvents, eventName, until);
    }
  });
  var global = {
    animationIterationCount : true,
    borderImageOutset : true,
    borderImageSlice : true,
    borderImageWidth : true,
    boxFlex : true,
    boxFlexGroup : true,
    boxOrdinalGroup : true,
    columnCount : true,
    columns : true,
    flex : true,
    flexGrow : true,
    flexPositive : true,
    flexShrink : true,
    flexNegative : true,
    flexOrder : true,
    gridRow : true,
    gridRowEnd : true,
    gridRowSpan : true,
    gridRowStart : true,
    gridColumn : true,
    gridColumnEnd : true,
    gridColumnSpan : true,
    gridColumnStart : true,
    fontWeight : true,
    lineClamp : true,
    lineHeight : true,
    opacity : true,
    order : true,
    orphans : true,
    tabSize : true,
    widows : true,
    zIndex : true,
    zoom : true,
    fillOpacity : true,
    floodOpacity : true,
    stopOpacity : true,
    strokeDasharray : true,
    strokeDashoffset : true,
    strokeMiterlimit : true,
    strokeOpacity : true,
    strokeWidth : true
  };
  /** @type {Array} */
  var prefixes = ["Webkit", "ms", "Moz", "O"];
  Object.keys(global).forEach(function(x) {
    prefixes.forEach(function(k) {
      /** @type {string} */
      k = k + x.charAt(0).toUpperCase() + x.substring(1);
      global[k] = global[x];
    });
  });
  var object = {
    isUnitlessNumber : global,
    shorthandPropertyExpansions : {
      background : {
        backgroundAttachment : true,
        backgroundColor : true,
        backgroundImage : true,
        backgroundPositionX : true,
        backgroundPositionY : true,
        backgroundRepeat : true
      },
      backgroundPosition : {
        backgroundPositionX : true,
        backgroundPositionY : true
      },
      border : {
        borderWidth : true,
        borderStyle : true,
        borderColor : true
      },
      borderBottom : {
        borderBottomWidth : true,
        borderBottomStyle : true,
        borderBottomColor : true
      },
      borderLeft : {
        borderLeftWidth : true,
        borderLeftStyle : true,
        borderLeftColor : true
      },
      borderRight : {
        borderRightWidth : true,
        borderRightStyle : true,
        borderRightColor : true
      },
      borderTop : {
        borderTopWidth : true,
        borderTopStyle : true,
        borderTopColor : true
      },
      font : {
        fontStyle : true,
        fontVariant : true,
        fontWeight : true,
        fontSize : true,
        lineHeight : true,
        fontFamily : true
      },
      outline : {
        outlineWidth : true,
        outlineStyle : true,
        outlineColor : true
      }
    }
  };
  var keywords = object.isUnitlessNumber;
  /** @type {boolean} */
  var propertyMap = false;
  if (Block.canUseDOM) {
    /** @type {(CSSStyleDeclaration|null)} */
    var style = document.createElement("div").style;
    try {
      /** @type {string} */
      style.font = "";
    } catch (t) {
      /** @type {boolean} */
      propertyMap = true;
    }
  }
  var div;
  var nodes = {
    /**
     * @return {undefined}
     */
    createDangerousStringForStyles : function() {
    },
    /**
     * @param {Object} node
     * @param {Object} styles
     * @return {undefined}
     */
    setValueForStyles : function(node, styles) {
      node = node.style;
      var property;
      for (property in styles) {
        if (styles.hasOwnProperty(property)) {
          /** @type {boolean} */
          var entities = 0 === property.indexOf("--");
          /** @type {string} */
          var value = property;
          var val = styles[property];
          if (value = null == val || ("boolean" == typeof val || "" === val) ? "" : entities || ("number" != typeof val || (0 === val || keywords.hasOwnProperty(value) && keywords[value])) ? ("" + val).trim() : val + "px", "float" === property && (property = "cssFloat"), entities) {
            node.setProperty(property, value);
          } else {
            if (value) {
              /** @type {string} */
              node[property] = value;
            } else {
              if (entities = propertyMap && object.shorthandPropertyExpansions[property]) {
                var p;
                for (p in entities) {
                  /** @type {string} */
                  node[p] = "";
                }
              } else {
                /** @type {string} */
                node[property] = "";
              }
            }
          }
        }
      }
    }
  };
  /** @type {RegExp} */
  var names = new RegExp("^[" + app.ATTRIBUTE_NAME_START_CHAR + "][" + app.ATTRIBUTE_NAME_CHAR + "]*$");
  var locValueDict = {};
  var dst = {};
  var hasOwnProperty = {
    /**
     * @param {Element} _
     * @param {?} num
     * @return {undefined}
     */
    setAttributeForID : function(_, num) {
      _.setAttribute(app.ID_ATTRIBUTE_NAME, num);
    },
    /**
     * @param {Element} file
     * @return {undefined}
     */
    setAttributeForRoot : function(file) {
      file.setAttribute(app.ROOT_ATTRIBUTE_NAME, "");
    },
    /**
     * @return {undefined}
     */
    getValueForProperty : function() {
    },
    /**
     * @return {undefined}
     */
    getValueForAttribute : function() {
    },
    /**
     * @param {Element} node
     * @param {string} key
     * @param {?} value
     * @return {undefined}
     */
    setValueForProperty : function(node, key, value) {
      var options = app.getPropertyInfo(key);
      if (options && app.shouldSetAttribute(key, value)) {
        var indent = options.mutationMethod;
        if (indent) {
          indent(node, value);
        } else {
          if (null == value || (options.hasBooleanValue && !value || (options.hasNumericValue && isNaN(value) || (options.hasPositiveNumericValue && 1 > value || options.hasOverloadedBooleanValue && false === value)))) {
            hasOwnProperty.deleteValueForProperty(node, key);
          } else {
            if (options.mustUseProperty) {
              node[options.propertyName] = value;
            } else {
              key = options.attributeName;
              if (indent = options.attributeNamespace) {
                node.setAttributeNS(indent, key, "" + value);
              } else {
                if (options.hasBooleanValue || options.hasOverloadedBooleanValue && true === value) {
                  node.setAttribute(key, "");
                } else {
                  node.setAttribute(key, "" + value);
                }
              }
            }
          }
        }
      } else {
        hasOwnProperty.setValueForAttribute(node, key, app.shouldSetAttribute(key, value) ? value : null);
      }
    },
    /**
     * @param {Element} node
     * @param {string} key
     * @param {string} value
     * @return {undefined}
     */
    setValueForAttribute : function(node, key, value) {
      if (date(key)) {
        if (null == value) {
          node.removeAttribute(key);
        } else {
          node.setAttribute(key, "" + value);
        }
      }
    },
    /**
     * @param {Element} s
     * @param {?} key
     * @return {undefined}
     */
    deleteValueForAttribute : function(s, key) {
      s.removeAttribute(key);
    },
    /**
     * @param {Element} node
     * @param {(number|string)} value
     * @return {undefined}
     */
    deleteValueForProperty : function(node, value) {
      var e = app.getPropertyInfo(value);
      if (e) {
        if (value = e.mutationMethod) {
          value(node, void 0);
        } else {
          if (e.mustUseProperty) {
            /** @type {(boolean|string)} */
            node[e.propertyName] = !e.hasBooleanValue && "";
          } else {
            node.removeAttribute(e.attributeName);
          }
        }
      } else {
        node.removeAttribute(value);
      }
    }
  };
  var buffer = hasOwnProperty;
  var allBundles = G.ReactDebugCurrentFrame;
  var ruto = {
    current : null,
    phase : null,
    /**
     * @return {undefined}
     */
    resetCurrentFiber : function() {
      /** @type {null} */
      allBundles.getCurrentStack = null;
      /** @type {null} */
      ruto.current = null;
      /** @type {null} */
      ruto.phase = null;
    },
    /**
     * @param {?} current
     * @param {?} hash
     * @return {undefined}
     */
    setCurrentFiber : function(current, hash) {
      /** @type {function (): ?} */
      allBundles.getCurrentStack = tryIt;
      ruto.current = current;
      ruto.phase = hash;
    },
    /**
     * @return {?}
     */
    getCurrentFiberOwnerName : function() {
      return null;
    },
    /** @type {function (): ?} */
    getCurrentFiberStackAddendum : tryIt
  };
  var getCurrentFiberOwnerName = ruto;
  var me = {
    /**
     * @param {Element} value
     * @param {Object} o
     * @return {?}
     */
    getHostProps : function(value, o) {
      var size = o.value;
      var show = o.checked;
      return fn({
        type : void 0,
        step : void 0,
        min : void 0,
        max : void 0
      }, o, {
        defaultChecked : void 0,
        defaultValue : void 0,
        value : null != size ? size : value._wrapperState.initialValue,
        checked : null != show ? show : value._wrapperState.initialChecked
      });
    },
    /**
     * @param {Element} dataAndEvents
     * @param {Object} elem
     * @return {undefined}
     */
    initWrapperState : function(dataAndEvents, elem) {
      var val = elem.defaultValue;
      dataAndEvents._wrapperState = {
        initialChecked : null != elem.checked ? elem.checked : elem.defaultChecked,
        initialValue : null != elem.value ? elem.value : val,
        controlled : "checkbox" === elem.type || "radio" === elem.type ? null != elem.checked : null != elem.value
      };
    },
    /**
     * @param {Element} node
     * @param {Object} item
     * @return {undefined}
     */
    updateWrapper : function(node, item) {
      var value = item.checked;
      if (null != value) {
        buffer.setValueForProperty(node, "checked", value || false);
      }
      if (null != (value = item.value)) {
        if (0 === value && "" === node.value) {
          /** @type {string} */
          node.value = "0";
        } else {
          if ("number" === item.type) {
            if (value != (item = parseFloat(node.value) || 0) || value == item && node.value != value) {
              /** @type {string} */
              node.value = "" + value;
            }
          } else {
            if (node.value !== "" + value) {
              /** @type {string} */
              node.value = "" + value;
            }
          }
        }
      } else {
        if (null == item.value) {
          if (null != item.defaultValue) {
            if (node.defaultValue !== "" + item.defaultValue) {
              /** @type {string} */
              node.defaultValue = "" + item.defaultValue;
            }
          }
        }
        if (null == item.checked) {
          if (null != item.defaultChecked) {
            /** @type {boolean} */
            node.defaultChecked = !!item.defaultChecked;
          }
        }
      }
    },
    /**
     * @param {Element} input
     * @param {Object} name
     * @return {undefined}
     */
    postMountWrapper : function(input, name) {
      switch(name.type) {
        case "submit":
        ;
        case "reset":
          break;
        case "color":
        ;
        case "date":
        ;
        case "datetime":
        ;
        case "datetime-local":
        ;
        case "month":
        ;
        case "time":
        ;
        case "week":
          /** @type {string} */
          input.value = "";
          input.value = input.defaultValue;
          break;
        default:
          input.value = input.value;
      }
      if ("" !== (name = input.name)) {
        /** @type {string} */
        input.name = "";
      }
      /** @type {boolean} */
      input.defaultChecked = !input.defaultChecked;
      /** @type {boolean} */
      input.defaultChecked = !input.defaultChecked;
      if ("" !== name) {
        /** @type {Object} */
        input.name = name;
      }
    },
    /**
     * @param {Element} s
     * @param {Object} h
     * @return {undefined}
     */
    restoreControlledState : function(s, h) {
      me.updateWrapper(s, h);
      var n = h.name;
      if ("radio" === h.type && null != n) {
        /** @type {Element} */
        h = s;
        for (;h.parentNode;) {
          h = h.parentNode;
        }
        n = h.querySelectorAll("input[name=" + JSON.stringify("" + n) + '][type="radio"]');
        /** @type {number} */
        h = 0;
        for (;h < n.length;h++) {
          var c = n[h];
          if (c !== s && c.form === s.form) {
            var fn = reserved.getFiberCurrentPropsFromNode(c);
            if (!fn) {
              replace("90");
            }
            me.updateWrapper(c, fn);
          }
        }
      }
    }
  };
  var console = me;
  var data_priv = {
    /**
     * @return {undefined}
     */
    validateProps : function() {
    },
    /**
     * @param {Element} node
     * @param {Object} o
     * @return {undefined}
     */
    postMountWrapper : function(node, o) {
      if (null != o.value) {
        node.setAttribute("value", o.value);
      }
    },
    /**
     * @param {Element} value
     * @param {Object} path
     * @return {?}
     */
    getHostProps : function(value, path) {
      return value = fn({
        children : void 0
      }, path), (path = list(path.children)) && (value.children = path), value;
    }
  };
  var dojo = {
    /**
     * @param {Element} value
     * @param {Object} key
     * @return {?}
     */
    getHostProps : function(value, key) {
      return fn({}, key, {
        value : void 0
      });
    },
    /**
     * @param {Element} dataAndEvents
     * @param {Object} o
     * @return {undefined}
     */
    initWrapperState : function(dataAndEvents, o) {
      var size = o.value;
      dataAndEvents._wrapperState = {
        initialValue : null != size ? size : o.defaultValue,
        wasMultiple : !!o.multiple
      };
    },
    /**
     * @param {Element} node
     * @param {Object} config
     * @return {undefined}
     */
    postMountWrapper : function(node, config) {
      /** @type {boolean} */
      node.multiple = !!config.multiple;
      var ret = config.value;
      if (null != ret) {
        build(node, !!config.multiple, ret);
      } else {
        if (null != config.defaultValue) {
          build(node, !!config.multiple, config.defaultValue);
        }
      }
    },
    /**
     * @param {?} name
     * @param {Object} node
     * @return {undefined}
     */
    postUpdateWrapper : function(name, node) {
      name._wrapperState.initialValue = void 0;
      var wasMultiple = name._wrapperState.wasMultiple;
      /** @type {boolean} */
      name._wrapperState.wasMultiple = !!node.multiple;
      var ret = node.value;
      if (null != ret) {
        build(name, !!node.multiple, ret);
      } else {
        if (wasMultiple !== !!node.multiple) {
          if (null != node.defaultValue) {
            build(name, !!node.multiple, node.defaultValue);
          } else {
            build(name, !!node.multiple, node.multiple ? [] : "");
          }
        }
      }
    },
    /**
     * @param {?} name
     * @param {Element} node
     * @return {undefined}
     */
    restoreControlledState : function(name, node) {
      var ret = node.value;
      if (null != ret) {
        build(name, !!node.multiple, ret);
      }
    }
  };
  var hooks = {
    /**
     * @param {Element} value
     * @param {Object} props
     * @return {?}
     */
    getHostProps : function(value, props) {
      return null != props.dangerouslySetInnerHTML && replace("91"), fn({}, props, {
        value : void 0,
        defaultValue : void 0,
        children : "" + value._wrapperState.initialValue
      });
    },
    /**
     * @param {Element} dataAndEvents
     * @param {?} expectedHashCode
     * @return {undefined}
     */
    initWrapperState : function(dataAndEvents, expectedHashCode) {
      var val = expectedHashCode.value;
      var pos = val;
      if (null == val) {
        val = expectedHashCode.defaultValue;
        if (null != (expectedHashCode = expectedHashCode.children)) {
          if (null != val) {
            replace("92");
          }
          if (Array.isArray(expectedHashCode)) {
            if (!(1 >= expectedHashCode.length)) {
              replace("93");
            }
            expectedHashCode = expectedHashCode[0];
          }
          /** @type {string} */
          val = "" + expectedHashCode;
        }
        if (null == val) {
          /** @type {string} */
          val = "";
        }
        pos = val;
      }
      dataAndEvents._wrapperState = {
        initialValue : "" + pos
      };
    },
    /**
     * @param {Element} node
     * @param {Object} o
     * @return {undefined}
     */
    updateWrapper : function(node, o) {
      var val = o.value;
      if (null != val) {
        if ((val = "" + val) !== node.value) {
          /** @type {string} */
          node.value = val;
        }
        if (null == o.defaultValue) {
          /** @type {string} */
          node.defaultValue = val;
        }
      }
      if (null != o.defaultValue) {
        node.defaultValue = o.defaultValue;
      }
    },
    /**
     * @param {Element} node
     * @return {undefined}
     */
    postMountWrapper : function(node) {
      var text = node.textContent;
      if (text === node._wrapperState.initialValue) {
        node.value = text;
      }
    },
    /**
     * @param {Element} endNode
     * @param {Object} val
     * @return {undefined}
     */
    restoreControlledState : function(endNode, val) {
      hooks.updateWrapper(endNode, val);
    }
  };
  var jQuery = hooks;
  var cont = fn({
    menuitem : true
  }, {
    area : true,
    base : true,
    br : true,
    col : true,
    embed : true,
    hr : true,
    img : true,
    input : true,
    keygen : true,
    link : true,
    meta : true,
    param : true,
    source : true,
    track : true,
    wbr : true
  });
  var block = {
    /**
     * @param {?} dataAndEvents
     * @return {?}
     */
    _getTrackerFromNode : function(dataAndEvents) {
      return dataAndEvents._valueTracker;
    },
    /**
     * @param {Element} event
     * @return {undefined}
     */
    track : function(event) {
      if (!event._valueTracker) {
        event._valueTracker = bind(event);
      }
    },
    /**
     * @param {Object} node
     * @return {?}
     */
    updateValueIfChanged : function(node) {
      if (!node) {
        return false;
      }
      var parent = node._valueTracker;
      if (!parent) {
        return true;
      }
      var tail = parent.getValue();
      /** @type {string} */
      var fragment = "";
      return node && (fragment = browserTrigger(node) ? node.checked ? "true" : "false" : node.value), (node = fragment) !== tail && (parent.setValue(node), true);
    },
    /**
     * @param {string} index
     * @return {undefined}
     */
    stopTracking : function(index) {
      if (index = index._valueTracker) {
        index.stopTracking();
      }
    }
  };
  var gfx = $$.Namespaces;
  var hasClass = function(makeIterator) {
    return "undefined" != typeof MSApp && MSApp.execUnsafeLocalFunction ? function(failures, thisObj, dataAndEvents, deepDataAndEvents) {
      MSApp.execUnsafeLocalFunction(function() {
        return makeIterator(failures, thisObj);
      });
    } : makeIterator;
  }(function(el, node) {
    if (el.namespaceURI !== gfx.svg || "innerHTML" in el) {
      /** @type {Object} */
      el.innerHTML = node;
    } else {
      div = div || document.createElement("div");
      /** @type {string} */
      div.innerHTML = "<svg>" + node + "</svg>";
      node = div.firstChild;
      for (;node.firstChild;) {
        el.appendChild(node.firstChild);
      }
    }
  });
  /** @type {RegExp} */
  var rtagName = /["'&<>]/;
  /** @type {number} */
  var id = elem.TEXT_NODE;
  if (Block.canUseDOM) {
    if (!("textContent" in document.documentElement)) {
      /**
       * @param {Node} node
       * @param {string} value
       * @return {undefined}
       */
      parse = function(node, value) {
        if (node.nodeType === id) {
          /** @type {string} */
          node.nodeValue = value;
        } else {
          if ("boolean" == typeof value || "number" == typeof value) {
            /** @type {string} */
            value = "" + value;
          } else {
            /** @type {string} */
            value = "" + value;
            /** @type {(Array.<string>|null)} */
            var s = rtagName.exec(value);
            if (s) {
              var index;
              /** @type {string} */
              var result = "";
              /** @type {number} */
              var i = 0;
              /** @type {number} */
              index = s.index;
              for (;index < value.length;index++) {
                switch(value.charCodeAt(index)) {
                  case 34:
                    /** @type {string} */
                    s = "&quot;";
                    break;
                  case 38:
                    /** @type {string} */
                    s = "&amp;";
                    break;
                  case 39:
                    /** @type {string} */
                    s = "&#x27;";
                    break;
                  case 60:
                    /** @type {string} */
                    s = "&lt;";
                    break;
                  case 62:
                    /** @type {string} */
                    s = "&gt;";
                    break;
                  default:
                    continue;
                }
                if (i !== index) {
                  result += value.substring(i, index);
                }
                /** @type {number} */
                i = index + 1;
                result += s;
              }
              /** @type {string} */
              value = i !== index ? result + value.substring(i, index) : result;
            }
          }
          hasClass(node, value);
        }
      };
    }
  }
  /** @type {Function} */
  var put = parse;
  /** @type {number} */
  var CSS1Compat = (getCurrentFiberOwnerName.getCurrentFiberOwnerName, elem.DOCUMENT_NODE);
  /** @type {number} */
  var parent = elem.DOCUMENT_FRAGMENT_NODE;
  var sibling = el.listenTo;
  var range = EventPluginRegistry.registrationNameModules;
  /** @type {string} */
  var data = $$.Namespaces.html;
  /** @type {function (string): ?} */
  var trim = $$.getIntrinsicNamespace;
  var attrs = {
    topAbort : "abort",
    topCanPlay : "canplay",
    topCanPlayThrough : "canplaythrough",
    topDurationChange : "durationchange",
    topEmptied : "emptied",
    topEncrypted : "encrypted",
    topEnded : "ended",
    topError : "error",
    topLoadedData : "loadeddata",
    topLoadedMetadata : "loadedmetadata",
    topLoadStart : "loadstart",
    topPause : "pause",
    topPlay : "play",
    topPlaying : "playing",
    topProgress : "progress",
    topRateChange : "ratechange",
    topSeeked : "seeked",
    topSeeking : "seeking",
    topStalled : "stalled",
    topSuspend : "suspend",
    topTimeUpdate : "timeupdate",
    topVolumeChange : "volumechange",
    topWaiting : "waiting"
  };
  var doc = {
    /**
     * @param {Object} el
     * @param {?} opt_attributes
     * @param {Object} doc
     * @param {string} val
     * @return {?}
     */
    createElement : function(el, opt_attributes, doc, val) {
      return doc = doc.nodeType === CSS1Compat ? doc : doc.ownerDocument, val === data && (val = trim(el)), val === data ? "script" === el ? (el = doc.createElement("div"), el.innerHTML = "<script>\x3c/script>", el = el.removeChild(el.firstChild)) : el = "string" == typeof opt_attributes.is ? doc.createElement(el, {
        is : opt_attributes.is
      }) : doc.createElement(el) : el = doc.createElementNS(val, el), el;
    },
    /**
     * @param {boolean} atts
     * @param {Object} doc
     * @return {?}
     */
    createTextNode : function(atts, doc) {
      return(doc.nodeType === CSS1Compat ? doc : doc.ownerDocument).createTextNode(atts);
    },
    /**
     * @param {Element} node
     * @param {?} type
     * @param {Object} name
     * @param {?} doc
     * @return {undefined}
     */
    setInitialProperties : function(node, type, name, doc) {
      var element = compile(type, name);
      switch(type) {
        case "iframe":
        ;
        case "object":
          el.trapBubbledEvent("topLoad", "load", node);
          /** @type {Object} */
          var attr = name;
          break;
        case "video":
        ;
        case "audio":
          for (attr in attrs) {
            if (attrs.hasOwnProperty(attr)) {
              el.trapBubbledEvent(attr, attrs[attr], node);
            }
          }
          /** @type {Object} */
          attr = name;
          break;
        case "source":
          el.trapBubbledEvent("topError", "error", node);
          /** @type {Object} */
          attr = name;
          break;
        case "img":
        ;
        case "image":
          el.trapBubbledEvent("topError", "error", node);
          el.trapBubbledEvent("topLoad", "load", node);
          /** @type {Object} */
          attr = name;
          break;
        case "form":
          el.trapBubbledEvent("topReset", "reset", node);
          el.trapBubbledEvent("topSubmit", "submit", node);
          /** @type {Object} */
          attr = name;
          break;
        case "details":
          el.trapBubbledEvent("topToggle", "toggle", node);
          /** @type {Object} */
          attr = name;
          break;
        case "input":
          console.initWrapperState(node, name);
          attr = console.getHostProps(node, name);
          el.trapBubbledEvent("topInvalid", "invalid", node);
          isXML(doc, "onChange");
          break;
        case "option":
          data_priv.validateProps(node, name);
          attr = data_priv.getHostProps(node, name);
          break;
        case "select":
          dojo.initWrapperState(node, name);
          attr = dojo.getHostProps(node, name);
          el.trapBubbledEvent("topInvalid", "invalid", node);
          isXML(doc, "onChange");
          break;
        case "textarea":
          jQuery.initWrapperState(node, name);
          attr = jQuery.getHostProps(node, name);
          el.trapBubbledEvent("topInvalid", "invalid", node);
          isXML(doc, "onChange");
          break;
        default:
          /** @type {Object} */
          attr = name;
      }
      getStyle(type, attr);
      var tag;
      var tags = attr;
      for (tag in tags) {
        if (tags.hasOwnProperty(tag)) {
          var value = tags[tag];
          if ("style" === tag) {
            nodes.setValueForStyles(node, value);
          } else {
            if ("dangerouslySetInnerHTML" === tag) {
              if (null != (value = value ? value.__html : void 0)) {
                hasClass(node, value);
              }
            } else {
              if ("children" === tag) {
                if ("string" == typeof value) {
                  put(node, value);
                } else {
                  if ("number" == typeof value) {
                    put(node, "" + value);
                  }
                }
              } else {
                if ("suppressContentEditableWarning" !== tag) {
                  if (range.hasOwnProperty(tag)) {
                    if (null != value) {
                      isXML(doc, tag);
                    }
                  } else {
                    if (element) {
                      buffer.setValueForAttribute(node, tag, value);
                    } else {
                      if (null != value) {
                        buffer.setValueForProperty(node, tag, value);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      switch(type) {
        case "input":
          block.track(node);
          console.postMountWrapper(node, name);
          break;
        case "textarea":
          block.track(node);
          jQuery.postMountWrapper(node, name);
          break;
        case "option":
          data_priv.postMountWrapper(node, name);
          break;
        case "select":
          dojo.postMountWrapper(node, name);
          break;
        default:
          if ("function" == typeof attr.onClick) {
            node.onclick = foo;
          }
        ;
      }
    },
    /**
     * @param {string} bytenew
     * @param {string} type
     * @param {Object} p
     * @param {Object} name
     * @param {?} doc
     * @return {?}
     */
    diffProperties : function(bytenew, type, p, name, doc) {
      /** @type {null} */
      var events = null;
      switch(type) {
        case "input":
          p = console.getHostProps(bytenew, p);
          name = console.getHostProps(bytenew, name);
          /** @type {Array} */
          events = [];
          break;
        case "option":
          p = data_priv.getHostProps(bytenew, p);
          name = data_priv.getHostProps(bytenew, name);
          /** @type {Array} */
          events = [];
          break;
        case "select":
          p = dojo.getHostProps(bytenew, p);
          name = dojo.getHostProps(bytenew, name);
          /** @type {Array} */
          events = [];
          break;
        case "textarea":
          p = jQuery.getHostProps(bytenew, p);
          name = jQuery.getHostProps(bytenew, name);
          /** @type {Array} */
          events = [];
          break;
        default:
          if ("function" != typeof p.onClick) {
            if ("function" == typeof name.onClick) {
              bytenew.onclick = foo;
            }
          }
        ;
      }
      getStyle(type, name);
      var expectedHashCode;
      var key;
      /** @type {null} */
      bytenew = null;
      for (expectedHashCode in p) {
        if (!name.hasOwnProperty(expectedHashCode) && (p.hasOwnProperty(expectedHashCode) && null != p[expectedHashCode])) {
          if ("style" === expectedHashCode) {
            for (key in type = p[expectedHashCode]) {
              if (type.hasOwnProperty(key)) {
                if (!bytenew) {
                  bytenew = {};
                }
                /** @type {string} */
                bytenew[key] = "";
              }
            }
          } else {
            if ("dangerouslySetInnerHTML" !== expectedHashCode) {
              if ("children" !== expectedHashCode) {
                if ("suppressContentEditableWarning" !== expectedHashCode) {
                  if (range.hasOwnProperty(expectedHashCode)) {
                    if (!events) {
                      /** @type {Array} */
                      events = [];
                    }
                  } else {
                    (events = events || []).push(expectedHashCode, null);
                  }
                }
              }
            }
          }
        }
      }
      for (expectedHashCode in name) {
        var pdataOld = name[expectedHashCode];
        if (type = null != p ? p[expectedHashCode] : void 0, name.hasOwnProperty(expectedHashCode) && (pdataOld !== type && (null != pdataOld || null != type))) {
          if ("style" === expectedHashCode) {
            if (type) {
              for (key in type) {
                if (!!type.hasOwnProperty(key)) {
                  if (!(pdataOld && pdataOld.hasOwnProperty(key))) {
                    if (!bytenew) {
                      bytenew = {};
                    }
                    /** @type {string} */
                    bytenew[key] = "";
                  }
                }
              }
              for (key in pdataOld) {
                if (pdataOld.hasOwnProperty(key)) {
                  if (type[key] !== pdataOld[key]) {
                    if (!bytenew) {
                      bytenew = {};
                    }
                    bytenew[key] = pdataOld[key];
                  }
                }
              }
            } else {
              if (!bytenew) {
                if (!events) {
                  /** @type {Array} */
                  events = [];
                }
                events.push(expectedHashCode, bytenew);
              }
              bytenew = pdataOld;
            }
          } else {
            if ("dangerouslySetInnerHTML" === expectedHashCode) {
              pdataOld = pdataOld ? pdataOld.__html : void 0;
              type = type ? type.__html : void 0;
              if (null != pdataOld) {
                if (type !== pdataOld) {
                  (events = events || []).push(expectedHashCode, "" + pdataOld);
                }
              }
            } else {
              if ("children" === expectedHashCode) {
                if (!(type === pdataOld)) {
                  if (!("string" != typeof pdataOld && "number" != typeof pdataOld)) {
                    (events = events || []).push(expectedHashCode, "" + pdataOld);
                  }
                }
              } else {
                if ("suppressContentEditableWarning" !== expectedHashCode) {
                  if (range.hasOwnProperty(expectedHashCode)) {
                    if (null != pdataOld) {
                      isXML(doc, expectedHashCode);
                    }
                    if (!events) {
                      if (!(type === pdataOld)) {
                        /** @type {Array} */
                        events = [];
                      }
                    }
                  } else {
                    (events = events || []).push(expectedHashCode, pdataOld);
                  }
                }
              }
            }
          }
        }
      }
      return bytenew && (events = events || []).push("style", bytenew), events;
    },
    /**
     * @param {Element} node
     * @param {Array} set
     * @param {string} t
     * @param {(Error|string)} item
     * @param {?} name
     * @return {undefined}
     */
    updateProperties : function(node, set, t, item, name) {
      compile(t, item);
      item = compile(t, name);
      /** @type {number} */
      var i = 0;
      for (;i < set.length;i += 2) {
        var camelKey = set[i];
        var value = set[i + 1];
        if ("style" === camelKey) {
          nodes.setValueForStyles(node, value);
        } else {
          if ("dangerouslySetInnerHTML" === camelKey) {
            hasClass(node, value);
          } else {
            if ("children" === camelKey) {
              put(node, value);
            } else {
              if (item) {
                if (null != value) {
                  buffer.setValueForAttribute(node, camelKey, value);
                } else {
                  buffer.deleteValueForAttribute(node, camelKey);
                }
              } else {
                if (null != value) {
                  buffer.setValueForProperty(node, camelKey, value);
                } else {
                  buffer.deleteValueForProperty(node, camelKey);
                }
              }
            }
          }
        }
      }
      switch(t) {
        case "input":
          console.updateWrapper(node, name);
          block.updateValueIfChanged(node);
          break;
        case "textarea":
          jQuery.updateWrapper(node, name);
          break;
        case "select":
          dojo.postUpdateWrapper(node, name);
      }
    },
    /**
     * @param {Element} node
     * @param {?} d
     * @param {Object} name
     * @param {Array} deepDataAndEvents
     * @param {Object} doc
     * @return {?}
     */
    diffHydratedProperties : function(node, d, name, deepDataAndEvents, doc) {
      switch(d) {
        case "iframe":
        ;
        case "object":
          el.trapBubbledEvent("topLoad", "load", node);
          break;
        case "video":
        ;
        case "audio":
          var attr;
          for (attr in attrs) {
            if (attrs.hasOwnProperty(attr)) {
              el.trapBubbledEvent(attr, attrs[attr], node);
            }
          }
          break;
        case "source":
          el.trapBubbledEvent("topError", "error", node);
          break;
        case "img":
        ;
        case "image":
          el.trapBubbledEvent("topError", "error", node);
          el.trapBubbledEvent("topLoad", "load", node);
          break;
        case "form":
          el.trapBubbledEvent("topReset", "reset", node);
          el.trapBubbledEvent("topSubmit", "submit", node);
          break;
        case "details":
          el.trapBubbledEvent("topToggle", "toggle", node);
          break;
        case "input":
          console.initWrapperState(node, name);
          el.trapBubbledEvent("topInvalid", "invalid", node);
          isXML(doc, "onChange");
          break;
        case "option":
          data_priv.validateProps(node, name);
          break;
        case "select":
          dojo.initWrapperState(node, name);
          el.trapBubbledEvent("topInvalid", "invalid", node);
          isXML(doc, "onChange");
          break;
        case "textarea":
          jQuery.initWrapperState(node, name);
          el.trapBubbledEvent("topInvalid", "invalid", node);
          isXML(doc, "onChange");
      }
      getStyle(d, name);
      /** @type {null} */
      deepDataAndEvents = null;
      var key;
      for (key in name) {
        if (name.hasOwnProperty(key)) {
          attr = name[key];
          if ("children" === key) {
            if ("string" == typeof attr) {
              if (node.textContent !== attr) {
                /** @type {Array} */
                deepDataAndEvents = ["children", attr];
              }
            } else {
              if ("number" == typeof attr) {
                if (node.textContent !== "" + attr) {
                  /** @type {Array} */
                  deepDataAndEvents = ["children", "" + attr];
                }
              }
            }
          } else {
            if (range.hasOwnProperty(key)) {
              if (null != attr) {
                isXML(doc, key);
              }
            }
          }
        }
      }
      switch(d) {
        case "input":
          block.track(node);
          console.postMountWrapper(node, name);
          break;
        case "textarea":
          block.track(node);
          jQuery.postMountWrapper(node, name);
          break;
        case "select":
        ;
        case "option":
          break;
        default:
          if ("function" == typeof name.onClick) {
            node.onclick = foo;
          }
        ;
      }
      return deepDataAndEvents;
    },
    /**
     * @param {Node} atts
     * @param {?} deepDataAndEvents
     * @return {?}
     */
    diffHydratedText : function(atts, deepDataAndEvents) {
      return atts.nodeValue !== deepDataAndEvents;
    },
    /**
     * @return {undefined}
     */
    warnForDeletedHydratableElement : function() {
    },
    /**
     * @return {undefined}
     */
    warnForDeletedHydratableText : function() {
    },
    /**
     * @return {undefined}
     */
    warnForInsertedHydratedElement : function() {
    },
    /**
     * @return {undefined}
     */
    warnForInsertedHydratedText : function() {
    },
    /**
     * @param {Element} node
     * @param {string} d
     * @param {string} b
     * @return {undefined}
     */
    restoreControlledState : function(node, d, b) {
      switch(d) {
        case "input":
          console.restoreControlledState(node, b);
          break;
        case "textarea":
          jQuery.restoreControlledState(node, b);
          break;
        case "select":
          dojo.restoreControlledState(node, b);
      }
    }
  };
  var anim = void 0;
  if (Block.canUseDOM) {
    if ("function" != typeof requestIdleCallback) {
      /** @type {null} */
      var length2 = null;
      /** @type {null} */
      var triggerCallback = null;
      /** @type {boolean} */
      var vr = false;
      /** @type {boolean} */
      var yr = false;
      /** @type {number} */
      var startIndex = 0;
      /** @type {number} */
      var x = 33;
      /** @type {number} */
      var count = 33;
      var skew = {
        /** @type {function (): ?} */
        timeRemaining : "object" == typeof performance && "function" == typeof performance.now ? function() {
          return startIndex - performance.now();
        } : function() {
          return startIndex - Date.now();
        }
      };
      /** @type {string} */
      var msg = "__reactIdleCallback$" + Math.random().toString(36).slice(2);
      window.addEventListener("message", function(e) {
        if (e.source === window) {
          if (e.data === msg) {
            /** @type {boolean} */
            vr = false;
            e = triggerCallback;
            /** @type {null} */
            triggerCallback = null;
            if (null !== e) {
              e(skew);
            }
          }
        }
      }, false);
      /**
       * @param {?} i
       * @return {undefined}
       */
      var step = function(i) {
        /** @type {boolean} */
        yr = false;
        var j = i - startIndex + count;
        if (j < count && x < count) {
          if (8 > j) {
            /** @type {number} */
            j = 8;
          }
          count = j < x ? x : j;
        } else {
          x = j;
        }
        startIndex = i + count;
        if (!vr) {
          /** @type {boolean} */
          vr = true;
          window.postMessage(msg, "*");
        }
        j = length2;
        /** @type {null} */
        length2 = null;
        if (null !== j) {
          j(i);
        }
      };
      /**
       * @param {?} callback
       * @return {?}
       */
      anim = function(callback) {
        return triggerCallback = callback, yr || (yr = true, requestAnimationFrame(step)), 0;
      };
    } else {
      anim = requestIdleCallback;
    }
  } else {
    /**
     * @param {Function} callback
     * @return {?}
     */
    anim = function(callback) {
      return setTimeout(function() {
        callback({
          /**
           * @return {?}
           */
          timeRemaining : function() {
            return 1 / 0;
          }
        });
      }), 0;
    };
  }
  var ObjectExpression;
  var Literal;
  var rIC = {
    rIC : anim
  };
  var enableAsyncSubtreeAPI = {
    enableAsyncSubtreeAPI : true
  };
  var c = {
    NoWork : 0,
    SynchronousPriority : 1,
    TaskPriority : 2,
    HighPriority : 3,
    LowPriority : 4,
    OffscreenPriority : 5
  };
  /** @type {number} */
  var HUB = BASE.Callback;
  /** @type {number} */
  var undef = c.NoWork;
  /** @type {number} */
  var safari = c.SynchronousPriority;
  /** @type {number} */
  var firefox = c.TaskPriority;
  /** @type {number} */
  var result = item.ClassComponent;
  /** @type {number} */
  var kind = item.HostRoot;
  var fragment = void 0;
  var o = void 0;
  var util = {
    /**
     * @param {?} state
     * @param {string} opt_attributes
     * @param {Function} handler
     * @param {?} status
     * @return {undefined}
     */
    addUpdate : function(state, opt_attributes, handler, status) {
      callback(state, {
        priorityLevel : status,
        partialState : opt_attributes,
        /** @type {Function} */
        callback : handler,
        isReplace : false,
        isForced : false,
        isTopLevelUnmount : false,
        next : null
      });
    },
    /**
     * @param {?} err
     * @param {?} deepDataAndEvents
     * @param {Function} handler
     * @param {?} status
     * @return {undefined}
     */
    addReplaceUpdate : function(err, deepDataAndEvents, handler, status) {
      callback(err, {
        priorityLevel : status,
        partialState : deepDataAndEvents,
        /** @type {Function} */
        callback : handler,
        isReplace : true,
        isForced : false,
        isTopLevelUnmount : false,
        next : null
      });
    },
    /**
     * @param {?} err
     * @param {Function} handler
     * @param {?} status
     * @return {undefined}
     */
    addForceUpdate : function(err, handler, status) {
      callback(err, {
        priorityLevel : status,
        partialState : null,
        /** @type {Function} */
        callback : handler,
        isReplace : false,
        isForced : true,
        isTopLevelUnmount : false,
        next : null
      });
    },
    /**
     * @param {Object} message
     * @return {?}
     */
    getUpdatePriority : function(message) {
      var name = message.updateQueue;
      return null === name || message.tag !== result && message.tag !== kind ? undef : null !== name.first ? name.first.priorityLevel : undef;
    },
    /**
     * @param {Object} state
     * @param {Object} last
     * @param {Object} options
     * @param {Object} keepData
     * @return {undefined}
     */
    addTopLevelUpdate : function(state, last, options, keepData) {
      /** @type {boolean} */
      var node = null === last.element;
      state = callback(state, last = {
        priorityLevel : keepData,
        partialState : last,
        callback : options,
        isReplace : false,
        isForced : false,
        isTopLevelUnmount : node,
        next : null
      });
      if (node) {
        node = fragment;
        options = o;
        if (null !== node) {
          if (null !== last.next) {
            /** @type {null} */
            last.next = null;
            /** @type {Object} */
            node.last = last;
          }
        }
        if (null !== options) {
          if (null !== state) {
            if (null !== state.next) {
              /** @type {null} */
              state.next = null;
              /** @type {Object} */
              options.last = last;
            }
          }
        }
      }
    },
    /**
     * @param {Object} a
     * @param {Object} s
     * @param {?} data
     * @param {?} key
     * @param {Node} value
     * @param {?} now
     * @param {?} arg
     * @return {?}
     */
    beginUpdateQueue : function(a, s, data, key, value, now, arg) {
      if (null !== a) {
        if (a.updateQueue === data) {
          data = s.updateQueue = {
            first : data.first,
            last : data.last,
            callbackList : null,
            hasForceUpdate : false
          };
        }
      }
      a = data.callbackList;
      var type = data.hasForceUpdate;
      /** @type {boolean} */
      var iterator = true;
      var node = data.first;
      for (;null !== node && 0 >= extend(node.priorityLevel, arg);) {
        data.first = node.next;
        if (null === data.first) {
          /** @type {null} */
          data.last = null;
        }
        var index;
        if (node.isReplace) {
          value = setter(node, key, value, now);
          /** @type {boolean} */
          iterator = true;
        } else {
          if (index = setter(node, key, value, now)) {
            value = iterator ? fn({}, value, index) : fn(value, index);
            /** @type {boolean} */
            iterator = false;
          }
        }
        if (node.isForced) {
          /** @type {boolean} */
          type = true;
        }
        if (!(null === node.callback)) {
          if (!(node.isTopLevelUnmount && null !== node.next)) {
            (a = null !== a ? a : []).push(node.callback);
            s.effectTag |= HUB;
          }
        }
        node = node.next;
      }
      return data.callbackList = a, data.hasForceUpdate = type, null !== data.first || (null !== a || (type || (s.updateQueue = null))), value;
    },
    /**
     * @param {string} resultItems
     * @param {?} i
     * @param {?} elem
     * @return {undefined}
     */
    commitCallbacks : function(resultItems, i, elem) {
      if (null !== (resultItems = i.callbackList)) {
        /** @type {null} */
        i.callbackList = null;
        /** @type {number} */
        i = 0;
        for (;i < resultItems.length;i++) {
          var result = resultItems[i];
          if ("function" != typeof result) {
            replace("191", result);
          }
          result.call(elem);
        }
      }
    }
  };
  /** @type {Array} */
  var second = [];
  /** @type {number} */
  var j = -1;
  var methods = {
    /**
     * @param {boolean} o
     * @return {?}
     */
    createCursor : function(o) {
      return{
        current : o
      };
    },
    /**
     * @return {?}
     */
    isEmpty : function() {
      return-1 === j;
    },
    /**
     * @param {?} event
     * @return {undefined}
     */
    pop : function(event) {
      if (!(0 > j)) {
        event.current = second[j];
        /** @type {null} */
        second[j] = null;
        j--;
      }
    },
    /**
     * @param {?} expectedHashCode
     * @param {string} value
     * @return {undefined}
     */
    push : function(expectedHashCode, value) {
      second[++j] = expectedHashCode.current;
      /** @type {string} */
      expectedHashCode.current = value;
    },
    /**
     * @return {undefined}
     */
    reset : function() {
      for (;-1 < j;) {
        /** @type {null} */
        second[j] = null;
        j--;
      }
    }
  };
  /** @type {function (?): ?} */
  var getAll = tokens.isFiberMounted;
  /** @type {number} */
  var context = item.ClassComponent;
  /** @type {number} */
  var section = item.HostRoot;
  /** @type {function (boolean): ?} */
  var toObject = methods.createCursor;
  /** @type {function (?): undefined} */
  var a = methods.pop;
  /** @type {function (?, string): undefined} */
  var sendMessage = methods.push;
  var self = toObject(index);
  var obj = toObject(false);
  var current = index;
  var helpers = {
    /**
     * @param {Object} node
     * @return {?}
     */
    getUnmaskedContext : function(node) {
      return isBinary(node) ? current : self.current;
    },
    /** @type {function ((Function|string), ?, ?): undefined} */
    cacheContext : expect,
    /**
     * @param {Object} node
     * @param {?} value
     * @return {?}
     */
    getMaskedContext : function(node, value) {
      var defaultConfig = node.type.contextTypes;
      if (!defaultConfig) {
        return index;
      }
      var result = node.stateNode;
      if (result && result.__reactInternalMemoizedUnmaskedChildContext === value) {
        return result.__reactInternalMemoizedMaskedChildContext;
      }
      var key;
      var obj = {};
      for (key in defaultConfig) {
        obj[key] = value[key];
      }
      return result && expect(node, value, obj), obj;
    },
    /**
     * @return {?}
     */
    hasContextChanged : function() {
      return obj.current;
    },
    /**
     * @param {Object} node
     * @return {?}
     */
    isContextConsumer : function(node) {
      return node.tag === context && null != node.type.contextTypes;
    },
    /** @type {function (Object): ?} */
    isContextProvider : isBinary,
    /**
     * @param {Object} node
     * @return {undefined}
     */
    popContextProvider : function(node) {
      if (isBinary(node)) {
        a(obj, node);
        a(self, node);
      }
    },
    /**
     * @param {Object} locals
     * @return {undefined}
     */
    popTopLevelContextObject : function(locals) {
      a(obj, locals);
      a(self, locals);
    },
    /**
     * @param {Object} expectedNumberOfNonCommentArgs
     * @param {string} pdataOld
     * @param {string} bytenew
     * @return {undefined}
     */
    pushTopLevelContextObject : function(expectedNumberOfNonCommentArgs, pdataOld, bytenew) {
      if (null != self.cursor) {
        replace("168");
      }
      sendMessage(self, pdataOld, expectedNumberOfNonCommentArgs);
      sendMessage(obj, bytenew, expectedNumberOfNonCommentArgs);
    },
    /** @type {function (Object, ?): ?} */
    processChildContext : loop,
    /**
     * @param {Object} expectedNumberOfNonCommentArgs
     * @return {?}
     */
    pushContextProvider : function(expectedNumberOfNonCommentArgs) {
      if (!isBinary(expectedNumberOfNonCommentArgs)) {
        return false;
      }
      var pdataOld = expectedNumberOfNonCommentArgs.stateNode;
      return pdataOld = pdataOld && pdataOld.__reactInternalMemoizedMergedChildContext || index, current = self.current, sendMessage(self, pdataOld, expectedNumberOfNonCommentArgs), sendMessage(obj, obj.current, expectedNumberOfNonCommentArgs), true;
    },
    /**
     * @param {Object} expectedNumberOfNonCommentArgs
     * @param {string} pdataOld
     * @return {undefined}
     */
    invalidateContextProvider : function(expectedNumberOfNonCommentArgs, pdataOld) {
      var stateNode = expectedNumberOfNonCommentArgs.stateNode;
      if (stateNode || replace("169"), pdataOld) {
        var udataCur = loop(expectedNumberOfNonCommentArgs, current);
        stateNode.__reactInternalMemoizedMergedChildContext = udataCur;
        a(obj, expectedNumberOfNonCommentArgs);
        a(self, expectedNumberOfNonCommentArgs);
        sendMessage(self, udataCur, expectedNumberOfNonCommentArgs);
      } else {
        a(obj, expectedNumberOfNonCommentArgs);
      }
      sendMessage(obj, pdataOld, expectedNumberOfNonCommentArgs);
    },
    /**
     * @return {undefined}
     */
    resetContext : function() {
      current = index;
      self.current = index;
      /** @type {boolean} */
      obj.current = false;
    },
    /**
     * @param {Object} node
     * @return {?}
     */
    findCurrentUnmaskedContext : function(node) {
      if (getAll(node) && node.tag === context) {
        void 0;
      } else {
        replace("170");
      }
      for (;node.tag !== section;) {
        if (isBinary(node)) {
          return node.stateNode.__reactInternalMemoizedMergedChildContext;
        }
        if (!(node = node.return)) {
          replace("171");
        }
      }
      return node.stateNode.context;
    }
  };
  var values = {
    NoContext : 0,
    AsyncUpdates : 1
  };
  /** @type {number} */
  var itemLen = item.IndeterminateComponent;
  /** @type {number} */
  var worldTransform = item.ClassComponent;
  /** @type {number} */
  var itemElement = item.HostRoot;
  /** @type {number} */
  var nodeName = item.HostComponent;
  /** @type {number} */
  var rowData = item.HostText;
  /** @type {number} */
  var tagName = item.HostPortal;
  /** @type {number} */
  var originalEvent = item.CoroutineComponent;
  /** @type {number} */
  var pid = item.YieldComponent;
  /** @type {number} */
  var jl = item.Fragment;
  /** @type {number} */
  var cl = c.NoWork;
  /** @type {number} */
  var time = values.NoContext;
  /** @type {number} */
  var POST = BASE.NoEffect;
  var fargs = {
    /**
     * @param {Object} self
     * @param {?} object
     * @return {?}
     */
    createWorkInProgress : function(self, object) {
      var options = self.alternate;
      return null === options ? (options = new Element(self.tag, self.key, self.internalContextTag), options.type = self.type, options.stateNode = self.stateNode, options.alternate = self, self.alternate = options) : (options.effectTag = POST, options.nextEffect = null, options.firstEffect = null, options.lastEffect = null), options.pendingWorkPriority = object, options.child = self.child, options.memoizedProps = self.memoizedProps, options.memoizedState = self.memoizedState, options.updateQueue =
      self.updateQueue, options.sibling = self.sibling, options.index = self.index, options.ref = self.ref, options;
    },
    /**
     * @return {?}
     */
    createHostRootFiber : function() {
      return new Element(itemElement, null, time);
    },
    /**
     * @param {?} data
     * @param {Text} node
     * @param {Function} head
     * @return {?}
     */
    createFiberFromElement : function(data, node, head) {
      return node = start(data.type, data.key, node), node.pendingProps = data.props, node.pendingWorkPriority = head, node;
    },
    /**
     * @param {?} value
     * @param {Object} element
     * @param {Function} id
     * @return {?}
     */
    createFiberFromFragment : function(value, element, id) {
      return element = new Element(jl, null, element), element.pendingProps = value, element.pendingWorkPriority = id, element;
    },
    /**
     * @param {?} value
     * @param {Object} element
     * @param {Function} stream
     * @return {?}
     */
    createFiberFromText : function(value, element, stream) {
      return element = new Element(rowData, null, element), element.pendingProps = value, element.pendingWorkPriority = stream, element;
    },
    /** @type {function (Object, number, string): ?} */
    createFiberFromElementType : start,
    /**
     * @return {?}
     */
    createFiberFromHostInstanceForDeletion : function() {
      var node = new Element(nodeName, null, time);
      return node.type = "DELETED", node;
    },
    /**
     * @param {?} self
     * @param {Object} event
     * @param {Function} elem
     * @return {?}
     */
    createFiberFromCoroutine : function(self, event, elem) {
      return event = new Element(originalEvent, self.key, event), event.type = self.handler, event.pendingProps = self, event.pendingWorkPriority = elem, event;
    },
    /**
     * @param {?} v02
     * @param {Object} i
     * @return {?}
     */
    createFiberFromYield : function(v02, i) {
      return new Element(pid, null, i);
    },
    /**
     * @param {?} self
     * @param {Object} node
     * @param {Function} expr
     * @return {?}
     */
    createFiberFromPortal : function(self, node, expr) {
      return node = new Element(tagName, self.key, node), node.pendingProps = self.children || [], node.pendingWorkPriority = expr, node.stateNode = {
        containerInfo : self.containerInfo,
        implementation : self.implementation
      }, node;
    },
    /**
     * @param {number} start
     * @param {number} depth
     * @return {?}
     */
    largerPriority : function(start, depth) {
      return start !== cl && (depth === cl || depth > start) ? start : depth;
    }
  };
  /** @type {function (): ?} */
  var _getHistoryCurrent = fargs.createHostRootFiber;
  /** @type {number} */
  var iKey = item.IndeterminateComponent;
  /** @type {number} */
  var at = item.FunctionalComponent;
  /** @type {number} */
  var payload = item.ClassComponent;
  /** @type {number} */
  var proxy = item.HostComponent;
  if ("function" == typeof Symbol && Symbol.for) {
    ObjectExpression = Symbol.for("react.coroutine");
    Literal = Symbol.for("react.yield");
  } else {
    /** @type {number} */
    ObjectExpression = 60104;
    /** @type {number} */
    Literal = 60105;
  }
  var p = {
    /**
     * @param {Array} stacktrace
     * @param {Function} handler
     * @param {Object} props
     * @return {?}
     */
    createCoroutine : function(stacktrace, handler, props) {
      var res = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
      return{
        $$typeof : ObjectExpression,
        key : null == res ? null : "" + res,
        children : stacktrace,
        /** @type {Function} */
        handler : handler,
        props : props
      };
    },
    /**
     * @param {string} x
     * @return {?}
     */
    createYield : function(x) {
      return{
        $$typeof : Literal,
        value : x
      };
    },
    /**
     * @param {Object} arg
     * @return {?}
     */
    isCoroutine : function(arg) {
      return "object" == typeof arg && (null !== arg && arg.$$typeof === ObjectExpression);
    },
    /**
     * @param {Object} arg
     * @return {?}
     */
    isYield : function(arg) {
      return "object" == typeof arg && (null !== arg && arg.$$typeof === Literal);
    },
    REACT_YIELD_TYPE : Literal,
    REACT_COROUTINE_TYPE : ObjectExpression
  };
  var LEVEL_TOP = "function" == typeof Symbol && (Symbol.for && Symbol.for("react.portal")) || 60106;
  var html = {
    /**
     * @param {?} deepDataAndEvents
     * @param {?} bracket
     * @param {boolean} recurring
     * @return {?}
     */
    createPortal : function(deepDataAndEvents, bracket, recurring) {
      var res = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
      return{
        $$typeof : LEVEL_TOP,
        key : null == res ? null : "" + res,
        children : deepDataAndEvents,
        containerInfo : bracket,
        implementation : recurring
      };
    },
    /**
     * @param {Object} o
     * @return {?}
     */
    isPortal : function(o) {
      return "object" == typeof o && (null !== o && o.$$typeof === LEVEL_TOP);
    },
    REACT_PORTAL_TYPE : LEVEL_TOP
  };
  var tn = p.REACT_COROUTINE_TYPE;
  var pl = p.REACT_YIELD_TYPE;
  var head = html.REACT_PORTAL_TYPE;
  /** @type {function (Object, ?): ?} */
  var valueOf = fargs.createWorkInProgress;
  /** @type {function (?, Text, Function): ?} */
  var dataAttr = fargs.createFiberFromElement;
  /** @type {function (?, Object, Function): ?} */
  var cb = fargs.createFiberFromFragment;
  /** @type {function (?, Object, Function): ?} */
  var call = fargs.createFiberFromText;
  /** @type {function (?, Object, Function): ?} */
  var indexOf = fargs.createFiberFromCoroutine;
  /** @type {function (?, Object): ?} */
  var trigger = fargs.createFiberFromYield;
  /** @type {function (?, Object, Function): ?} */
  var keys = fargs.createFiberFromPortal;
  /** @type {function (*): boolean} */
  var isArray = Array.isArray;
  /** @type {number} */
  var renderElement = item.FunctionalComponent;
  /** @type {number} */
  var message = item.ClassComponent;
  /** @type {number} */
  var checkbox = item.HostText;
  /** @type {number} */
  var BODY = item.HostPortal;
  /** @type {number} */
  var value = item.CoroutineComponent;
  /** @type {number} */
  var binary = item.YieldComponent;
  /** @type {number} */
  var contentType = item.Fragment;
  /** @type {number} */
  var internalThen = BASE.NoEffect;
  /** @type {number} */
  var lvl = BASE.Placement;
  /** @type {number} */
  var firstLine = BASE.Deletion;
  var ontype = "function" == typeof Symbol && Symbol.iterator;
  var Bi = "function" == typeof Symbol && (Symbol.for && Symbol.for("react.element")) || 60103;
  var serverOptions = {
    reconcileChildFibers : onSuccess(true, true),
    reconcileChildFibersInPlace : onSuccess(false, true),
    mountChildFibersInPlace : onSuccess(false, false),
    /**
     * @param {Object} e
     * @param {?} node
     * @return {undefined}
     */
    cloneChildFibers : function(e, node) {
      if (null !== e && (node.child !== e.child && replace("153")), null !== node.child) {
        e = node.child;
        var result = valueOf(e, e.pendingWorkPriority);
        result.pendingProps = e.pendingProps;
        node.child = result;
        result.return = node;
        for (;null !== e.sibling;) {
          e = e.sibling;
          result = result.sibling = valueOf(e, e.pendingWorkPriority);
          result.pendingProps = e.pendingProps;
          result.return = node;
        }
        /** @type {null} */
        result.sibling = null;
      }
    }
  };
  /** @type {number} */
  var Update = BASE.Update;
  /** @type {number} */
  var valuesLen = values.AsyncUpdates;
  /** @type {function ((Function|string), ?, ?): undefined} */
  var assertEquals = helpers.cacheContext;
  /** @type {function (Object, ?): ?} */
  var $ = helpers.getMaskedContext;
  /** @type {function (Object): ?} */
  var getter = helpers.getUnmaskedContext;
  /** @type {function (Object): ?} */
  var _nodeUID = helpers.isContextConsumer;
  /** @type {function (?, string, Function, ?): undefined} */
  var _error = util.addUpdate;
  /** @type {function (?, ?, Function, ?): undefined} */
  var flag = util.addReplaceUpdate;
  /** @type {function (?, Function, ?): undefined} */
  var storeInCache = util.addForceUpdate;
  /** @type {function (Object, Object, ?, ?, Node, ?, ?): ?} */
  var debug = util.beginUpdateQueue;
  /** @type {function (): ?} */
  var port = helpers.hasContextChanged;
  /** @type {function (?): ?} */
  var nTokens = tokens.isMounted;
  var traverseNode = serverOptions.mountChildFibersInPlace;
  var fun = serverOptions.reconcileChildFibers;
  var addElement = serverOptions.reconcileChildFibersInPlace;
  /** @type {function (Object, ?): undefined} */
  var ok = serverOptions.cloneChildFibers;
  /** @type {function (Object, Object, ?, ?, Node, ?, ?): ?} */
  var merge = util.beginUpdateQueue;
  /** @type {function (Object, ?): ?} */
  var ready = helpers.getMaskedContext;
  /** @type {function (Object): ?} */
  var report = helpers.getUnmaskedContext;
  /** @type {function (): ?} */
  var getNatural = helpers.hasContextChanged;
  /** @type {function (Object): ?} */
  var isNode = helpers.pushContextProvider;
  /** @type {function (Object, string, string): undefined} */
  var forOwn = helpers.pushTopLevelContextObject;
  /** @type {function (Object, string): undefined} */
  var complete = helpers.invalidateContextProvider;
  /** @type {number} */
  var content = item.IndeterminateComponent;
  /** @type {number} */
  var group = item.FunctionalComponent;
  /** @type {number} */
  var tag = item.ClassComponent;
  /** @type {number} */
  var source = item.HostRoot;
  /** @type {number} */
  var _id = item.HostComponent;
  /** @type {number} */
  var uri = item.HostText;
  /** @type {number} */
  var triangles = item.HostPortal;
  /** @type {number} */
  var selector = item.CoroutineComponent;
  /** @type {number} */
  var ext = item.CoroutineHandlerPhase;
  /** @type {number} */
  var iconName = item.YieldComponent;
  /** @type {number} */
  var itemText = item.Fragment;
  /** @type {number} */
  var $e = c.NoWork;
  /** @type {number} */
  var contents = c.OffscreenPriority;
  /** @type {number} */
  var effectTag = BASE.PerformedWork;
  /** @type {number} */
  var Placement = BASE.Placement;
  /** @type {number} */
  var ContentReset = BASE.ContentReset;
  /** @type {number} */
  var Err = BASE.Err;
  /** @type {number} */
  var Ref = BASE.Ref;
  var F = G.ReactCurrentOwner;
  var logMessage = serverOptions.reconcileChildFibers;
  /** @type {function (Object): undefined} */
  var cancelEvent = helpers.popContextProvider;
  /** @type {function (Object): undefined} */
  var e_prop = helpers.popTopLevelContextObject;
  /** @type {number} */
  var itemOffsetHeight = item.IndeterminateComponent;
  /** @type {number} */
  var arrayLength = item.FunctionalComponent;
  /** @type {number} */
  var compl = item.ClassComponent;
  /** @type {number} */
  var rect = item.HostRoot;
  /** @type {number} */
  var EADDRINUSE = item.HostComponent;
  /** @type {number} */
  var n = item.HostText;
  /** @type {number} */
  var ENOENT = item.HostPortal;
  /** @type {number} */
  var args = item.CoroutineComponent;
  /** @type {number} */
  var stopMethod = item.CoroutineHandlerPhase;
  /** @type {number} */
  var expected = item.YieldComponent;
  /** @type {number} */
  var itemOffsetTop = item.Fragment;
  /** @type {number} */
  var Ko = BASE.Placement;
  /** @type {number} */
  var Yo = BASE.Ref;
  /** @type {number} */
  var Go = BASE.Update;
  /** @type {number} */
  var element = c.OffscreenPriority;
  /** @type {null} */
  var HOP = null;
  /** @type {null} */
  var lastArg = null;
  var view = {
    /**
     * @param {?} styleSheet
     * @return {?}
     */
    injectInternals : function(styleSheet) {
      if ("undefined" == typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
        return false;
      }
      var css = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (!css.supportsFiber) {
        return true;
      }
      try {
        var rulesets = css.inject(styleSheet);
        HOP = async(function($1) {
          return css.onCommitFiberRoot(rulesets, $1);
        });
        lastArg = async(function($1) {
          return css.onCommitFiberUnmount(rulesets, $1);
        });
      } catch (t) {
      }
      return true;
    },
    /**
     * @param {?} walkers
     * @return {undefined}
     */
    onCommitRoot : function(walkers) {
      if ("function" == typeof HOP) {
        HOP(walkers);
      }
    },
    /**
     * @param {Object} err
     * @return {undefined}
     */
    onCommitUnmount : function(err) {
      if ("function" == typeof lastArg) {
        lastArg(err);
      }
    }
  };
  /** @type {number} */
  var line = item.ClassComponent;
  /** @type {number} */
  var error = item.HostRoot;
  /** @type {number} */
  var method = item.HostComponent;
  /** @type {number} */
  var state = item.HostText;
  /** @type {number} */
  var status = item.HostPortal;
  /** @type {number} */
  var itemWidth = item.CoroutineComponent;
  /** @type {function (string, ?, ?): undefined} */
  var tmpl = util.commitCallbacks;
  /** @type {function (Object): undefined} */
  var layout = view.onCommitUnmount;
  /** @type {number} */
  var sa = BASE.Placement;
  /** @type {number} */
  var ua = BASE.Update;
  /** @type {number} */
  var CALLBACK = BASE.Callback;
  /** @type {number} */
  var S_IFMT = BASE.ContentReset;
  /** @type {function (boolean): ?} */
  var spawn = methods.createCursor;
  /** @type {function (?): undefined} */
  var buildParams = methods.pop;
  /** @type {function (?, string): undefined} */
  var runTest = methods.push;
  var v = {};
  /** @type {number} */
  var EEXIST = item.HostComponent;
  /** @type {number} */
  var MOVE_EV = item.HostText;
  /** @type {number} */
  var ENTER_KEY = item.HostRoot;
  /** @type {number} */
  var compassResult = BASE.Deletion;
  /** @type {number} */
  var ba = BASE.Placement;
  /** @type {function (): ?} */
  var fix = fargs.createFiberFromHostInstanceForDeletion;
  /** @type {function (Object): undefined} */
  var redirect = helpers.popContextProvider;
  /** @type {function (): undefined} */
  var reset = methods.reset;
  var user = G.ReactCurrentOwner;
  /** @type {function (Object, ?): ?} */
  var dispose = fargs.createWorkInProgress;
  /** @type {function (number, number): ?} */
  var unescape = fargs.largerPriority;
  /** @type {function (?): undefined} */
  var length = view.onCommitRoot;
  /** @type {number} */
  var radio = c.NoWork;
  /** @type {number} */
  var success = c.SynchronousPriority;
  /** @type {number} */
  var err = c.TaskPriority;
  /** @type {number} */
  var timeout = c.HighPriority;
  /** @type {number} */
  var a2 = c.LowPriority;
  /** @type {number} */
  var pdataCur = c.OffscreenPriority;
  /** @type {number} */
  var jlen = values.AsyncUpdates;
  /** @type {number} */
  var h = BASE.PerformedWork;
  /** @type {number} */
  var Da = BASE.Placement;
  /** @type {number} */
  var b1 = BASE.Update;
  /** @type {number} */
  var PlacementAndUpdate = BASE.PlacementAndUpdate;
  /** @type {number} */
  var Deletion = BASE.Deletion;
  /** @type {number} */
  var d = BASE.ContentReset;
  /** @type {number} */
  var b2 = BASE.Callback;
  /** @type {number} */
  var y = BASE.Err;
  /** @type {number} */
  var mask = BASE.Ref;
  /** @type {number} */
  var HTML = item.HostRoot;
  /** @type {number} */
  var home = item.HostComponent;
  /** @type {number} */
  var originalId = item.HostPortal;
  /** @type {number} */
  var json = item.ClassComponent;
  /** @type {function (Object): ?} */
  var getPosition = util.getUpdatePriority;
  /** @type {function (): undefined} */
  var rmEvt = helpers.resetContext;
  /**
   * @param {Function} dataAndEvents
   * @return {undefined}
   */
  filter._injectFiber = function(dataAndEvents) {
    /** @type {Function} */
    parseCookies = dataAndEvents;
  };
  /** @type {function (Object, Object, Object, Object): undefined} */
  var bindDropdown = util.addTopLevelUpdate;
  /** @type {function (Object): ?} */
  var likeArray = helpers.findCurrentUnmaskedContext;
  /** @type {function (Object): ?} */
  var isString = helpers.isContextProvider;
  /** @type {function (Object, ?): ?} */
  var query = helpers.processChildContext;
  /** @type {number} */
  var children = item.HostComponent;
  /** @type {function ((Object|string)): ?} */
  var unCamelCase = tokens.findCurrentHostFiber;
  /** @type {function (Object): ?} */
  var makeIterator = tokens.findCurrentHostFiberWithNoPortals;
  filter._injectFiber(function(selector) {
    var context = likeArray(selector);
    return isString(selector) ? query(selector, context, false) : context;
  });
  /** @type {number} */
  var cn = elem.TEXT_NODE;
  /** @type {null} */
  var textProp = null;
  var qq = {
    /**
     * @param {Object} start
     * @return {?}
     */
    getOffsets : function(start) {
      /** @type {(Selection|null)} */
      var selection = window.getSelection && window.getSelection();
      if (!selection || 0 === selection.rangeCount) {
        return null;
      }
      /** @type {(Node|null)} */
      var anchorNode = selection.anchorNode;
      /** @type {number} */
      var anchorOffset = selection.anchorOffset;
      /** @type {(Node|null)} */
      var focusNode = selection.focusNode;
      /** @type {number} */
      var focusOffset = selection.focusOffset;
      /** @type {(Range|null)} */
      var ref = selection.getRangeAt(0);
      try {
        ref.startContainer.nodeType;
        ref.endContainer.nodeType;
      } catch (t) {
        return null;
      }
      /** @type {number} */
      selection = selection.anchorNode === selection.focusNode && selection.anchorOffset === selection.focusOffset ? 0 : ref.toString().length;
      /** @type {(Range|null)} */
      var range = ref.cloneRange();
      return range.selectNodeContents(start), range.setEnd(ref.startContainer, ref.startOffset), start = range.startContainer === range.endContainer && range.startOffset === range.endOffset ? 0 : range.toString().length, ref = start + selection, (selection = document.createRange()).setStart(anchorNode, anchorOffset), selection.setEnd(focusNode, focusOffset), anchorNode = selection.collapsed, {
        start : anchorNode ? ref : start,
        end : anchorNode ? start : ref
      };
    },
    /**
     * @param {Object} node
     * @param {number} t
     * @return {undefined}
     */
    setOffsets : function(node, t) {
      if (window.getSelection) {
        /** @type {(Selection|null)} */
        var selection = window.getSelection();
        var r = node[updateRemainingCount()].length;
        /** @type {number} */
        var e = Math.min(t.start, r);
        if (t = void 0 === t.end ? e : Math.min(t.end, r), !selection.extend && (e > t && (r = t, t = e, e = r)), r = traverse(node, e), node = traverse(node, t), r && node) {
          /** @type {(Range|null)} */
          var range = document.createRange();
          range.setStart(r.node, r.offset);
          selection.removeAllRanges();
          if (e > t) {
            selection.addRange(range);
            selection.extend(node.node, node.offset);
          } else {
            range.setEnd(node.node, node.offset);
            selection.addRange(range);
          }
        }
      }
    }
  };
  /** @type {number} */
  var ELEMENT_NODE_TYPE = elem.ELEMENT_NODE;
  var _self = {
    /**
     * @param {boolean} elem
     * @return {?}
     */
    hasSelectionCapabilities : function(elem) {
      var name = elem && (elem.nodeName && elem.nodeName.toLowerCase());
      return name && ("input" === name && "text" === elem.type || ("textarea" === name || "true" === elem.contentEditable));
    },
    /**
     * @return {?}
     */
    getSelectionInformation : function() {
      var expectedHashCode = isHTML();
      return{
        focusedElem : expectedHashCode,
        selectionRange : _self.hasSelectionCapabilities(expectedHashCode) ? _self.getSelection(expectedHashCode) : null
      };
    },
    /**
     * @param {Object} container
     * @return {undefined}
     */
    restoreSelection : function(container) {
      var list = isHTML();
      var c = container.focusedElem;
      if (container = container.selectionRange, list !== c && addClass(document.documentElement, c)) {
        if (_self.hasSelectionCapabilities(c)) {
          _self.setSelection(c, container);
        }
        /** @type {Array} */
        list = [];
        container = c;
        for (;container = container.parentNode;) {
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            list.push({
              element : container,
              left : container.scrollLeft,
              top : container.scrollTop
            });
          }
        }
        getName(c);
        /** @type {number} */
        c = 0;
        for (;c < list.length;c++) {
          container = list[c];
          container.element.scrollLeft = container.left;
          container.element.scrollTop = container.top;
        }
      }
    },
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    getSelection : function(expectedHashCode) {
      return("selectionStart" in expectedHashCode ? {
        start : expectedHashCode.selectionStart,
        end : expectedHashCode.selectionEnd
      } : qq.getOffsets(expectedHashCode)) || {
        start : 0,
        end : 0
      };
    },
    /**
     * @param {Object} input
     * @param {number} o
     * @return {undefined}
     */
    setSelection : function(input, o) {
      var start = o.start;
      var end = o.end;
      if (void 0 === end) {
        end = start;
      }
      if ("selectionStart" in input) {
        input.selectionStart = start;
        /** @type {number} */
        input.selectionEnd = Math.min(end, input.value.length);
      } else {
        qq.setOffsets(input, o);
      }
    }
  };
  var testRange = _self;
  /** @type {number} */
  var offsetParent = elem.ELEMENT_NODE;
  /**
   * @param {Function} index
   * @return {undefined}
   */
  render._injectFiber = function(index) {
    /** @type {Function} */
    restore = index;
  };
  /**
   * @param {(Function|string)} file
   * @return {undefined}
   */
  render._injectStack = function(file) {
    /** @type {(Function|string)} */
    template = file;
  };
  /** @type {number} */
  var theta = item.HostComponent;
  var goog = {
    /**
     * @param {string} a
     * @param {Object} b
     * @return {?}
     */
    isAncestor : function(a, b) {
      for (;b;) {
        if (a === b || a === b.alternate) {
          return true;
        }
        b = Number(b);
      }
      return false;
    },
    /** @type {function (?, ?): ?} */
    getLowestCommonAncestor : reduce,
    /**
     * @param {Object} s
     * @return {?}
     */
    getParentInstance : function(s) {
      return Number(s);
    },
    /**
     * @param {string} expectedHashCode
     * @param {Function} cb
     * @param {Object} state
     * @return {undefined}
     */
    traverseTwoPhase : function(expectedHashCode, cb, state) {
      /** @type {Array} */
      var results = [];
      for (;expectedHashCode;) {
        results.push(expectedHashCode);
        expectedHashCode = Number(expectedHashCode);
      }
      /** @type {number} */
      expectedHashCode = results.length;
      for (;0 < expectedHashCode--;) {
        cb(results[expectedHashCode], "captured", state);
      }
      /** @type {number} */
      expectedHashCode = 0;
      for (;expectedHashCode < results.length;expectedHashCode++) {
        cb(results[expectedHashCode], "bubbled", state);
      }
    },
    /**
     * @param {?} expectedHashCode
     * @param {?} i
     * @param {Function} callback
     * @param {?} arg
     * @param {Object} deepDataAndEvents
     * @return {undefined}
     */
    traverseEnterLeave : function(expectedHashCode, i, callback, arg, deepDataAndEvents) {
      var start = expectedHashCode && i ? reduce(expectedHashCode, i) : null;
      /** @type {Array} */
      var codeSegments = [];
      for (;expectedHashCode && expectedHashCode !== start;) {
        codeSegments.push(expectedHashCode);
        expectedHashCode = Number(expectedHashCode);
      }
      /** @type {Array} */
      expectedHashCode = [];
      for (;i && i !== start;) {
        expectedHashCode.push(i);
        i = Number(i);
      }
      /** @type {number} */
      i = 0;
      for (;i < codeSegments.length;i++) {
        callback(codeSegments[i], "bubbled", arg);
      }
      /** @type {number} */
      i = expectedHashCode.length;
      for (;0 < i--;) {
        callback(expectedHashCode[i], "captured", deepDataAndEvents);
      }
    }
  };
  /** @type {function (Object, string): ?} */
  var safe_add = acc.getListener;
  var set = {
    /**
     * @param {string} index
     * @return {undefined}
     */
    accumulateTwoPhaseDispatches : function(index) {
      read(index, w);
    },
    /**
     * @param {string} t
     * @return {undefined}
     */
    accumulateTwoPhaseDispatchesSkipTarget : function(t) {
      read(t, action);
    },
    /**
     * @param {string} t
     * @return {undefined}
     */
    accumulateDirectDispatches : function(t) {
      read(t, f1);
    },
    /**
     * @param {?} d
     * @param {Object} deepDataAndEvents
     * @param {string} owner
     * @param {string} list
     * @return {undefined}
     */
    accumulateEnterLeaveDispatches : function(d, deepDataAndEvents, owner, list) {
      goog.traverseEnterLeave(owner, list, equals, d, deepDataAndEvents);
    }
  };
  var node = {
    _root : null,
    _startText : null,
    _fallbackText : null
  };
  var control = {
    /**
     * @param {Object} root
     * @return {?}
     */
    initialize : function(root) {
      return node._root = root, node._startText = control.getText(), true;
    },
    /**
     * @return {undefined}
     */
    reset : function() {
      /** @type {null} */
      node._root = null;
      /** @type {null} */
      node._startText = null;
      /** @type {null} */
      node._fallbackText = null;
    },
    /**
     * @return {?}
     */
    getData : function() {
      if (node._fallbackText) {
        return node._fallbackText;
      }
      var recurring;
      var i;
      var c = node._startText;
      var l = c.length;
      var frames = control.getText();
      var length = frames.length;
      /** @type {number} */
      recurring = 0;
      for (;recurring < l && c[recurring] === frames[recurring];recurring++) {
      }
      /** @type {number} */
      var e = l - recurring;
      /** @type {number} */
      i = 1;
      for (;i <= e && c[l - i] === frames[length - i];i++) {
      }
      return node._fallbackText = frames.slice(recurring, 1 < i ? 1 - i : void 0), node._fallbackText;
    },
    /**
     * @return {?}
     */
    getText : function() {
      return "value" in node._root ? node._root.value : node._root[updateRemainingCount()];
    }
  };
  var button = control;
  /** @type {Array.<string>} */
  var codeSegments = "dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" ");
  var oEventPseudo = {
    type : null,
    target : null,
    currentTarget : foo.thatReturnsNull,
    eventPhase : null,
    bubbles : null,
    cancelable : null,
    /**
     * @param {Event} event
     * @return {?}
     */
    timeStamp : function(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented : null,
    isTrusted : null
  };
  fn(Event.prototype, {
    /**
     * @return {undefined}
     */
    preventDefault : function() {
      /** @type {boolean} */
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      if (event) {
        if (event.preventDefault) {
          event.preventDefault();
        } else {
          if ("unknown" != typeof event.returnValue) {
            /** @type {boolean} */
            event.returnValue = false;
          }
        }
        this.isDefaultPrevented = foo.thatReturnsTrue;
      }
    },
    /**
     * @return {undefined}
     */
    stopPropagation : function() {
      var event = this.nativeEvent;
      if (event) {
        if (event.stopPropagation) {
          event.stopPropagation();
        } else {
          if ("unknown" != typeof event.cancelBubble) {
            /** @type {boolean} */
            event.cancelBubble = true;
          }
        }
        this.isPropagationStopped = foo.thatReturnsTrue;
      }
    },
    /**
     * @return {undefined}
     */
    persist : function() {
      this.isPersistent = foo.thatReturnsTrue;
    },
    isPersistent : foo.thatReturnsFalse,
    /**
     * @return {undefined}
     */
    destructor : function() {
      var d;
      var i = this.constructor.Interface;
      for (d in i) {
        /** @type {null} */
        this[d] = null;
      }
      /** @type {number} */
      i = 0;
      for (;i < codeSegments.length;i++) {
        /** @type {null} */
        this[codeSegments[i]] = null;
      }
    }
  });
  Event.Interface = oEventPseudo;
  /**
   * @param {Function} name
   * @param {?} opt_attributes
   * @return {undefined}
   */
  Event.augmentClass = function(name, opt_attributes) {
    /**
     * @return {undefined}
     */
    function ctor() {
    }
    ctor.prototype = this.prototype;
    var obj = new ctor;
    fn(obj, name.prototype);
    name.prototype = obj;
    /** @type {Function} */
    name.prototype.constructor = name;
    name.Interface = fn({}, this.Interface, opt_attributes);
    name.augmentClass = this.augmentClass;
    func(name);
  };
  func(Event);
  Event.augmentClass(path, {
    data : null
  });
  Event.augmentClass(map, {
    data : null
  });
  /** @type {Array} */
  var restricted = [9, 13, 27, 32];
  var inst = Block.canUseDOM && "CompositionEvent" in window;
  /** @type {null} */
  var _ref = null;
  if (Block.canUseDOM) {
    if ("documentMode" in document) {
      _ref = document.documentMode;
    }
  }
  var _s;
  if (_s = Block.canUseDOM && ("TextEvent" in window && !_ref)) {
    var exports = window.opera;
    /** @type {boolean} */
    _s = !("object" == typeof exports && ("function" == typeof exports.version && 12 >= parseInt(exports.version(), 10)));
  }
  var extraMap = _s;
  var isFunction = Block.canUseDOM && (!inst || _ref && (8 < _ref && 11 >= _ref));
  /** @type {string} */
  var EOL = String.fromCharCode(32);
  var options = {
    beforeInput : {
      phasedRegistrationNames : {
        bubbled : "onBeforeInput",
        captured : "onBeforeInputCapture"
      },
      dependencies : ["topCompositionEnd", "topKeyPress", "topTextInput", "topPaste"]
    },
    compositionEnd : {
      phasedRegistrationNames : {
        bubbled : "onCompositionEnd",
        captured : "onCompositionEndCapture"
      },
      dependencies : "topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")
    },
    compositionStart : {
      phasedRegistrationNames : {
        bubbled : "onCompositionStart",
        captured : "onCompositionStartCapture"
      },
      dependencies : "topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")
    },
    compositionUpdate : {
      phasedRegistrationNames : {
        bubbled : "onCompositionUpdate",
        captured : "onCompositionUpdateCapture"
      },
      dependencies : "topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")
    }
  };
  /** @type {boolean} */
  var eol = false;
  /** @type {boolean} */
  var $col = false;
  var BeforeInputEventPlugin = {
    eventTypes : options,
    /**
     * @param {Object} name
     * @param {Object} f
     * @param {Object} k
     * @param {Object} e
     * @return {?}
     */
    extractEvents : function(name, f, k, e) {
      var v;
      if (inst) {
        t: {
          switch(name) {
            case "topCompositionStart":
              var index = options.compositionStart;
              break t;
            case "topCompositionEnd":
              index = options.compositionEnd;
              break t;
            case "topCompositionUpdate":
              index = options.compositionUpdate;
              break t;
          }
          index = void 0;
        }
      } else {
        if ($col) {
          if (startsWith(name, k)) {
            index = options.compositionEnd;
          }
        } else {
          if ("topKeyDown" === name) {
            if (229 === k.keyCode) {
              index = options.compositionStart;
            }
          }
        }
      }
      return index ? (isFunction && ($col || index !== options.compositionStart ? index === options.compositionEnd && ($col && (v = button.getData())) : $col = button.initialize(e)), index = path.getPooled(index, f, k, e), v ? index.data = v : null !== (v = listener(k)) && (index.data = v), set.accumulateTwoPhaseDispatches(index), v = index) : v = null, (name = extraMap ? event(name, k) : handleClick(name, k)) ? (f = map.getPooled(options.beforeInput, f, k, e), f.data = name, set.accumulateTwoPhaseDispatches(f)) :
      f = null, [v, f];
    }
  };
  var defaults = {
    color : true,
    date : true,
    datetime : true,
    "datetime-local" : true,
    email : true,
    month : true,
    number : true,
    password : true,
    range : true,
    search : true,
    tel : true,
    text : true,
    time : true,
    url : true,
    week : true
  };
  var events = {
    change : {
      phasedRegistrationNames : {
        bubbled : "onChange",
        captured : "onChangeCapture"
      },
      dependencies : "topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")
    }
  };
  /** @type {null} */
  var oElement = null;
  /** @type {null} */
  var b = null;
  /** @type {boolean} */
  var _isInputEventSupported = false;
  if (Block.canUseDOM) {
    _isInputEventSupported = load("input") && (!document.documentMode || 9 < document.documentMode);
  }
  var extractEvents = {
    eventTypes : events,
    _isInputEventSupported : _isInputEventSupported,
    /**
     * @param {string} value
     * @param {string} i
     * @param {Object} nativeEvent
     * @param {Object} obj
     * @return {?}
     */
    extractEvents : function(value, i, nativeEvent, obj) {
      var elem = i ? reserved.getNodeFromInstance(i) : window;
      var name = elem.nodeName && elem.nodeName.toLowerCase();
      if ("select" === name || "input" === name && "file" === elem.type) {
        /** @type {function (string, string): ?} */
        var f = seal
      } else {
        if (setAttr(elem)) {
          if (_isInputEventSupported) {
            /** @type {function (string, string): ?} */
            f = toggleClass;
          } else {
            /** @type {function (string): ?} */
            f = mode;
            /** @type {function (string, Function, ?): undefined} */
            var callback = listen;
          }
        } else {
          if (!!(name = elem.nodeName)) {
            if (!("input" !== name.toLowerCase())) {
              if (!("checkbox" !== elem.type && "radio" !== elem.type)) {
                /** @type {function (string, string): ?} */
                f = removeClass;
              }
            }
          }
        }
      }
      if (f && (f = f(value, i))) {
        return format(f, nativeEvent, obj);
      }
      if (callback) {
        callback(value, elem, i);
      }
      if ("topBlur" === value) {
        if (null != i) {
          if (value = i._wrapperState || elem._wrapperState) {
            if (value.controlled) {
              if ("number" === elem.type) {
                /** @type {string} */
                value = "" + elem.value;
                if (elem.getAttribute("value") !== value) {
                  elem.setAttribute("value", value);
                }
              }
            }
          }
        }
      }
    }
  };
  Event.augmentClass(Class, {
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    view : function(expectedHashCode) {
      return expectedHashCode.view ? expectedHashCode.view : (expectedHashCode = find(expectedHashCode)).window === expectedHashCode ? expectedHashCode : (expectedHashCode = expectedHashCode.ownerDocument) ? expectedHashCode.defaultView || expectedHashCode.parentWindow : window;
    },
    /**
     * @param {Event} params
     * @return {?}
     */
    detail : function(params) {
      return params.detail || 0;
    }
  });
  var _ref1 = {
    Alt : "altKey",
    Control : "ctrlKey",
    Meta : "metaKey",
    Shift : "shiftKey"
  };
  Class.augmentClass(val, {
    screenX : null,
    screenY : null,
    clientX : null,
    clientY : null,
    pageX : null,
    pageY : null,
    ctrlKey : null,
    shiftKey : null,
    altKey : null,
    metaKey : null,
    /** @type {function (): ?} */
    getModifierState : getModifierState,
    button : null,
    buttons : null,
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    relatedTarget : function(expectedHashCode) {
      return expectedHashCode.relatedTarget || (expectedHashCode.fromElement === expectedHashCode.srcElement ? expectedHashCode.toElement : expectedHashCode.fromElement);
    }
  });
  var $scope = {
    mouseEnter : {
      registrationName : "onMouseEnter",
      dependencies : ["topMouseOut", "topMouseOver"]
    },
    mouseLeave : {
      registrationName : "onMouseLeave",
      dependencies : ["topMouseOut", "topMouseOver"]
    }
  };
  var EnterLeaveEventPlugin = {
    eventTypes : $scope,
    /**
     * @param {string} node
     * @param {string} f
     * @param {Object} nativeEvent
     * @param {Object} obj
     * @return {?}
     */
    extractEvents : function(node, f, nativeEvent, obj) {
      if ("topMouseOver" === node && (nativeEvent.relatedTarget || nativeEvent.fromElement) || "topMouseOut" !== node && "topMouseOver" !== node) {
        return null;
      }
      var target = obj.window === obj ? obj : (target = obj.ownerDocument) ? target.defaultView || target.parentWindow : window;
      if ("topMouseOut" === node ? (node = f, f = (f = nativeEvent.relatedTarget || nativeEvent.toElement) ? reserved.getClosestInstanceFromNode(f) : null) : node = null, node === f) {
        return null;
      }
      var elem = null == node ? target : reserved.getNodeFromInstance(node);
      target = null == f ? target : reserved.getNodeFromInstance(f);
      var event = val.getPooled($scope.mouseLeave, node, nativeEvent, obj);
      return event.type = "mouseleave", event.target = elem, event.relatedTarget = target, nativeEvent = val.getPooled($scope.mouseEnter, f, nativeEvent, obj), nativeEvent.type = "mouseenter", nativeEvent.target = target, nativeEvent.relatedTarget = elem, set.accumulateEnterLeaveDispatches(event, nativeEvent, node, f), [event, nativeEvent];
    }
  };
  /** @type {number} */
  var num = elem.DOCUMENT_NODE;
  var Hs = Block.canUseDOM && ("documentMode" in document && 11 >= document.documentMode);
  var conf = {
    select : {
      phasedRegistrationNames : {
        bubbled : "onSelect",
        captured : "onSelectCapture"
      },
      dependencies : "topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")
    }
  };
  /** @type {null} */
  var target = null;
  /** @type {null} */
  var name = null;
  /** @type {null} */
  var version = null;
  /** @type {boolean} */
  var Ws = false;
  var isAncestor = el.isListeningToAllDependencies;
  var SelectEventPlugin = {
    eventTypes : conf,
    /**
     * @param {string} dataAndEvents
     * @param {boolean} f
     * @param {Object} nativeEvent
     * @param {Object} obj
     * @return {?}
     */
    extractEvents : function(dataAndEvents, f, nativeEvent, obj) {
      var el = obj.window === obj ? obj.document : obj.nodeType === num ? obj : obj.ownerDocument;
      if (!el || !isAncestor("onSelect", el)) {
        return null;
      }
      switch(el = f ? reserved.getNodeFromInstance(f) : window, dataAndEvents) {
        case "topFocus":
          if (setAttr(el) || "true" === el.contentEditable) {
            target = el;
            /** @type {boolean} */
            name = f;
            /** @type {null} */
            version = null;
          }
          break;
        case "topBlur":
          /** @type {null} */
          version = name = target = null;
          break;
        case "topMouseDown":
          /** @type {boolean} */
          Ws = true;
          break;
        case "topContextMenu":
        ;
        case "topMouseUp":
          return Ws = false, select(nativeEvent, obj);
        case "topSelectionChange":
          if (Hs) {
            break;
          }
        ;
        case "topKeyDown":
        ;
        case "topKeyUp":
          return select(nativeEvent, obj);
      }
      return null;
    }
  };
  Event.augmentClass(condition, {
    animationName : null,
    elapsedTime : null,
    pseudoElement : null
  });
  Event.augmentClass(fire, {
    /**
     * @param {Window} e
     * @return {?}
     */
    clipboardData : function(e) {
      return "clipboardData" in e ? e.clipboardData : window.clipboardData;
    }
  });
  Class.augmentClass(attach, {
    relatedTarget : null
  });
  var key = {
    Esc : "Escape",
    Spacebar : " ",
    Left : "ArrowLeft",
    Up : "ArrowUp",
    Right : "ArrowRight",
    Down : "ArrowDown",
    Del : "Delete",
    Win : "OS",
    Menu : "ContextMenu",
    Apps : "ContextMenu",
    Scroll : "ScrollLock",
    MozPrintableKey : "Unidentified"
  };
  var keytable = {
    8 : "Backspace",
    9 : "Tab",
    12 : "Clear",
    13 : "Enter",
    16 : "Shift",
    17 : "Control",
    18 : "Alt",
    19 : "Pause",
    20 : "CapsLock",
    27 : "Escape",
    32 : " ",
    33 : "PageUp",
    34 : "PageDown",
    35 : "End",
    36 : "Home",
    37 : "ArrowLeft",
    38 : "ArrowUp",
    39 : "ArrowRight",
    40 : "ArrowDown",
    45 : "Insert",
    46 : "Delete",
    112 : "F1",
    113 : "F2",
    114 : "F3",
    115 : "F4",
    116 : "F5",
    117 : "F6",
    118 : "F7",
    119 : "F8",
    120 : "F9",
    121 : "F10",
    122 : "F11",
    123 : "F12",
    144 : "NumLock",
    145 : "ScrollLock",
    224 : "Meta"
  };
  Class.augmentClass(match, {
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    key : function(expectedHashCode) {
      if (expectedHashCode.key) {
        var j = key[expectedHashCode.key] || expectedHashCode.key;
        if ("Unidentified" !== j) {
          return j;
        }
      }
      return "keypress" === expectedHashCode.type ? 13 === (expectedHashCode = fixEvent(expectedHashCode)) ? "Enter" : String.fromCharCode(expectedHashCode) : "keydown" === expectedHashCode.type || "keyup" === expectedHashCode.type ? keytable[expectedHashCode.keyCode] || "Unidentified" : "";
    },
    location : null,
    ctrlKey : null,
    shiftKey : null,
    altKey : null,
    metaKey : null,
    repeat : null,
    locale : null,
    /** @type {function (): ?} */
    getModifierState : getModifierState,
    /**
     * @param {Object} e
     * @return {?}
     */
    charCode : function(e) {
      return "keypress" === e.type ? fixEvent(e) : 0;
    },
    /**
     * @param {Object} e
     * @return {?}
     */
    keyCode : function(e) {
      return "keydown" === e.type || "keyup" === e.type ? e.keyCode : 0;
    },
    /**
     * @param {Object} e
     * @return {?}
     */
    which : function(e) {
      return "keypress" === e.type ? fixEvent(e) : "keydown" === e.type || "keyup" === e.type ? e.keyCode : 0;
    }
  });
  val.augmentClass(emit, {
    dataTransfer : null
  });
  Class.augmentClass(post, {
    touches : null,
    targetTouches : null,
    changedTouches : null,
    altKey : null,
    metaKey : null,
    ctrlKey : null,
    shiftKey : null,
    /** @type {function (): ?} */
    getModifierState : getModifierState
  });
  Event.augmentClass(wrap, {
    propertyName : null,
    elapsedTime : null,
    pseudoElement : null
  });
  val.augmentClass(last, {
    /**
     * @param {Object} event
     * @return {?}
     */
    deltaX : function(event) {
      return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
    },
    /**
     * @param {Object} event
     * @return {?}
     */
    deltaY : function(event) {
      return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
    },
    deltaZ : null,
    deltaMode : null
  });
  var groups = {};
  var comparisons = {};
  "abort animationEnd animationIteration animationStart blur cancel canPlay canPlayThrough click close contextMenu copy cut doubleClick drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error focus input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing progress rateChange reset scroll seeked seeking stalled submit suspend timeUpdate toggle touchCancel touchEnd touchMove touchStart transitionEnd volumeChange waiting wheel".split(" ").forEach(function(k) {
    var i = k[0].toUpperCase() + k.slice(1);
    /** @type {string} */
    var key = "on" + i;
    key = {
      phasedRegistrationNames : {
        bubbled : key,
        captured : key + "Capture"
      },
      dependencies : [i = "top" + i]
    };
    groups[k] = key;
    comparisons[i] = key;
  });
  var SimpleEventPlugin = {
    eventTypes : groups,
    /**
     * @param {string} index
     * @param {Object} f
     * @param {Object} nativeEvent
     * @param {Object} obj
     * @return {?}
     */
    extractEvents : function(index, f, nativeEvent, obj) {
      var t = comparisons[index];
      if (!t) {
        return null;
      }
      switch(index) {
        case "topAbort":
        ;
        case "topCancel":
        ;
        case "topCanPlay":
        ;
        case "topCanPlayThrough":
        ;
        case "topClose":
        ;
        case "topDurationChange":
        ;
        case "topEmptied":
        ;
        case "topEncrypted":
        ;
        case "topEnded":
        ;
        case "topError":
        ;
        case "topInput":
        ;
        case "topInvalid":
        ;
        case "topLoad":
        ;
        case "topLoadedData":
        ;
        case "topLoadedMetadata":
        ;
        case "topLoadStart":
        ;
        case "topPause":
        ;
        case "topPlay":
        ;
        case "topPlaying":
        ;
        case "topProgress":
        ;
        case "topRateChange":
        ;
        case "topReset":
        ;
        case "topSeeked":
        ;
        case "topSeeking":
        ;
        case "topStalled":
        ;
        case "topSubmit":
        ;
        case "topSuspend":
        ;
        case "topTimeUpdate":
        ;
        case "topToggle":
        ;
        case "topVolumeChange":
        ;
        case "topWaiting":
          /** @type {function (Object, Node, Object, Object): ?} */
          var test = Event;
          break;
        case "topKeyPress":
          if (0 === fixEvent(nativeEvent)) {
            return null;
          }
        ;
        case "topKeyDown":
        ;
        case "topKeyUp":
          /** @type {function (?, ?, ?, ?): ?} */
          test = match;
          break;
        case "topBlur":
        ;
        case "topFocus":
          /** @type {function (?, ?, ?, ?): ?} */
          test = attach;
          break;
        case "topClick":
          if (2 === nativeEvent.button) {
            return null;
          }
        ;
        case "topDoubleClick":
        ;
        case "topMouseDown":
        ;
        case "topMouseMove":
        ;
        case "topMouseUp":
        ;
        case "topMouseOut":
        ;
        case "topMouseOver":
        ;
        case "topContextMenu":
          /** @type {function (?, ?, ?, ?): ?} */
          test = val;
          break;
        case "topDrag":
        ;
        case "topDragEnd":
        ;
        case "topDragEnter":
        ;
        case "topDragExit":
        ;
        case "topDragLeave":
        ;
        case "topDragOver":
        ;
        case "topDragStart":
        ;
        case "topDrop":
          /** @type {function (?, ?, ?, ?): ?} */
          test = emit;
          break;
        case "topTouchCancel":
        ;
        case "topTouchEnd":
        ;
        case "topTouchMove":
        ;
        case "topTouchStart":
          /** @type {function (?, ?, ?, ?): ?} */
          test = post;
          break;
        case "topAnimationEnd":
        ;
        case "topAnimationIteration":
        ;
        case "topAnimationStart":
          /** @type {function (?, ?, ?, ?): ?} */
          test = condition;
          break;
        case "topTransitionEnd":
          /** @type {function (?, ?, ?, ?): ?} */
          test = wrap;
          break;
        case "topScroll":
          /** @type {function (?, ?, ?, ?): ?} */
          test = Class;
          break;
        case "topWheel":
          /** @type {function (?, ?, ?, ?): ?} */
          test = last;
          break;
        case "topCopy":
        ;
        case "topCut":
        ;
        case "topPaste":
          /** @type {function (?, ?, ?, ?): ?} */
          test = fire;
      }
      return test || replace("86", index), index = test.getPooled(t, f, nativeEvent, obj), set.accumulateTwoPhaseDispatches(index), index;
    }
  };
  utils.setHandleTopLevel(el.handleTopLevel);
  acc.injection.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));
  common.injection.injectComponentTree(reserved);
  acc.injection.injectEventPluginsByName({
    SimpleEventPlugin : SimpleEventPlugin,
    EnterLeaveEventPlugin : EnterLeaveEventPlugin,
    ChangeEventPlugin : extractEvents,
    SelectEventPlugin : SelectEventPlugin,
    BeforeInputEventPlugin : BeforeInputEventPlugin
  });
  /** @type {number} */
  var MUST_USE_PROPERTY = app.injection.MUST_USE_PROPERTY;
  /** @type {number} */
  var url = app.injection.HAS_BOOLEAN_VALUE;
  /** @type {number} */
  var minIdx = app.injection.HAS_NUMERIC_VALUE;
  /** @type {number} */
  var s = app.injection.HAS_POSITIVE_NUMERIC_VALUE;
  /** @type {number} */
  var FALSE = app.injection.HAS_STRING_BOOLEAN_VALUE;
  var r20 = {
    Properties : {
      allowFullScreen : url,
      allowTransparency : FALSE,
      async : url,
      autoPlay : url,
      capture : url,
      checked : MUST_USE_PROPERTY | url,
      cols : s,
      contentEditable : FALSE,
      controls : url,
      default : url,
      defer : url,
      disabled : url,
      download : app.injection.HAS_OVERLOADED_BOOLEAN_VALUE,
      draggable : FALSE,
      formNoValidate : url,
      hidden : url,
      loop : url,
      multiple : MUST_USE_PROPERTY | url,
      muted : MUST_USE_PROPERTY | url,
      noValidate : url,
      open : url,
      playsInline : url,
      readOnly : url,
      required : url,
      reversed : url,
      rows : s,
      rowSpan : minIdx,
      scoped : url,
      seamless : url,
      selected : MUST_USE_PROPERTY | url,
      size : s,
      start : minIdx,
      span : s,
      spellCheck : FALSE,
      style : 0,
      itemScope : url,
      acceptCharset : 0,
      className : 0,
      htmlFor : 0,
      httpEquiv : 0,
      value : FALSE
    },
    DOMAttributeNames : {
      acceptCharset : "accept-charset",
      className : "class",
      htmlFor : "for",
      httpEquiv : "http-equiv"
    },
    DOMMutationMethods : {
      /**
       * @param {?} expectedHashCode
       * @param {string} value
       * @return {?}
       */
      value : function(expectedHashCode, value) {
        if (null == value) {
          return expectedHashCode.removeAttribute("value");
        }
        if ("number" !== expectedHashCode.type || false === expectedHashCode.hasAttribute("value")) {
          expectedHashCode.setAttribute("value", "" + value);
        } else {
          if (expectedHashCode.validity) {
            if (!expectedHashCode.validity.badInput) {
              if (expectedHashCode.ownerDocument.activeElement !== expectedHashCode) {
                expectedHashCode.setAttribute("value", "" + value);
              }
            }
          }
        }
      }
    }
  };
  /** @type {number} */
  var HAS_STRING_BOOLEAN_VALUE = app.injection.HAS_STRING_BOOLEAN_VALUE;
  var xml = {
    xlink : "http://www.w3.org/1999/xlink",
    xml : "http://www.w3.org/XML/1998/namespace"
  };
  var rreturn = {
    Properties : {
      autoReverse : HAS_STRING_BOOLEAN_VALUE,
      externalResourcesRequired : HAS_STRING_BOOLEAN_VALUE,
      preserveAlpha : HAS_STRING_BOOLEAN_VALUE
    },
    DOMAttributeNames : {
      autoReverse : "autoReverse",
      externalResourcesRequired : "externalResourcesRequired",
      preserveAlpha : "preserveAlpha"
    },
    DOMAttributeNamespaces : {
      xlinkActuate : xml.xlink,
      xlinkArcrole : xml.xlink,
      xlinkHref : xml.xlink,
      xlinkRole : xml.xlink,
      xlinkShow : xml.xlink,
      xlinkTitle : xml.xlink,
      xlinkType : xml.xlink,
      xmlBase : xml.xml,
      xmlLang : xml.xml,
      xmlSpace : xml.xml
    }
  };
  /** @type {RegExp} */
  var expectedHashCode = /[\-\:]([a-z])/g;
  "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode x-height xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xmlns:xlink xml:lang xml:space".split(" ").forEach(function(data) {
    /** @type {string} */
    var unlock = data.replace(expectedHashCode, pdataOld);
    /** @type {number} */
    rreturn.Properties[unlock] = 0;
    /** @type {string} */
    rreturn.DOMAttributeNames[unlock] = data;
  });
  app.injection.injectDOMPropertyConfig(r20);
  app.injection.injectDOMPropertyConfig(rreturn);
  /** @type {function (?): ?} */
  var docs = view.injectInternals;
  /** @type {number} */
  var ELEMENT_NODE = elem.ELEMENT_NODE;
  /** @type {number} */
  var TEXT_NODE = elem.TEXT_NODE;
  /** @type {number} */
  var string = elem.COMMENT_NODE;
  /** @type {number} */
  var nodeType = elem.DOCUMENT_NODE;
  /** @type {number} */
  var nType = elem.DOCUMENT_FRAGMENT_NODE;
  /** @type {string} */
  var attribute = app.ROOT_ATTRIBUTE_NAME;
  /** @type {function (string, string): ?} */
  var eq = $$.getChildNamespace;
  /** @type {function (Object, ?, Object, string): ?} */
  var create = doc.createElement;
  /** @type {function (boolean, Object): ?} */
  var eachEvent = doc.createTextNode;
  /** @type {function (Element, ?, Object, ?): undefined} */
  var hasKey = doc.setInitialProperties;
  /** @type {function (string, string, Object, Object, ?): ?} */
  var isArraylike = doc.diffProperties;
  /** @type {function (Element, Array, string, (Error|string), ?): undefined} */
  var pred = doc.updateProperties;
  /** @type {function (Element, ?, Object, Array, Object): ?} */
  var ondata = doc.diffHydratedProperties;
  /** @type {function (Node, ?): ?} */
  var $doc = doc.diffHydratedText;
  /** @type {function (): undefined} */
  var mixin = doc.warnForDeletedHydratableElement;
  /** @type {function (): undefined} */
  var store = doc.warnForDeletedHydratableText;
  /** @type {function (): undefined} */
  var __extends = doc.warnForInsertedHydratedElement;
  /** @type {function (): undefined} */
  var flatten = doc.warnForInsertedHydratedText;
  /** @type {function (Object, Object): undefined} */
  var mk = reserved.precacheFiberNode;
  /** @type {function (Object, ?): undefined} */
  var setData = reserved.updateFiberProps;
  container.injection.injectFiberControlledHostComponent(doc);
  render._injectFiber(function(boundary) {
    return client.findHostInstance(boundary);
  });
  /** @type {null} */
  var enabled = null;
  /** @type {null} */
  var root = null;
  var client = function(options) {
    /** @type {function (?): ?} */
    var inverse = options.getPublicInstance;
    var h = (options = ajax(options)).scheduleUpdate;
    var $ = options.getPriorityContext;
    return{
      /**
       * @param {Object} parent
       * @return {?}
       */
      createContainer : function(parent) {
        var current = _getHistoryCurrent();
        return parent = {
          current : current,
          containerInfo : parent,
          isScheduled : false,
          nextScheduledRoot : null,
          context : null,
          pendingContext : null
        }, current.stateNode = parent;
      },
      /**
       * @param {Object} node
       * @param {Object} data
       * @param {Object} value
       * @param {Object} key
       * @return {undefined}
       */
      updateContainer : function(node, data, value, key) {
        var doc = data.current;
        value = filter(value);
        if (null === data.context) {
          /** @type {Object} */
          data.context = value;
        } else {
          /** @type {Object} */
          data.pendingContext = value;
        }
        /** @type {Object} */
        data = key;
        key = $(doc, enableAsyncSubtreeAPI.enableAsyncSubtreeAPI && (null != node && (null != node.type && (null != node.type.prototype && true === node.type.prototype.unstable_isAsyncReactComponent))));
        bindDropdown(doc, node = {
          element : node
        }, void 0 === data ? null : data, key);
        h(doc, key);
      },
      batchedUpdates : options.batchedUpdates,
      unbatchedUpdates : options.unbatchedUpdates,
      deferredUpdates : options.deferredUpdates,
      flushSync : options.flushSync,
      /**
       * @param {Object} view
       * @return {?}
       */
      getPublicRootInstance : function(view) {
        if (!(view = view.current).child) {
          return null;
        }
        switch(view.child.tag) {
          case children:
            return inverse(view.child.stateNode);
          default:
            return view.child.stateNode;
        }
      },
      /**
       * @param {(Object|string)} str
       * @return {?}
       */
      findHostInstance : function(str) {
        return null === (str = unCamelCase(str)) ? null : str.stateNode;
      },
      /**
       * @param {Error} callback
       * @return {?}
       */
      findHostInstanceWithNoPortals : function(callback) {
        return null === (callback = makeIterator(callback)) ? null : callback.stateNode;
      }
    };
  }({
    /**
     * @param {Object} a
     * @return {?}
     */
    getRootHostContext : function(a) {
      if (a.nodeType === nodeType) {
        a = (a = a.documentElement) ? a.namespaceURI : eq(null, "");
      } else {
        var el = a.nodeType === string ? a.parentNode : a;
        a = el.namespaceURI || null;
        el = el.tagName;
        a = eq(a, el);
      }
      return a;
    },
    /**
     * @param {string} a
     * @param {string} walkers
     * @return {?}
     */
    getChildHostContext : function(a, walkers) {
      return eq(a, walkers);
    },
    /**
     * @param {?} dataAndEvents
     * @return {?}
     */
    getPublicInstance : function(dataAndEvents) {
      return dataAndEvents;
    },
    /**
     * @return {undefined}
     */
    prepareForCommit : function() {
      enabled = el.isEnabled();
      root = testRange.getSelectionInformation();
      el.setEnabled(false);
    },
    /**
     * @return {undefined}
     */
    resetAfterCommit : function() {
      testRange.restoreSelection(root);
      /** @type {null} */
      root = null;
      el.setEnabled(enabled);
      /** @type {null} */
      enabled = null;
    },
    /**
     * @param {Object} el
     * @param {Object} attributes
     * @param {?} data
     * @param {string} args
     * @param {Object} name
     * @return {?}
     */
    createInstance : function(el, attributes, data, args, name) {
      return el = create(el, attributes, data, args), mk(name, el), setData(el, attributes), el;
    },
    /**
     * @param {Object} index
     * @param {Node} i
     * @return {undefined}
     */
    appendInitialChild : function(index, i) {
      index.appendChild(i);
    },
    /**
     * @param {boolean} other
     * @param {?} type
     * @param {Object} field
     * @param {?} data
     * @return {?}
     */
    finalizeInitialChildren : function(other, type, field, data) {
      hasKey(other, type, field, data);
      t: {
        switch(type) {
          case "button":
          ;
          case "input":
          ;
          case "select":
          ;
          case "textarea":
            /** @type {boolean} */
            other = !!field.autoFocus;
            break t;
        }
        /** @type {boolean} */
        other = false;
      }
      return other;
    },
    /**
     * @param {string} elems
     * @param {string} o
     * @param {Object} v
     * @param {Object} klass
     * @param {?} data
     * @return {?}
     */
    prepareUpdate : function(elems, o, v, klass, data) {
      return isArraylike(elems, o, v, klass, data);
    },
    /**
     * @param {Element} searchElement
     * @return {undefined}
     */
    commitMount : function(searchElement) {
      searchElement.focus();
    },
    /**
     * @param {Element} node
     * @param {Object} key
     * @param {string} obj
     * @param {string} deepDataAndEvents
     * @param {?} elem
     * @return {undefined}
     */
    commitUpdate : function(node, key, obj, deepDataAndEvents, elem) {
      setData(node, elem);
      pred(node, key, obj, deepDataAndEvents, elem);
    },
    /**
     * @param {string} object
     * @param {Object} value
     * @return {?}
     */
    shouldSetTextContent : function(object, value) {
      return "textarea" === object || ("string" == typeof value.children || ("number" == typeof value.children || "object" == typeof value.dangerouslySetInnerHTML && (null !== value.dangerouslySetInnerHTML && "string" == typeof value.dangerouslySetInnerHTML.__html)));
    },
    /**
     * @param {HTMLElement} elem
     * @return {undefined}
     */
    resetTextContent : function(elem) {
      /** @type {string} */
      elem.textContent = "";
    },
    /**
     * @param {?} content
     * @param {Object} defaults
     * @return {?}
     */
    shouldDeprioritizeSubtree : function(content, defaults) {
      return!!defaults.hidden;
    },
    /**
     * @param {Object} atts
     * @param {Object} fn
     * @param {string} value
     * @param {Object} n
     * @return {?}
     */
    createTextInstance : function(atts, fn, value, n) {
      return atts = eachEvent(atts, fn), mk(n, atts), atts;
    },
    /**
     * @param {Node} elem
     * @param {?} dataAndEvents
     * @param {?} value
     * @return {undefined}
     */
    commitTextUpdate : function(elem, dataAndEvents, value) {
      elem.nodeValue = value;
    },
    /**
     * @param {Node} t
     * @param {Node} el
     * @return {undefined}
     */
    appendChild : function(t, el) {
      t.appendChild(el);
    },
    /**
     * @param {Node} el
     * @param {Element} i
     * @return {undefined}
     */
    appendChildToContainer : function(el, i) {
      if (el.nodeType === string) {
        el.parentNode.insertBefore(i, el);
      } else {
        el.appendChild(i);
      }
    },
    /**
     * @param {Element} t
     * @param {Element} el
     * @param {Element} text
     * @return {undefined}
     */
    insertBefore : function(t, el, text) {
      t.insertBefore(el, text);
    },
    /**
     * @param {Node} node
     * @param {Element} child
     * @param {Element} s
     * @return {undefined}
     */
    insertInContainerBefore : function(node, child, s) {
      if (node.nodeType === string) {
        node.parentNode.insertBefore(child, s);
      } else {
        node.insertBefore(child, s);
      }
    },
    /**
     * @param {Object} obj
     * @param {Object} child
     * @return {undefined}
     */
    removeChild : function(obj, child) {
      obj.removeChild(child);
    },
    /**
     * @param {Node} node
     * @param {Object} o
     * @return {undefined}
     */
    removeChildFromContainer : function(node, o) {
      if (node.nodeType === string) {
        node.parentNode.removeChild(o);
      } else {
        node.removeChild(o);
      }
    },
    /**
     * @param {Node} node
     * @param {?} dataAndEvents
     * @return {?}
     */
    canHydrateInstance : function(node, dataAndEvents) {
      return node.nodeType === ELEMENT_NODE && dataAndEvents === node.nodeName.toLowerCase();
    },
    /**
     * @param {?} result
     * @param {?} g
     * @return {?}
     */
    canHydrateTextInstance : function(result, g) {
      return "" !== g && result.nodeType === TEXT_NODE;
    },
    /**
     * @param {Object} node
     * @return {?}
     */
    getNextHydratableSibling : function(node) {
      node = node.nextSibling;
      for (;node && (node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE);) {
        node = node.nextSibling;
      }
      return node;
    },
    /**
     * @param {Object} content
     * @return {?}
     */
    getFirstHydratableChild : function(content) {
      content = content.firstChild;
      for (;content && (content.nodeType !== ELEMENT_NODE && content.nodeType !== TEXT_NODE);) {
        content = content.nextSibling;
      }
      return content;
    },
    /**
     * @param {string} atts
     * @param {?} val
     * @param {Object} data
     * @param {Object} child
     * @param {Object} deepDataAndEvents
     * @param {Object} file
     * @return {?}
     */
    hydrateInstance : function(atts, val, data, child, deepDataAndEvents, file) {
      return mk(file, atts), setData(atts, data), ondata(atts, val, data, deepDataAndEvents, child);
    },
    /**
     * @param {Object} atts
     * @param {?} deepDataAndEvents
     * @param {Object} file
     * @return {?}
     */
    hydrateTextInstance : function(atts, deepDataAndEvents, file) {
      return mk(file, atts), $doc(atts, deepDataAndEvents);
    },
    /**
     * @param {?} obj
     * @param {?} value
     * @return {undefined}
     */
    didNotHydrateInstance : function(obj, value) {
      if (1 === value.nodeType) {
        mixin(obj, value);
      } else {
        store(obj, value);
      }
    },
    /**
     * @param {?} result
     * @param {?} _super
     * @param {Object} v00
     * @return {undefined}
     */
    didNotFindHydratableInstance : function(result, _super, v00) {
      __extends(result, _super, v00);
    },
    /**
     * @param {?} array
     * @param {?} shallow
     * @return {undefined}
     */
    didNotFindHydratableTextInstance : function(array, shallow) {
      flatten(array, shallow);
    },
    scheduleDeferredCallback : rIC.rIC,
    useSyncScheduling : true
  });
  socket.injection.injectFiberBatchedUpdates(client.batchedUpdates);
  var JsDiff = {
    /** @type {function (?, ?): ?} */
    createPortal : span,
    /**
     * @param {?} name
     * @param {Object} extra
     * @param {Object} expectedNumberOfNonCommentArgs
     * @return {?}
     */
    hydrate : function(name, extra, expectedNumberOfNonCommentArgs) {
      return assert(null, name, extra, true, expectedNumberOfNonCommentArgs);
    },
    /**
     * @param {?} expectedHashCode
     * @param {string} value
     * @param {Object} expectedNumberOfNonCommentArgs
     * @return {?}
     */
    render : function(expectedHashCode, value, expectedNumberOfNonCommentArgs) {
      return assert(null, expectedHashCode, value, false, expectedNumberOfNonCommentArgs);
    },
    /**
     * @param {?} expectedHashCode
     * @param {?} name
     * @param {Object} extra
     * @param {Object} expectedNumberOfNonCommentArgs
     * @return {?}
     */
    unstable_renderSubtreeIntoContainer : function(expectedHashCode, name, extra, expectedNumberOfNonCommentArgs) {
      return null != expectedHashCode && cache.has(expectedHashCode) || replace("38"), assert(expectedHashCode, name, extra, false, expectedNumberOfNonCommentArgs);
    },
    /**
     * @param {Object} text
     * @return {?}
     */
    unmountComponentAtNode : function(text) {
      return createElement(text) || replace("40"), !!text._reactRootContainer && (client.unbatchedUpdates(function() {
        assert(null, null, text, false, function() {
          /** @type {null} */
          text._reactRootContainer = null;
        });
      }), true);
    },
    /** @type {function (?): ?} */
    findDOMNode : render,
    /** @type {function (?, ?): ?} */
    unstable_createPortal : span,
    /** @type {function (Function, ?): ?} */
    unstable_batchedUpdates : socket.batchedUpdates,
    unstable_deferredUpdates : client.deferredUpdates,
    flushSync : client.flushSync,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED : {
      EventPluginHub : acc,
      EventPluginRegistry : EventPluginRegistry,
      EventPropagators : set,
      ReactControlledComponent : container,
      ReactDOMComponentTree : reserved,
      ReactDOMEventListener : utils
    }
  };
  docs({
    /** @type {function (?): ?} */
    findFiberByHostInstance : reserved.getClosestInstanceFromNode,
    findHostInstanceByFiber : client.findHostInstance,
    bundleType : 0,
    version : "16.0.0",
    rendererPackageName : "react-dom"
  });
  module.exports = JsDiff;
}, function(module, dataAndEvents, deepDataAndEvents) {
  /** @type {boolean} */
  var canUseEventListeners = !("undefined" == typeof window || (!window.document || !window.document.createElement));
  var JsDiff = {
    canUseDOM : canUseEventListeners,
    canUseWorkers : "undefined" != typeof Worker,
    canUseEventListeners : canUseEventListeners && !(!window.addEventListener && !window.attachEvent),
    canUseViewport : canUseEventListeners && !!window.screen,
    isInWorker : !canUseEventListeners
  };
  module.exports = JsDiff;
}, function(module, dataAndEvents, format) {
  var f = format(6);
  var obj = {
    /**
     * @param {Object} element
     * @param {string} type
     * @param {Object} action
     * @return {?}
     */
    listen : function(element, type, action) {
      return element.addEventListener ? (element.addEventListener(type, action, false), {
        /**
         * @return {undefined}
         */
        remove : function() {
          element.removeEventListener(type, action, false);
        }
      }) : element.attachEvent ? (element.attachEvent("on" + type, action), {
        /**
         * @return {undefined}
         */
        remove : function() {
          element.detachEvent("on" + type, action);
        }
      }) : void 0;
    },
    /**
     * @param {?} expectedHashCode
     * @param {string} value
     * @param {Object} expectedNumberOfNonCommentArgs
     * @return {?}
     */
    capture : function(expectedHashCode, value, expectedNumberOfNonCommentArgs) {
      return expectedHashCode.addEventListener ? (expectedHashCode.addEventListener(value, expectedNumberOfNonCommentArgs, true), {
        /**
         * @return {undefined}
         */
        remove : function() {
          expectedHashCode.removeEventListener(value, expectedNumberOfNonCommentArgs, true);
        }
      }) : {
        remove : f
      };
    },
    /**
     * @return {undefined}
     */
    registerDefault : function() {
    }
  };
  module.exports = obj;
}, function(module, dataAndEvents, deepDataAndEvents) {
  /**
   * @param {?} a
   * @param {?} b
   * @return {?}
   */
  function comparator(a, b) {
    return a === b ? 0 !== a || (0 !== b || 1 / a == 1 / b) : a !== a && b !== b;
  }
  /** @type {function (this:Object, *): boolean} */
  var func = Object.prototype.hasOwnProperty;
  /**
   * @param {?} expectedHashCode
   * @param {string} value
   * @return {?}
   */
  module.exports = function(expectedHashCode, value) {
    if (comparator(expectedHashCode, value)) {
      return true;
    }
    if ("object" != typeof expectedHashCode || (null === expectedHashCode || ("object" != typeof value || null === value))) {
      return false;
    }
    /** @type {Array.<string>} */
    var keys = Object.keys(expectedHashCode);
    /** @type {Array.<string>} */
    var values = Object.keys(value);
    if (keys.length !== values.length) {
      return false;
    }
    /** @type {number} */
    var x = 0;
    for (;x < keys.length;x++) {
      if (!func.call(value, keys[x]) || !comparator(expectedHashCode[keys[x]], value[keys[x]])) {
        return false;
      }
    }
    return true;
  };
}, function(module, dataAndEvents, require) {
  /**
   * @param {?} expectedHashCode
   * @param {string} value
   * @return {?}
   */
  function contains(expectedHashCode, value) {
    return!(!expectedHashCode || !value) && (expectedHashCode === value || !assert(expectedHashCode) && (assert(value) ? contains(expectedHashCode, value.parentNode) : "contains" in expectedHashCode ? expectedHashCode.contains(value) : !!expectedHashCode.compareDocumentPosition && !!(16 & expectedHashCode.compareDocumentPosition(value))));
  }
  var assert = require(52);
  /** @type {function (?, string): ?} */
  module.exports = contains;
}, function(module, dataAndEvents, require) {
  var getActual = require(53);
  /**
   * @param {?} expectedHashCode
   * @return {?}
   */
  module.exports = function(expectedHashCode) {
    return getActual(expectedHashCode) && 3 == expectedHashCode.nodeType;
  };
}, function(module, dataAndEvents, deepDataAndEvents) {
  /**
   * @param {?} expectedHashCode
   * @return {?}
   */
  module.exports = function(expectedHashCode) {
    var targetWindow = (expectedHashCode ? expectedHashCode.ownerDocument || expectedHashCode : document).defaultView || window;
    return!(!expectedHashCode || !("function" == typeof targetWindow.Node ? expectedHashCode instanceof targetWindow.Node : "object" == typeof expectedHashCode && ("number" == typeof expectedHashCode.nodeType && "string" == typeof expectedHashCode.nodeName)));
  };
}, function(module, dataAndEvents, deepDataAndEvents) {
  /**
   * @param {?} expectedHashCode
   * @return {undefined}
   */
  module.exports = function(expectedHashCode) {
    try {
      expectedHashCode.focus();
    } catch (t) {
    }
  };
}, function(module, dataAndEvents, deepDataAndEvents) {
  /**
   * @param {?} expectedHashCode
   * @return {?}
   */
  module.exports = function(expectedHashCode) {
    if (void 0 === (expectedHashCode = expectedHashCode || ("undefined" != typeof document ? document : void 0))) {
      return null;
    }
    try {
      return expectedHashCode.activeElement || expectedHashCode.body;
    } catch (e) {
      return expectedHashCode.body;
    }
  };
}, function(dataAndEvents, ctx, _) {
  Object.defineProperty(ctx, "__esModule", {
    value : true
  });
  var attr = _(57);
  var node = _(20);
  var wrapped = _(61);
  _.d(ctx, "Provider", function() {
    return attr.default;
  });
  _.d(ctx, "createProvider", function() {
    return attr.createProvider;
  });
  _.d(ctx, "connectAdvanced", function() {
    return node.default;
  });
  _.d(ctx, "connect", function() {
    return wrapped.default;
  });
}, function(dataAndEvents, object, $) {
  /**
   * @param {?} dataAndEvents
   * @param {Function} object
   * @return {undefined}
   */
  function freeze(dataAndEvents, object) {
    if (!(dataAndEvents instanceof object)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  /**
   * @param {string} dataAndEvents
   * @param {?} obj
   * @return {?}
   */
  function keys(dataAndEvents, obj) {
    if (!dataAndEvents) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return!obj || "object" != typeof obj && "function" != typeof obj ? dataAndEvents : obj;
  }
  /**
   * @param {Object} x
   * @param {Object} b
   * @return {undefined}
   */
  function f(x, b) {
    if ("function" != typeof b && null !== b) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof b);
    }
    /** @type {Object} */
    x.prototype = Object.create(b && b.prototype, {
      constructor : {
        value : x,
        enumerable : false,
        writable : true,
        configurable : true
      }
    });
    if (b) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(x, b);
      } else {
        /** @type {Object} */
        x.__proto__ = b;
      }
    }
  }
  /**
   * @return {?}
   */
  function initialize() {
    var dest;
    var name = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "store";
    var prop = arguments[1] || name + "Subscription";
    var Constructor = function(callback) {
      /**
       * @param {Object} options
       * @param {?} el
       * @return {?}
       */
      function child(options, el) {
        freeze(this, child);
        var props = keys(this, callback.call(this, options, el));
        return props[name] = options.store, props;
      }
      return f(child, callback), child.prototype.getChildContext = function() {
        var old;
        return old = {}, old[name] = this[name], old[prop] = null, old;
      }, child.prototype.render = function() {
        return match.Children.only(this.props.children);
      }, child;
    }(match.Component);
    return Constructor.propTypes = {
      store : desc.storeShape.isRequired,
      children : test.a.element.isRequired
    }, Constructor.childContextTypes = (dest = {}, dest[name] = desc.storeShape.isRequired, dest[prop] = desc.subscriptionShape, dest), Constructor;
  }
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  /** @type {function (): ?} */
  object.createProvider = initialize;
  var match = $(0);
  var content = ($.n(match), $(2));
  var test = $.n(content);
  var desc = $(19);
  $(9);
  object.default = initialize();
}, function(module, dataAndEvents, require) {
  var nodes = require(6);
  var getActual = require(8);
  var constructor = require(59);
  /**
   * @return {?}
   */
  module.exports = function() {
    /**
     * @param {?} expectedHashCode
     * @param {string} value
     * @param {Object} expectedNumberOfNonCommentArgs
     * @param {string} a
     * @param {?} obj
     * @param {?} prop
     * @return {undefined}
     */
    function type(expectedHashCode, value, expectedNumberOfNonCommentArgs, a, obj, prop) {
      if (prop !== constructor) {
        getActual(false, "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
      }
    }
    /**
     * @return {?}
     */
    function cube() {
      return type;
    }
    /** @type {function (?, string, Object, string, ?, ?): undefined} */
    type.isRequired = type;
    var json = {
      /** @type {function (?, string, Object, string, ?, ?): undefined} */
      array : type,
      /** @type {function (?, string, Object, string, ?, ?): undefined} */
      bool : type,
      /** @type {function (?, string, Object, string, ?, ?): undefined} */
      func : type,
      /** @type {function (?, string, Object, string, ?, ?): undefined} */
      number : type,
      /** @type {function (?, string, Object, string, ?, ?): undefined} */
      object : type,
      /** @type {function (?, string, Object, string, ?, ?): undefined} */
      string : type,
      /** @type {function (?, string, Object, string, ?, ?): undefined} */
      symbol : type,
      /** @type {function (?, string, Object, string, ?, ?): undefined} */
      any : type,
      /** @type {function (): ?} */
      arrayOf : cube,
      /** @type {function (?, string, Object, string, ?, ?): undefined} */
      element : type,
      /** @type {function (): ?} */
      instanceOf : cube,
      /** @type {function (?, string, Object, string, ?, ?): undefined} */
      node : type,
      /** @type {function (): ?} */
      objectOf : cube,
      /** @type {function (): ?} */
      oneOf : cube,
      /** @type {function (): ?} */
      oneOfType : cube,
      /** @type {function (): ?} */
      shape : cube,
      /** @type {function (): ?} */
      exact : cube
    };
    return json.checkPropTypes = nodes, json.PropTypes = json, json;
  };
}, function(module, dataAndEvents, deepDataAndEvents) {
  /** @type {string} */
  module.exports = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
}, function(dataAndEvents, ctx, element) {
  /**
   * @param {?} obj
   * @param {Function} ctor
   * @return {undefined}
   */
  function keys(obj, ctor) {
    if (!(obj instanceof ctor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  /**
   * @return {?}
   */
  function init() {
    /** @type {Array} */
    var type = [];
    /** @type {Array} */
    var array = [];
    return{
      /**
       * @return {undefined}
       */
      clear : function() {
        /** @type {null} */
        array = http;
        /** @type {null} */
        type = http;
      },
      /**
       * @return {undefined}
       */
      notify : function() {
        var codeSegments = type = array;
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          codeSegments[i]();
        }
      },
      /**
       * @return {?}
       */
      get : function() {
        return array;
      },
      /**
       * @param {?} expectedHashCode
       * @return {?}
       */
      subscribe : function(expectedHashCode) {
        /** @type {boolean} */
        var r = true;
        return array === type && (array = type.slice()), array.push(expectedHashCode), function() {
          if (r) {
            if (type !== http) {
              /** @type {boolean} */
              r = false;
              if (array === type) {
                array = type.slice();
              }
              array.splice(array.indexOf(expectedHashCode), 1);
            }
          }
        };
      }
    };
  }
  Object.defineProperty(ctx, "__esModule", {
    value : true
  });
  element.d(ctx, "default", function() {
    return s;
  });
  /** @type {null} */
  var http = null;
  var listeners = {
    /**
     * @return {undefined}
     */
    notify : function() {
    }
  };
  var s = function() {
    /**
     * @param {?} store
     * @param {?} id
     * @param {Function} onStateChange
     * @return {undefined}
     */
    function Client(store, id, onStateChange) {
      keys(this, Client);
      this.store = store;
      this.parentSub = id;
      /** @type {Function} */
      this.onStateChange = onStateChange;
      /** @type {null} */
      this.unsubscribe = null;
      this.listeners = listeners;
    }
    return Client.prototype.addNestedSub = function(expectedHashCode) {
      return this.trySubscribe(), this.listeners.subscribe(expectedHashCode);
    }, Client.prototype.notifyNestedSubs = function() {
      this.listeners.notify();
    }, Client.prototype.isSubscribed = function() {
      return Boolean(this.unsubscribe);
    }, Client.prototype.trySubscribe = function() {
      if (!this.unsubscribe) {
        this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.onStateChange) : this.store.subscribe(this.onStateChange);
        this.listeners = init();
      }
    }, Client.prototype.tryUnsubscribe = function() {
      if (this.unsubscribe) {
        this.unsubscribe();
        /** @type {null} */
        this.unsubscribe = null;
        this.listeners.clear();
        this.listeners = listeners;
      }
    }, Client;
  }();
}, function(dataAndEvents, self, $) {
  /**
   * @param {Object} object
   * @param {Array} keys
   * @return {?}
   */
  function hasKey(object, keys) {
    var old = {};
    var name;
    for (name in object) {
      if (!(keys.indexOf(name) >= 0)) {
        if (Object.prototype.hasOwnProperty.call(object, name)) {
          old[name] = object[name];
        }
      }
    }
    return old;
  }
  /**
   * @param {?} elem
   * @param {Array} el
   * @param {string} signal_eof
   * @return {?}
   */
  function next(elem, el, signal_eof) {
    /** @type {number} */
    var i = el.length - 1;
    for (;i >= 0;i--) {
      var q = el[i](elem);
      if (q) {
        return q;
      }
    }
    return function(deepDataAndEvents, dataAndEvents) {
      throw new Error("Invalid value of type " + typeof elem + " for " + signal_eof + " argument when connecting component " + dataAndEvents.wrappedComponentName + ".");
    };
  }
  /**
   * @param {?} mat
   * @param {?} dest
   * @return {?}
   */
  function set(mat, dest) {
    return mat === dest;
  }
  /**
   * @return {?}
   */
  function connect() {
    var data = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    var value = data.connectHOC;
    var newValue = void 0 === value ? opt.default : value;
    var length = data.mapStateToPropsFactories;
    var failuresLink = void 0 === length ? property.default : length;
    var l = data.mapDispatchToPropsFactories;
    var child = void 0 === l ? opts.default : l;
    var type = data.mergePropsFactories;
    var fn = void 0 === type ? desc.default : type;
    var object = data.selectorFactory;
    var expectedHashCode = void 0 === object ? item.default : object;
    return function(a, element, elem) {
      var result = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
      var index = result.pure;
      var id = void 0 === index || index;
      var value = result.areStatesEqual;
      var computed = void 0 === value ? set : value;
      var object = result.areOwnPropsEqual;
      var self = void 0 === object ? obj.default : object;
      var length = result.areStatePropsEqual;
      var finalLength = void 0 === length ? obj.default : length;
      var type = result.areMergedPropsEqual;
      var args = void 0 === type ? obj.default : type;
      var pdataOld = hasKey(result, ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"]);
      var ch = next(a, failuresLink, "mapStateToProps");
      var classes = next(element, child, "mapDispatchToProps");
      var matched = next(elem, fn, "mergeProps");
      return newValue(expectedHashCode, internalCallback({
        methodName : "connect",
        /**
         * @param {string} object
         * @return {?}
         */
        getDisplayName : function(object) {
          return "Connect(" + object + ")";
        },
        shouldHandleStateChanges : Boolean(a),
        initMapStateToProps : ch,
        initMapDispatchToProps : classes,
        initMergeProps : matched,
        pure : id,
        areStatesEqual : computed,
        areOwnPropsEqual : self,
        areStatePropsEqual : finalLength,
        areMergedPropsEqual : args
      }, pdataOld));
    };
  }
  Object.defineProperty(self, "__esModule", {
    value : true
  });
  /** @type {function (): ?} */
  self.createConnect = connect;
  var opt = $(20);
  var obj = $(62);
  var opts = $(63);
  var property = $(79);
  var desc = $(80);
  var item = $(81);
  var internalCallback = Object.assign || function(expectedHashCode) {
    /** @type {number} */
    var i = 1;
    for (;i < arguments.length;i++) {
      var iterable = arguments[i];
      var key;
      for (key in iterable) {
        if (Object.prototype.hasOwnProperty.call(iterable, key)) {
          expectedHashCode[key] = iterable[key];
        }
      }
    }
    return expectedHashCode;
  };
  self.default = connect();
}, function(dataAndEvents, object, deepDataAndEvents) {
  /**
   * @param {?} a
   * @param {?} b
   * @return {?}
   */
  function comparator(a, b) {
    return a === b ? 0 !== a || (0 !== b || 1 / a == 1 / b) : a !== a && b !== b;
  }
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  /**
   * @param {?} expectedHashCode
   * @param {string} value
   * @return {?}
   */
  object.default = function(expectedHashCode, value) {
    if (comparator(expectedHashCode, value)) {
      return true;
    }
    if ("object" != typeof expectedHashCode || (null === expectedHashCode || ("object" != typeof value || null === value))) {
      return false;
    }
    /** @type {Array.<string>} */
    var keys = Object.keys(expectedHashCode);
    /** @type {Array.<string>} */
    var values = Object.keys(value);
    if (keys.length !== values.length) {
      return false;
    }
    /** @type {number} */
    var x = 0;
    for (;x < keys.length;x++) {
      if (!func.call(value, keys[x]) || !comparator(expectedHashCode[keys[x]], value[keys[x]])) {
        return false;
      }
    }
    return true;
  };
  /** @type {function (this:Object, *): boolean} */
  var func = Object.prototype.hasOwnProperty;
}, function(dataAndEvents, exports, valueAccessor) {
  /**
   * @param {?} n
   * @return {?}
   */
  function e(n) {
    return "function" == typeof n ? Object(options.wrapMapToPropsFunc)(n, "mapDispatchToProps") : void 0;
  }
  /**
   * @param {boolean} min2
   * @return {?}
   */
  function map(min2) {
    return min2 ? void 0 : Object(options.wrapMapToPropsConstant)(function(dispatch) {
      return{
        dispatch : dispatch
      };
    });
  }
  /**
   * @param {boolean} arg
   * @return {?}
   */
  function isObject(arg) {
    return arg && "object" == typeof arg ? Object(options.wrapMapToPropsConstant)(function(deepDataAndEvents) {
      return Object(method.bindActionCreators)(arg, deepDataAndEvents);
    }) : void 0;
  }
  Object.defineProperty(exports, "__esModule", {
    value : true
  });
  /** @type {function (?): ?} */
  exports.whenMapDispatchToPropsIsFunction = e;
  /** @type {function (boolean): ?} */
  exports.whenMapDispatchToPropsIsMissing = map;
  /** @type {function (boolean): ?} */
  exports.whenMapDispatchToPropsIsObject = isObject;
  var method = valueAccessor(22);
  var options = valueAccessor(28);
  /** @type {Array} */
  exports.default = [e, map, isObject];
}, function(dataAndEvents, object, expression) {
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  var obj = expression(24);
  var prop = expression(67);
  var value = expression(68);
  /** @type {string} */
  var a = "[object Null]";
  /** @type {string} */
  var s = "[object Undefined]";
  var varName = obj.default ? obj.default.toStringTag : void 0;
  /**
   * @param {?} expectedHashCode
   * @return {?}
   */
  object.default = function(expectedHashCode) {
    return null == expectedHashCode ? void 0 === expectedHashCode ? s : a : (expectedHashCode = Object(expectedHashCode), varName && varName in expectedHashCode ? Object(prop.default)(expectedHashCode) : Object(value.default)(expectedHashCode));
  };
}, function(dataAndEvents, obj, topic) {
  Object.defineProperty(obj, "__esModule", {
    value : true
  });
  var out = topic(66);
  /** @type {(Window|boolean)} */
  var txt = "object" == typeof self && (self && (self.Object === Object && self));
  var value = out.default || (txt || Function("return this")());
  obj.default = value;
}, function(dataAndEvents, obj, callback) {
  Object.defineProperty(obj, "__esModule", {
    value : true
  });
  (function(arg) {
    var value = "object" == typeof arg && (arg && (arg.Object === Object && arg));
    obj.default = value;
  }).call(obj, callback(25));
}, function(dataAndEvents, object, topic) {
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  var out = topic(24);
  var ObjProto = Object.prototype;
  /** @type {function (this:Object, *): boolean} */
  var hasOwnProperty = ObjProto.hasOwnProperty;
  /** @type {function (this:*): string} */
  var toString = ObjProto.toString;
  var key = out.default ? out.default.toStringTag : void 0;
  /**
   * @param {?} expectedHashCode
   * @return {?}
   */
  object.default = function(expectedHashCode) {
    /** @type {boolean} */
    var storeRef = hasOwnProperty.call(expectedHashCode, key);
    var val = expectedHashCode[key];
    try {
      expectedHashCode[key] = void 0;
      /** @type {boolean} */
      var round = true;
    } catch (t) {
    }
    /** @type {string} */
    var num = toString.call(expectedHashCode);
    return round && (storeRef ? expectedHashCode[key] = val : delete expectedHashCode[key]), num;
  };
}, function(dataAndEvents, object, deepDataAndEvents) {
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  /** @type {function (this:*): string} */
  var ostring = Object.prototype.toString;
  /**
   * @param {?} expectedHashCode
   * @return {?}
   */
  object.default = function(expectedHashCode) {
    return ostring.call(expectedHashCode);
  };
}, function(dataAndEvents, c, topic) {
  Object.defineProperty(c, "__esModule", {
    value : true
  });
  var out = topic(70);
  var node = Object(out.default)(Object.getPrototypeOf, Object);
  c.default = node;
}, function(dataAndEvents, object, deepDataAndEvents) {
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  /**
   * @param {?} expectedHashCode
   * @param {string} value
   * @return {?}
   */
  object.default = function(expectedHashCode, value) {
    return function(el) {
      return expectedHashCode(value(el));
    };
  };
}, function(dataAndEvents, object, deepDataAndEvents) {
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  /**
   * @param {?} expectedHashCode
   * @return {?}
   */
  object.default = function(expectedHashCode) {
    return null != expectedHashCode && "object" == typeof expectedHashCode;
  };
}, function(module, dataAndEvents, factory) {
  module.exports = factory(73);
}, function(oContext, object, callback) {
  (function(dataAndEvents, deepDataAndEvents) {
    Object.defineProperty(object, "__esModule", {
      value : true
    });
    var angle;
    var obj = function(d) {
      return d && d.__esModule ? d : {
        default : d
      };
    }(callback(75));
    angle = "undefined" != typeof self ? self : "undefined" != typeof window ? window : void 0 !== dataAndEvents ? dataAndEvents : deepDataAndEvents;
    var s = (0, obj.default)(angle);
    object.default = s;
  }).call(object, callback(25), callback(74)(oContext));
}, function(module, dataAndEvents) {
  /**
   * @param {?} expectedHashCode
   * @return {?}
   */
  module.exports = function(expectedHashCode) {
    return expectedHashCode.webpackPolyfill || (expectedHashCode.deprecate = function() {
    }, expectedHashCode.paths = [], expectedHashCode.children || (expectedHashCode.children = []), Object.defineProperty(expectedHashCode, "loaded", {
      enumerable : true,
      /**
       * @return {?}
       */
      get : function() {
        return expectedHashCode.l;
      }
    }), Object.defineProperty(expectedHashCode, "id", {
      enumerable : true,
      /**
       * @return {?}
       */
      get : function() {
        return expectedHashCode.i;
      }
    }), expectedHashCode.webpackPolyfill = 1), expectedHashCode;
  };
}, function(dataAndEvents, object, deepDataAndEvents) {
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  /**
   * @param {?} expectedHashCode
   * @return {?}
   */
  object.default = function(expectedHashCode) {
    var n;
    var o = expectedHashCode.Symbol;
    return "function" == typeof o ? o.observable ? n = o.observable : (n = o("observable"), o.observable = n) : n = "@@observable", n;
  };
}, function(dataAndEvents, object, require) {
  /**
   * @param {string} keepData
   * @param {?} event
   * @return {?}
   */
  function cb(keepData, event) {
    var n = event && event.type;
    return "Given action " + (n && '"' + n.toString() + '"' || "an action") + ', reducer "' + keepData + '" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.';
  }
  /**
   * @param {Object} obj
   * @return {undefined}
   */
  function init(obj) {
    Object.keys(obj).forEach(function(from) {
      var fn = obj[from];
      if (void 0 === fn(void 0, {
        type : Loader.ActionTypes.INIT
      })) {
        throw new Error('Reducer "' + from + "\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");
      }
      if (void 0 === fn(void 0, {
        type : "@@redux/PROBE_UNKNOWN_ACTION_" + Math.random().toString(36).substring(7).split("").join(".")
      })) {
        throw new Error('Reducer "' + from + "\" returned undefined when probed with a random type. Don't try to handle " + Loader.ActionTypes.INIT + ' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.');
      }
    });
  }
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  /**
   * @param {?} expectedHashCode
   * @return {?}
   */
  object.default = function(expectedHashCode) {
    /** @type {Array.<string>} */
    var codeSegments = Object.keys(expectedHashCode);
    var cache = {};
    /** @type {number} */
    var i = 0;
    for (;i < codeSegments.length;i++) {
      /** @type {string} */
      var prop = codeSegments[i];
      if ("function" == typeof expectedHashCode[prop]) {
        cache[prop] = expectedHashCode[prop];
      }
    }
    /** @type {Array.<string>} */
    var keys = Object.keys(cache);
    var bulk = void 0;
    try {
      init(cache);
    } catch (fn) {
      bulk = fn;
    }
    return function() {
      var $cookies = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      var fn = arguments[1];
      if (bulk) {
        throw bulk;
      }
      /** @type {boolean} */
      var force = false;
      var exports = {};
      /** @type {number} */
      var i = 0;
      for (;i < keys.length;i++) {
        /** @type {string} */
        var key = keys[i];
        var recurse = cache[key];
        var value = $cookies[key];
        var val = recurse(value, fn);
        if (void 0 === val) {
          var ret = cb(key, fn);
          throw new Error(ret);
        }
        exports[key] = val;
        /** @type {boolean} */
        force = force || val !== value;
      }
      return force ? exports : $cookies;
    };
  };
  var Loader = require(23);
  require(10);
  require(26);
}, function(dataAndEvents, object, deepDataAndEvents) {
  /**
   * @param {Function} matcherFunction
   * @param {string} $
   * @return {?}
   */
  function callback(matcherFunction, $) {
    return function() {
      return $(matcherFunction.apply(void 0, arguments));
    };
  }
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  /**
   * @param {?} expectedHashCode
   * @param {string} value
   * @return {?}
   */
  object.default = function(expectedHashCode, value) {
    if ("function" == typeof expectedHashCode) {
      return callback(expectedHashCode, value);
    }
    if ("object" != typeof expectedHashCode || null === expectedHashCode) {
      throw new Error("bindActionCreators expected an object or a function, instead received " + (null === expectedHashCode ? "null" : typeof expectedHashCode) + '. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
    }
    /** @type {Array.<string>} */
    var codeSegments = Object.keys(expectedHashCode);
    var output = {};
    /** @type {number} */
    var i = 0;
    for (;i < codeSegments.length;i++) {
      /** @type {string} */
      var key = codeSegments[i];
      var val = expectedHashCode[key];
      if ("function" == typeof val) {
        output[key] = callback(val, value);
      }
    }
    return output;
  };
}, function(dataAndEvents, object, topic) {
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  /**
   * @return {?}
   */
  object.default = function() {
    /** @type {number} */
    var l = arguments.length;
    /** @type {Array} */
    var args = Array(l);
    /** @type {number} */
    var i = 0;
    for (;i < l;i++) {
      args[i] = arguments[i];
    }
    return function(getter) {
      return function(key, name, isXML) {
        var camelKey = getter(key, name, isXML);
        var dispatch = camelKey.dispatch;
        /** @type {Array} */
        var applyArgs = [];
        var failuresLink = {
          getState : camelKey.getState,
          /**
           * @param {?} expectedHashCode
           * @return {?}
           */
          dispatch : function(expectedHashCode) {
            return dispatch(expectedHashCode);
          }
        };
        return applyArgs = args.map(function(on) {
          return on(failuresLink);
        }), dispatch = out.default.apply(void 0, applyArgs)(camelKey.dispatch), dataAttr({}, camelKey, {
          dispatch : dispatch
        });
      };
    };
  };
  var out = topic(27);
  var dataAttr = Object.assign || function(expectedHashCode) {
    /** @type {number} */
    var i = 1;
    for (;i < arguments.length;i++) {
      var iterable = arguments[i];
      var key;
      for (key in iterable) {
        if (Object.prototype.hasOwnProperty.call(iterable, key)) {
          expectedHashCode[key] = iterable[key];
        }
      }
    }
    return expectedHashCode;
  };
}, function(dataAndEvents, self, require) {
  /**
   * @param {?} n
   * @return {?}
   */
  function e(n) {
    return "function" == typeof n ? Object(Block.wrapMapToPropsFunc)(n, "mapStateToProps") : void 0;
  }
  /**
   * @param {boolean} min2
   * @return {?}
   */
  function map(min2) {
    return min2 ? void 0 : Object(Block.wrapMapToPropsConstant)(function() {
      return{};
    });
  }
  Object.defineProperty(self, "__esModule", {
    value : true
  });
  /** @type {function (?): ?} */
  self.whenMapStateToPropsIsFunction = e;
  /** @type {function (boolean): ?} */
  self.whenMapStateToPropsIsMissing = map;
  var Block = require(28);
  /** @type {Array} */
  self.default = [e, map];
}, function(dataAndEvents, self, $sanitize) {
  /**
   * @param {Object} expectedNumberOfNonCommentArgs
   * @param {string} def
   * @param {string} camelKey
   * @return {?}
   */
  function set(expectedNumberOfNonCommentArgs, def, camelKey) {
    return dataAttr({}, camelKey, expectedNumberOfNonCommentArgs, def);
  }
  /**
   * @param {?} cb
   * @return {?}
   */
  function fn(cb) {
    return function(dataAndEvents, collection) {
      collection.displayName;
      var e = collection.pure;
      var dataAttr = collection.areMergedPropsEqual;
      /** @type {boolean} */
      var o = false;
      var camelKey = void 0;
      return function(outErr, srcFiles, files) {
        var expectedHashCode = cb(outErr, srcFiles, files);
        return o ? e && dataAttr(expectedHashCode, camelKey) || (camelKey = expectedHashCode) : (o = true, camelKey = expectedHashCode), camelKey;
      };
    };
  }
  /**
   * @param {?} n
   * @return {?}
   */
  function request(n) {
    return "function" == typeof n ? fn(n) : void 0;
  }
  /**
   * @param {boolean} s
   * @return {?}
   */
  function charSet(s) {
    return s ? void 0 : function() {
      return set;
    };
  }
  Object.defineProperty(self, "__esModule", {
    value : true
  });
  /** @type {function (Object, string, string): ?} */
  self.defaultMergeProps = set;
  /** @type {function (?): ?} */
  self.wrapMergePropsFunc = fn;
  /** @type {function (?): ?} */
  self.whenMergePropsIsFunction = request;
  /** @type {function (boolean): ?} */
  self.whenMergePropsIsOmitted = charSet;
  $sanitize(29);
  var dataAttr = Object.assign || function(expectedHashCode) {
    /** @type {number} */
    var i = 1;
    for (;i < arguments.length;i++) {
      var iterable = arguments[i];
      var key;
      for (key in iterable) {
        if (Object.prototype.hasOwnProperty.call(iterable, key)) {
          expectedHashCode[key] = iterable[key];
        }
      }
    }
    return expectedHashCode;
  };
  /** @type {Array} */
  self.default = [request, charSet];
}, function(dataAndEvents, self, $sanitize) {
  /**
   * @param {Object} iterable
   * @param {Array} obj
   * @return {?}
   */
  function toArray(iterable, obj) {
    var object = {};
    var key;
    for (key in iterable) {
      if (!(obj.indexOf(key) >= 0)) {
        if (Object.prototype.hasOwnProperty.call(iterable, key)) {
          object[key] = iterable[key];
        }
      }
    }
    return object;
  }
  /**
   * @param {?} next
   * @param {?} func
   * @param {?} callback
   * @param {?} data
   * @return {?}
   */
  function post(next, func, callback, data) {
    return function(err, stdout) {
      return callback(next(err, stdout), func(data, stdout), stdout);
    };
  }
  /**
   * @param {?} $
   * @param {?} size
   * @param {?} callback
   * @param {?} el
   * @param {?} c
   * @return {?}
   */
  function func($, size, callback, el, c) {
    /**
     * @param {?} obj
     * @param {?} object
     * @return {?}
     */
    function debug(obj, object) {
      return dest = obj, pdataOld = object, pdataCur = $(dest, pdataOld), value = size(el, pdataOld), accumulator = callback(pdataCur, value, pdataOld), initial = true, accumulator;
    }
    /**
     * @return {?}
     */
    function success() {
      return pdataCur = $(dest, pdataOld), size.dependsOnOwnProps && (value = size(el, pdataOld)), accumulator = callback(pdataCur, value, pdataOld);
    }
    /**
     * @return {?}
     */
    function _loadTemplate() {
      return $.dependsOnOwnProps && (pdataCur = $(dest, pdataOld)), size.dependsOnOwnProps && (value = size(el, pdataOld)), accumulator = callback(pdataCur, value, pdataOld);
    }
    /**
     * @return {?}
     */
    function some() {
      var expectedHashCode = $(dest, pdataOld);
      /** @type {boolean} */
      var r = !forOwn(expectedHashCode, pdataCur);
      return pdataCur = expectedHashCode, r && (accumulator = callback(pdataCur, value, pdataOld)), accumulator;
    }
    /**
     * @param {?} mat
     * @param {?} expectedHashCode
     * @return {?}
     */
    function isWhitelisted(mat, expectedHashCode) {
      /** @type {boolean} */
      var na = !cl(expectedHashCode, pdataOld);
      /** @type {boolean} */
      var nb = !i(mat, dest);
      return dest = mat, pdataOld = expectedHashCode, na && nb ? success() : na ? _loadTemplate() : nb ? some() : accumulator;
    }
    var i = c.areStatesEqual;
    var cl = c.areOwnPropsEqual;
    var forOwn = c.areStatePropsEqual;
    /** @type {boolean} */
    var initial = false;
    var dest = void 0;
    var pdataOld = void 0;
    var pdataCur = void 0;
    var value = void 0;
    var accumulator = void 0;
    return function(iterator, ms) {
      return initial ? isWhitelisted(iterator, ms) : debug(iterator, ms);
    };
  }
  Object.defineProperty(self, "__esModule", {
    value : true
  });
  /** @type {function (?, ?, ?, ?): ?} */
  self.impureFinalPropsSelectorFactory = post;
  /** @type {function (?, ?, ?, ?, ?): ?} */
  self.pureFinalPropsSelectorFactory = func;
  /**
   * @param {?} expectedHashCode
   * @param {string} value
   * @return {?}
   */
  self.default = function(expectedHashCode, value) {
    var resolved = value.initMapStateToProps;
    var index = value.initMapDispatchToProps;
    var loopMatch = value.initMergeProps;
    var v = toArray(value, ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"]);
    var Zepto = resolved(expectedHashCode, v);
    var i = index(expectedHashCode, v);
    var restoreScript = loopMatch(expectedHashCode, v);
    return(v.pure ? func : post)(Zepto, i, restoreScript, expectedHashCode, v);
  };
  $sanitize(82);
}, function(dataAndEvents, object, topic) {
  /**
   * @param {?} input
   * @param {string} view
   * @param {string} m
   * @return {undefined}
   */
  function decode(input, view, m) {
    if (!input) {
      throw new Error("Unexpected value for " + view + " in " + m + ".");
    }
    if (!("mapStateToProps" !== view && "mapDispatchToProps" !== view)) {
      if (!input.hasOwnProperty("dependsOnOwnProps")) {
        Object(out.default)("The selector for " + view + " of " + m + " did not specify a value for dependsOnOwnProps.");
      }
    }
  }
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  /**
   * @param {?} expectedHashCode
   * @param {string} value
   * @param {Object} expectedNumberOfNonCommentArgs
   * @param {string} def
   * @return {undefined}
   */
  object.default = function(expectedHashCode, value, expectedNumberOfNonCommentArgs, def) {
    decode(expectedHashCode, "mapStateToProps", def);
    decode(value, "mapDispatchToProps", def);
    decode(expectedNumberOfNonCommentArgs, "mergeProps", def);
  };
  var out = topic(9);
}, function(dataAndEvents, ctx, $) {
  Object.defineProperty(ctx, "__esModule", {
    value : true
  });
  var obj = $(84);
  $.d(ctx, "BrowserRouter", function() {
    return obj.default;
  });
  var opts = $(86);
  $.d(ctx, "HashRouter", function() {
    return opts.default;
  });
  var property = $(33);
  $.d(ctx, "Link", function() {
    return property.default;
  });
  var desc = $(88);
  $.d(ctx, "MemoryRouter", function() {
    return desc.default;
  });
  var opt = $(91);
  $.d(ctx, "NavLink", function() {
    return opt.default;
  });
  var track = $(94);
  $.d(ctx, "Prompt", function() {
    return track.default;
  });
  var def = $(96);
  $.d(ctx, "Redirect", function() {
    return def.default;
  });
  var option = $(34);
  $.d(ctx, "Route", function() {
    return option.default;
  });
  var prompt = $(13);
  $.d(ctx, "Router", function() {
    return prompt.default;
  });
  var item = $(102);
  $.d(ctx, "StaticRouter", function() {
    return item.default;
  });
  var tag = $(104);
  $.d(ctx, "Switch", function() {
    return tag.default;
  });
  var self = $(106);
  $.d(ctx, "matchPath", function() {
    return self.default;
  });
  var action = $(107);
  $.d(ctx, "withRouter", function() {
    return action.default;
  });
}, function(dataAndEvents, node, $) {
  /**
   * @param {?} dataAndEvents
   * @param {Function} n
   * @return {undefined}
   */
  function pow(dataAndEvents, n) {
    if (!(dataAndEvents instanceof n)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  /**
   * @param {string} object
   * @param {?} obj
   * @return {?}
   */
  function keys(object, obj) {
    if (!object) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return!obj || "object" != typeof obj && "function" != typeof obj ? object : obj;
  }
  /**
   * @param {Object} m
   * @param {Object} b
   * @return {undefined}
   */
  function create(m, b) {
    if ("function" != typeof b && null !== b) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof b);
    }
    /** @type {Object} */
    m.prototype = Object.create(b && b.prototype, {
      constructor : {
        value : m,
        enumerable : false,
        writable : true,
        configurable : true
      }
    });
    if (b) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(m, b);
      } else {
        /** @type {Object} */
        m.__proto__ = b;
      }
    }
  }
  Object.defineProperty(node, "__esModule", {
    value : true
  });
  var content = $(1);
  var template = $.n(content);
  var parentNode = $(0);
  var root = $.n(parentNode);
  var events = $(2);
  var e = $.n(events);
  var update = $(85);
  var throttledUpdate = $.n(update);
  var obj = $(13);
  var def = function(f) {
    /**
     * @return {?}
     */
    function e() {
      var n;
      var o;
      var suiteView;
      pow(this, e);
      /** @type {number} */
      var l = arguments.length;
      /** @type {Array} */
      var args = Array(l);
      /** @type {number} */
      var i = 0;
      for (;i < l;i++) {
        args[i] = arguments[i];
      }
      return n = o = keys(this, f.call.apply(f, [this].concat(args))), o.history = throttledUpdate()(o.props), suiteView = n, keys(o, suiteView);
    }
    return create(e, f), e.prototype.componentWillMount = function() {
      template()(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.");
    }, e.prototype.render = function() {
      return root.a.createElement(obj.default, {
        history : this.history,
        children : this.props.children
      });
    }, e;
  }(root.a.Component);
  def.propTypes = {
    basename : e.a.string,
    forceRefresh : e.a.bool,
    getUserConfirmation : e.a.func,
    keyLength : e.a.number,
    children : e.a.node
  };
  node.default = def;
}, function(dataAndEvents, obj, create) {
  /**
   * @param {Object} src
   * @return {?}
   */
  function extend(src) {
    return src && src.__esModule ? src : {
      default : src
    };
  }
  /** @type {boolean} */
  obj.__esModule = true;
  /** @type {function (?): ?} */
  var y = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(dataAndEvents) {
    return typeof dataAndEvents;
  } : function(b) {
    return b && ("function" == typeof Symbol && (b.constructor === Symbol && b !== Symbol.prototype)) ? "symbol" : typeof b;
  };
  var fn = Object.assign || function(expectedHashCode) {
    /** @type {number} */
    var i = 1;
    for (;i < arguments.length;i++) {
      var iterable = arguments[i];
      var key;
      for (key in iterable) {
        if (Object.prototype.hasOwnProperty.call(iterable, key)) {
          expectedHashCode[key] = iterable[key];
        }
      }
    }
    return expectedHashCode;
  };
  var opt = extend(create(1));
  var oldconfig = extend(create(3));
  var socket = create(11);
  var root = create(4);
  var params = extend(create(12));
  var elem = create(32);
  /**
   * @return {?}
   */
  var initialize = function() {
    try {
      return window.history.state || {};
    } catch (t) {
      return{};
    }
  };
  /**
   * @return {?}
   */
  obj.default = function() {
    var options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    (0, oldconfig.default)(elem.canUseDOM, "Browser history needs a DOM");
    /** @type {History} */
    var history = window.history;
    var n = (0, elem.supportsHistory)();
    /** @type {boolean} */
    var r = !(0, elem.supportsPopStateOnHashChange)();
    var media = options.forceRefresh;
    var useMedia = void 0 !== media && media;
    var value = options.getUserConfirmation;
    var h = void 0 === value ? elem.getConfirmation : value;
    var i = options.keyLength;
    var lastDotIndex = void 0 === i ? 6 : i;
    var key = options.basename ? (0, root.stripTrailingSlash)((0, root.addLeadingSlash)(options.basename)) : "";
    /**
     * @param {Object} loadingLang
     * @return {?}
     */
    var load = function(loadingLang) {
      var test = loadingLang || {};
      var tlen = test.key;
      var _done = test.state;
      /** @type {Location} */
      var loc = window.location;
      /** @type {string} */
      var data = loc.pathname + loc.search + loc.hash;
      return(0, opt.default)(!key || (0, root.hasBasename)(data, key), 'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "' + data + '" to begin with "' + key + '".'), key && (data = (0, root.stripBasename)(data, key)), (0, socket.createLocation)(data, _done, tlen);
    };
    /**
     * @return {?}
     */
    var write = function() {
      return Math.random().toString(36).substr(2, lastDotIndex);
    };
    var that = (0, params.default)();
    /**
     * @param {string} pdataOld
     * @return {undefined}
     */
    var trigger = function(pdataOld) {
      fn(self, pdataOld);
      /** @type {number} */
      self.length = history.length;
      that.notifyListeners(self.location, self.action);
    };
    /**
     * @param {Object} next
     * @return {undefined}
     */
    var find = function(next) {
      if (!(0, elem.isExtraneousPopstateEvent)(next)) {
        onSuccess(load(next.state));
      }
    };
    /**
     * @return {undefined}
     */
    var onload = function() {
      onSuccess(load(initialize()));
    };
    /** @type {boolean} */
    var C = false;
    /**
     * @param {Object} e
     * @return {undefined}
     */
    var onSuccess = function(e) {
      if (C) {
        /** @type {boolean} */
        C = false;
        trigger();
      } else {
        that.confirmTransitionTo(e, "POP", h, function(dataAndEvents) {
          if (dataAndEvents) {
            trigger({
              action : "POP",
              location : e
            });
          } else {
            back(e);
          }
        });
      }
    };
    /**
     * @param {Object} event
     * @return {undefined}
     */
    var back = function(event) {
      var match = self.location;
      var a = keys.indexOf(match.key);
      if (-1 === a) {
        /** @type {number} */
        a = 0;
      }
      var b = keys.indexOf(event.key);
      if (-1 === b) {
        /** @type {number} */
        b = 0;
      }
      /** @type {number} */
      var expectedNumberOfNonCommentArgs = a - b;
      if (expectedNumberOfNonCommentArgs) {
        /** @type {boolean} */
        C = true;
        go(expectedNumberOfNonCommentArgs);
      }
    };
    var message = load(initialize());
    /** @type {Array} */
    var keys = [message.key];
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    var $ = function(expectedHashCode) {
      return key + (0, root.createPath)(expectedHashCode);
    };
    /**
     * @param {number} expectedNumberOfNonCommentArgs
     * @return {undefined}
     */
    var go = function(expectedNumberOfNonCommentArgs) {
      history.go(expectedNumberOfNonCommentArgs);
    };
    /** @type {number} */
    var M = 0;
    /**
     * @param {number} expectedNumberOfNonCommentArgs
     * @return {undefined}
     */
    var init = function(expectedNumberOfNonCommentArgs) {
      if (1 === (M += expectedNumberOfNonCommentArgs)) {
        (0, elem.addEventListener)(window, "popstate", find);
        if (r) {
          (0, elem.addEventListener)(window, "hashchange", onload);
        }
      } else {
        if (0 === M) {
          (0, elem.removeEventListener)(window, "popstate", find);
          if (r) {
            (0, elem.removeEventListener)(window, "hashchange", onload);
          }
        }
      }
    };
    /** @type {boolean} */
    var D = false;
    var self = {
      length : history.length,
      action : "POP",
      location : message,
      /** @type {function (?): ?} */
      createHref : $,
      /**
       * @param {?} expectedHashCode
       * @param {string} value
       * @return {undefined}
       */
      push : function(expectedHashCode, value) {
        (0, opt.default)(!("object" === (void 0 === expectedHashCode ? "undefined" : y(expectedHashCode)) && (void 0 !== expectedHashCode.state && void 0 !== value)), "You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");
        var test = (0, socket.createLocation)(expectedHashCode, value, write(), self.location);
        that.confirmTransitionTo(test, "PUSH", h, function(dataAndEvents) {
          if (dataAndEvents) {
            var url = $(test);
            var name = test.key;
            var data = test.state;
            if (n) {
              if (history.pushState({
                key : name,
                state : data
              }, null, url), useMedia) {
                window.location.href = url;
              } else {
                var ret = keys.indexOf(self.location.key);
                var _ = keys.slice(0, -1 === ret ? 0 : ret + 1);
                _.push(test.key);
                keys = _;
                trigger({
                  action : "PUSH",
                  location : test
                });
              }
            } else {
              (0, opt.default)(void 0 === data, "Browser history cannot push state in browsers that do not support HTML5 history");
              window.location.href = url;
            }
          }
        });
      },
      /**
       * @param {?} expectedHashCode
       * @param {string} value
       * @return {undefined}
       */
      replace : function(expectedHashCode, value) {
        (0, opt.default)(!("object" === (void 0 === expectedHashCode ? "undefined" : y(expectedHashCode)) && (void 0 !== expectedHashCode.state && void 0 !== value)), "You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");
        var test = (0, socket.createLocation)(expectedHashCode, value, write(), self.location);
        that.confirmTransitionTo(test, "REPLACE", h, function(dataAndEvents) {
          if (dataAndEvents) {
            var expectedHashCode = $(test);
            var name = test.key;
            var data = test.state;
            if (n) {
              if (history.replaceState({
                key : name,
                state : data
              }, null, expectedHashCode), useMedia) {
                window.location.replace(expectedHashCode);
              } else {
                var i = keys.indexOf(self.location.key);
                if (-1 !== i) {
                  keys[i] = test.key;
                }
                trigger({
                  action : "REPLACE",
                  location : test
                });
              }
            } else {
              (0, opt.default)(void 0 === data, "Browser history cannot replace state in browsers that do not support HTML5 history");
              window.location.replace(expectedHashCode);
            }
          }
        });
      },
      /** @type {function (number): undefined} */
      go : go,
      /**
       * @return {?}
       */
      goBack : function() {
        return go(-1);
      },
      /**
       * @return {?}
       */
      goForward : function() {
        return go(1);
      },
      /**
       * @return {?}
       */
      block : function() {
        var firstLength = arguments.length > 0 && (void 0 !== arguments[0] && arguments[0]);
        var throttledUpdate = that.setPrompt(firstLength);
        return D || (init(1), D = true), function() {
          return D && (D = false, init(-1)), throttledUpdate();
        };
      },
      /**
       * @param {Function} el
       * @return {?}
       */
      listen : function(el) {
        var fontSize = that.appendListener(el);
        return init(1), function() {
          init(-1);
          fontSize();
        };
      }
    };
    return self;
  };
}, function(dataAndEvents, node, $) {
  /**
   * @param {?} dataAndEvents
   * @param {Function} n
   * @return {undefined}
   */
  function pow(dataAndEvents, n) {
    if (!(dataAndEvents instanceof n)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  /**
   * @param {string} object
   * @param {?} obj
   * @return {?}
   */
  function keys(object, obj) {
    if (!object) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return!obj || "object" != typeof obj && "function" != typeof obj ? object : obj;
  }
  /**
   * @param {Object} m
   * @param {Object} b
   * @return {undefined}
   */
  function create(m, b) {
    if ("function" != typeof b && null !== b) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof b);
    }
    /** @type {Object} */
    m.prototype = Object.create(b && b.prototype, {
      constructor : {
        value : m,
        enumerable : false,
        writable : true,
        configurable : true
      }
    });
    if (b) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(m, b);
      } else {
        /** @type {Object} */
        m.__proto__ = b;
      }
    }
  }
  Object.defineProperty(node, "__esModule", {
    value : true
  });
  var update = $(1);
  var throttledUpdate = $.n(update);
  var content = $(0);
  var root = $.n(content);
  var events = $(2);
  var e = $.n(events);
  var self = $(87);
  var s = $.n(self);
  var obj = $(13);
  var def = function(f) {
    /**
     * @return {?}
     */
    function e() {
      var n;
      var o;
      var suiteView;
      pow(this, e);
      /** @type {number} */
      var l = arguments.length;
      /** @type {Array} */
      var args = Array(l);
      /** @type {number} */
      var i = 0;
      for (;i < l;i++) {
        args[i] = arguments[i];
      }
      return n = o = keys(this, f.call.apply(f, [this].concat(args))), o.history = s()(o.props), suiteView = n, keys(o, suiteView);
    }
    return create(e, f), e.prototype.componentWillMount = function() {
      throttledUpdate()(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.");
    }, e.prototype.render = function() {
      return root.a.createElement(obj.default, {
        history : this.history,
        children : this.props.children
      });
    }, e;
  }(root.a.Component);
  def.propTypes = {
    basename : e.a.string,
    getUserConfirmation : e.a.func,
    hashType : e.a.oneOf(["hashbang", "noslash", "slash"]),
    children : e.a.node
  };
  node.default = def;
}, function(dataAndEvents, obj, create) {
  /**
   * @param {Object} src
   * @return {?}
   */
  function extend(src) {
    return src && src.__esModule ? src : {
      default : src
    };
  }
  /** @type {boolean} */
  obj.__esModule = true;
  var template = Object.assign || function(expectedHashCode) {
    /** @type {number} */
    var i = 1;
    for (;i < arguments.length;i++) {
      var iterable = arguments[i];
      var key;
      for (key in iterable) {
        if (Object.prototype.hasOwnProperty.call(iterable, key)) {
          expectedHashCode[key] = iterable[key];
        }
      }
    }
    return expectedHashCode;
  };
  var opt = extend(create(1));
  var params = extend(create(3));
  var socket = create(11);
  var root = create(4);
  var oldconfig = extend(create(12));
  var elem = create(32);
  var viewItems = {
    hashbang : {
      /**
       * @param {?} elems
       * @return {?}
       */
      encodePath : function(elems) {
        return "!" === elems.charAt(0) ? elems : "!/" + (0, root.stripLeadingSlash)(elems);
      },
      /**
       * @param {?} str
       * @return {?}
       */
      decodePath : function(str) {
        return "!" === str.charAt(0) ? str.substr(1) : str;
      }
    },
    noslash : {
      encodePath : root.stripLeadingSlash,
      decodePath : root.addLeadingSlash
    },
    slash : {
      encodePath : root.addLeadingSlash,
      decodePath : root.addLeadingSlash
    }
  };
  /**
   * @return {?}
   */
  var cb = function() {
    /** @type {string} */
    var url = window.location.href;
    /** @type {number} */
    var hashIndex = url.indexOf("#");
    return-1 === hashIndex ? "" : url.substring(hashIndex + 1);
  };
  /**
   * @param {?} path
   * @return {?}
   */
  var handler = function(path) {
    return window.location.hash = path;
  };
  /**
   * @param {?} type
   * @return {undefined}
   */
  var on = function(type) {
    /** @type {number} */
    var num = window.location.href.indexOf("#");
    window.location.replace(window.location.href.slice(0, num >= 0 ? num : 0) + "#" + type);
  };
  /**
   * @return {?}
   */
  obj.default = function() {
    var entry = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    (0, params.default)(elem.canUseDOM, "Hash history needs a DOM");
    /** @type {History} */
    var context = window.history;
    var r20 = (0, elem.supportsGoWithoutReloadUsingHash)();
    var value = entry.getUserConfirmation;
    var h = void 0 === value ? elem.getConfirmation : value;
    var i = entry.hashType;
    var index = void 0 === i ? "slash" : i;
    var scope = entry.basename ? (0, root.stripTrailingSlash)((0, root.addLeadingSlash)(entry.basename)) : "";
    var item = viewItems[index];
    var parse = item.encodePath;
    var children = item.decodePath;
    /**
     * @return {?}
     */
    var rnd = function() {
      var nodes = children(cb());
      return(0, opt.default)(!scope || (0, root.hasBasename)(nodes, scope), 'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "' + nodes + '" to begin with "' + scope + '".'), scope && (nodes = (0, root.stripBasename)(nodes, scope)), (0, socket.createLocation)(nodes);
    };
    var that = (0, oldconfig.default)();
    /**
     * @param {string} pdataOld
     * @return {undefined}
     */
    var callback = function(pdataOld) {
      template(data, pdataOld);
      /** @type {number} */
      data.length = context.length;
      that.notifyListeners(data.location, data.action);
    };
    /** @type {boolean} */
    var cold = false;
    /** @type {null} */
    var output = null;
    /**
     * @return {undefined}
     */
    var onSuccess = function() {
      var val = cb();
      var json = parse(val);
      if (val !== json) {
        on(json);
      } else {
        var id = rnd();
        var dl = data.location;
        if (!cold && (0, socket.locationsAreEqual)(dl, id)) {
          return;
        }
        if (output === (0, root.createPath)(id)) {
          return;
        }
        /** @type {null} */
        output = null;
        finish(id);
      }
    };
    /**
     * @param {Object} t
     * @return {undefined}
     */
    var finish = function(t) {
      if (cold) {
        /** @type {boolean} */
        cold = false;
        callback();
      } else {
        that.confirmTransitionTo(t, "POP", h, function(dataAndEvents) {
          if (dataAndEvents) {
            callback({
              action : "POP",
              location : t
            });
          } else {
            error(t);
          }
        });
      }
    };
    /**
     * @param {Object} t
     * @return {undefined}
     */
    var error = function(t) {
      var rect = data.location;
      var a = _.lastIndexOf((0, root.createPath)(rect));
      if (-1 === a) {
        /** @type {number} */
        a = 0;
      }
      var b = _.lastIndexOf((0, root.createPath)(t));
      if (-1 === b) {
        /** @type {number} */
        b = 0;
      }
      /** @type {number} */
      var expectedNumberOfNonCommentArgs = a - b;
      if (expectedNumberOfNonCommentArgs) {
        /** @type {boolean} */
        cold = true;
        go(expectedNumberOfNonCommentArgs);
      }
    };
    var val = cb();
    var json = parse(val);
    if (val !== json) {
      on(json);
    }
    var originalEvent = rnd();
    /** @type {Array} */
    var _ = [(0, root.createPath)(originalEvent)];
    /**
     * @param {number} expectedNumberOfNonCommentArgs
     * @return {undefined}
     */
    var go = function(expectedNumberOfNonCommentArgs) {
      (0, opt.default)(r20, "Hash history go(n) causes a full page reload in this browser");
      context.go(expectedNumberOfNonCommentArgs);
    };
    /** @type {number} */
    var D = 0;
    /**
     * @param {number} expectedNumberOfNonCommentArgs
     * @return {undefined}
     */
    var init = function(expectedNumberOfNonCommentArgs) {
      if (1 === (D += expectedNumberOfNonCommentArgs)) {
        (0, elem.addEventListener)(window, "hashchange", onSuccess);
      } else {
        if (0 === D) {
          (0, elem.removeEventListener)(window, "hashchange", onSuccess);
        }
      }
    };
    /** @type {boolean} */
    var L = false;
    var data = {
      length : context.length,
      action : "POP",
      location : originalEvent,
      /**
       * @param {?} expectedHashCode
       * @return {?}
       */
      createHref : function(expectedHashCode) {
        return "#" + parse(scope + (0, root.createPath)(expectedHashCode));
      },
      /**
       * @param {?} expectedHashCode
       * @param {string} value
       * @return {undefined}
       */
      push : function(expectedHashCode, value) {
        (0, opt.default)(void 0 === value, "Hash history cannot push state; it is ignored");
        var location = (0, socket.createLocation)(expectedHashCode, void 0, void 0, data.location);
        that.confirmTransitionTo(location, "PUSH", h, function(dataAndEvents) {
          if (dataAndEvents) {
            var expectedHashCode = (0, root.createPath)(location);
            var json = parse(scope + expectedHashCode);
            if (cb() !== json) {
              output = expectedHashCode;
              handler(json);
              var ret = _.lastIndexOf((0, root.createPath)(data.location));
              var a = _.slice(0, -1 === ret ? 0 : ret + 1);
              a.push(expectedHashCode);
              _ = a;
              callback({
                action : "PUSH",
                location : location
              });
            } else {
              (0, opt.default)(false, "Hash history cannot PUSH the same path; a new entry will not be added to the history stack");
              callback();
            }
          }
        });
      },
      /**
       * @param {?} expectedHashCode
       * @param {string} value
       * @return {undefined}
       */
      replace : function(expectedHashCode, value) {
        (0, opt.default)(void 0 === value, "Hash history cannot replace state; it is ignored");
        var location = (0, socket.createLocation)(expectedHashCode, void 0, void 0, data.location);
        that.confirmTransitionTo(location, "REPLACE", h, function(dataAndEvents) {
          if (dataAndEvents) {
            var input = (0, root.createPath)(location);
            var json = parse(scope + input);
            if (cb() !== json) {
              output = input;
              on(json);
            }
            var key = _.indexOf((0, root.createPath)(data.location));
            if (-1 !== key) {
              _[key] = input;
            }
            callback({
              action : "REPLACE",
              location : location
            });
          }
        });
      },
      /** @type {function (number): undefined} */
      go : go,
      /**
       * @return {?}
       */
      goBack : function() {
        return go(-1);
      },
      /**
       * @return {?}
       */
      goForward : function() {
        return go(1);
      },
      /**
       * @return {?}
       */
      block : function() {
        var firstLength = arguments.length > 0 && (void 0 !== arguments[0] && arguments[0]);
        var throttledUpdate = that.setPrompt(firstLength);
        return L || (init(1), L = true), function() {
          return L && (L = false, init(-1)), throttledUpdate();
        };
      },
      /**
       * @param {Function} el
       * @return {?}
       */
      listen : function(el) {
        var fontSize = that.appendListener(el);
        return init(1), function() {
          init(-1);
          fontSize();
        };
      }
    };
    return data;
  };
}, function(dataAndEvents, item, expression) {
  Object.defineProperty(item, "__esModule", {
    value : true
  });
  var obj = expression(89);
  item.default = obj.default;
}, function(dataAndEvents, node, $) {
  /**
   * @param {?} dataAndEvents
   * @param {Function} n
   * @return {undefined}
   */
  function pow(dataAndEvents, n) {
    if (!(dataAndEvents instanceof n)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  /**
   * @param {string} object
   * @param {?} obj
   * @return {?}
   */
  function keys(object, obj) {
    if (!object) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return!obj || "object" != typeof obj && "function" != typeof obj ? object : obj;
  }
  /**
   * @param {Object} m
   * @param {Object} b
   * @return {undefined}
   */
  function create(m, b) {
    if ("function" != typeof b && null !== b) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof b);
    }
    /** @type {Object} */
    m.prototype = Object.create(b && b.prototype, {
      constructor : {
        value : m,
        enumerable : false,
        writable : true,
        configurable : true
      }
    });
    if (b) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(m, b);
      } else {
        /** @type {Object} */
        m.__proto__ = b;
      }
    }
  }
  Object.defineProperty(node, "__esModule", {
    value : true
  });
  var update = $(1);
  var throttledUpdate = $.n(update);
  var content = $(0);
  var root = $.n(content);
  var events = $(2);
  var e = $.n(events);
  var info = $(90);
  var match = $.n(info);
  var obj = $(14);
  var def = function(f) {
    /**
     * @return {?}
     */
    function e() {
      var n;
      var o;
      var suiteView;
      pow(this, e);
      /** @type {number} */
      var l = arguments.length;
      /** @type {Array} */
      var args = Array(l);
      /** @type {number} */
      var i = 0;
      for (;i < l;i++) {
        args[i] = arguments[i];
      }
      return n = o = keys(this, f.call.apply(f, [this].concat(args))), o.history = match()(o.props), suiteView = n, keys(o, suiteView);
    }
    return create(e, f), e.prototype.componentWillMount = function() {
      throttledUpdate()(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.");
    }, e.prototype.render = function() {
      return root.a.createElement(obj.default, {
        history : this.history,
        children : this.props.children
      });
    }, e;
  }(root.a.Component);
  def.propTypes = {
    initialEntries : e.a.array,
    initialIndex : e.a.number,
    getUserConfirmation : e.a.func,
    keyLength : e.a.number,
    children : e.a.node
  };
  node.default = def;
}, function(dataAndEvents, obj, parse) {
  /**
   * @param {Object} d
   * @return {?}
   */
  function objectToString(d) {
    return d && d.__esModule ? d : {
      default : d
    };
  }
  /** @type {boolean} */
  obj.__esModule = true;
  /** @type {function (?): ?} */
  var y = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(dataAndEvents) {
    return typeof dataAndEvents;
  } : function(b) {
    return b && ("function" == typeof Symbol && (b.constructor === Symbol && b !== Symbol.prototype)) ? "symbol" : typeof b;
  };
  var makeTriggerData = Object.assign || function(expectedHashCode) {
    /** @type {number} */
    var i = 1;
    for (;i < arguments.length;i++) {
      var iterable = arguments[i];
      var key;
      for (key in iterable) {
        if (Object.prototype.hasOwnProperty.call(iterable, key)) {
          expectedHashCode[key] = iterable[key];
        }
      }
    }
    return expectedHashCode;
  };
  var opts = objectToString(parse(1));
  var root = parse(4);
  var url = parse(11);
  var option = objectToString(parse(12));
  /**
   * @param {number} value
   * @param {number} x
   * @param {number} from
   * @return {?}
   */
  var indexOf = function(value, x, from) {
    return Math.min(Math.max(value, x), from);
  };
  /**
   * @return {?}
   */
  obj.default = function() {
    var options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    var h = options.getUserConfirmation;
    var value = options.initialEntries;
    var newValue = void 0 === value ? ["/"] : value;
    var i = options.initialIndex;
    var a = void 0 === i ? 0 : i;
    var e = options.keyLength;
    var point = void 0 === e ? 6 : e;
    var that = (0, option.default)();
    /**
     * @param {string} pdataOld
     * @return {undefined}
     */
    var trigger = function(pdataOld) {
      makeTriggerData(data, pdataOld);
      data.length = data.entries.length;
      that.notifyListeners(data.location, data.action);
    };
    /**
     * @return {?}
     */
    var write = function() {
      return Math.random().toString(36).substr(2, point);
    };
    var idx = indexOf(a, 0, newValue.length - 1);
    var names = newValue.map(function(string) {
      return "string" == typeof string ? (0, url.createLocation)(string, void 0, write()) : (0, url.createLocation)(string, void 0, string.key || write());
    });
    var l = root.createPath;
    /**
     * @param {number} expectedNumberOfNonCommentArgs
     * @return {undefined}
     */
    var go = function(expectedNumberOfNonCommentArgs) {
      var i = indexOf(data.index + expectedNumberOfNonCommentArgs, 0, data.entries.length - 1);
      var location = data.entries[i];
      that.confirmTransitionTo(location, "POP", h, function(dataAndEvents) {
        if (dataAndEvents) {
          trigger({
            action : "POP",
            location : location,
            index : i
          });
        } else {
          trigger();
        }
      });
    };
    var data = {
      length : names.length,
      action : "POP",
      location : names[idx],
      index : idx,
      entries : names,
      createHref : l,
      /**
       * @param {?} expectedHashCode
       * @param {string} value
       * @return {undefined}
       */
      push : function(expectedHashCode, value) {
        (0, opts.default)(!("object" === (void 0 === expectedHashCode ? "undefined" : y(expectedHashCode)) && (void 0 !== expectedHashCode.state && void 0 !== value)), "You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");
        var text = (0, url.createLocation)(expectedHashCode, value, write(), data.location);
        that.confirmTransitionTo(text, "PUSH", h, function(dataAndEvents) {
          if (dataAndEvents) {
            var i = data.index + 1;
            var jsonml = data.entries.slice(0);
            if (jsonml.length > i) {
              jsonml.splice(i, jsonml.length - i, text);
            } else {
              jsonml.push(text);
            }
            trigger({
              action : "PUSH",
              location : text,
              index : i,
              entries : jsonml
            });
          }
        });
      },
      /**
       * @param {?} expectedHashCode
       * @param {string} value
       * @return {undefined}
       */
      replace : function(expectedHashCode, value) {
        (0, opts.default)(!("object" === (void 0 === expectedHashCode ? "undefined" : y(expectedHashCode)) && (void 0 !== expectedHashCode.state && void 0 !== value)), "You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");
        var t = (0, url.createLocation)(expectedHashCode, value, write(), data.location);
        that.confirmTransitionTo(t, "REPLACE", h, function(dataAndEvents) {
          if (dataAndEvents) {
            data.entries[data.index] = t;
            trigger({
              action : "REPLACE",
              location : t
            });
          }
        });
      },
      /** @type {function (number): undefined} */
      go : go,
      /**
       * @return {?}
       */
      goBack : function() {
        return go(-1);
      },
      /**
       * @return {?}
       */
      goForward : function() {
        return go(1);
      },
      /**
       * @param {?} i
       * @return {?}
       */
      canGo : function(i) {
        var row = data.index + i;
        return row >= 0 && row < data.entries.length;
      },
      /**
       * @return {?}
       */
      block : function() {
        var firstLength = arguments.length > 0 && (void 0 !== arguments[0] && arguments[0]);
        return that.setPrompt(firstLength);
      },
      /**
       * @param {Function} el
       * @return {?}
       */
      listen : function(el) {
        return that.appendListener(el);
      }
    };
    return data;
  };
}, function(dataAndEvents, object, $) {
  /**
   * @param {Object} iterable
   * @param {Array} obj
   * @return {?}
   */
  function toArray(iterable, obj) {
    var object = {};
    var key;
    for (key in iterable) {
      if (!(obj.indexOf(key) >= 0)) {
        if (Object.prototype.hasOwnProperty.call(iterable, key)) {
          object[key] = iterable[key];
        }
      }
    }
    return object;
  }
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  var style = $(0);
  var target = $.n(style);
  var content = $(2);
  var doc = $.n(content);
  var opt = $(34);
  var obj = $(33);
  var dataAttr = Object.assign || function(expectedHashCode) {
    /** @type {number} */
    var i = 1;
    for (;i < arguments.length;i++) {
      var iterable = arguments[i];
      var key;
      for (key in iterable) {
        if (Object.prototype.hasOwnProperty.call(iterable, key)) {
          expectedHashCode[key] = iterable[key];
        }
      }
    }
    return expectedHashCode;
  };
  /** @type {function (?): ?} */
  var forOwn = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(collection) {
    return typeof collection;
  } : function(b) {
    return b && ("function" == typeof Symbol && (b.constructor === Symbol && b !== Symbol.prototype)) ? "symbol" : typeof b;
  };
  /**
   * @param {?} expectedHashCode
   * @return {?}
   */
  var create = function(expectedHashCode) {
    var object = expectedHashCode.to;
    var exact = expectedHashCode.exact;
    var strict = expectedHashCode.strict;
    var loc = expectedHashCode.location;
    var activeClassName = expectedHashCode.activeClassName;
    var className = expectedHashCode.className;
    var expectedNumberOfNonCommentArgs = expectedHashCode.activeStyle;
    var camelKey = expectedHashCode.style;
    var fulfilled = expectedHashCode.isActive;
    var inBody = expectedHashCode.ariaCurrent;
    var pdataOld = toArray(expectedHashCode, ["to", "exact", "strict", "location", "activeClassName", "className", "activeStyle", "style", "isActive", "ariaCurrent"]);
    return target.a.createElement(opt.default, {
      path : "object" === (void 0 === object ? "undefined" : forOwn(object)) ? object.pathname : object,
      exact : exact,
      strict : strict,
      location : loc,
      /**
       * @param {?} expectedHashCode
       * @return {?}
       */
      children : function(expectedHashCode) {
        var udataCur = expectedHashCode.location;
        var value = expectedHashCode.match;
        /** @type {boolean} */
        var quirks = !!(fulfilled ? fulfilled(value, udataCur) : value);
        return target.a.createElement(obj.default, dataAttr({
          to : object,
          className : quirks ? [className, activeClassName].filter(function(node) {
            return node;
          }).join(" ") : className,
          style : quirks ? dataAttr({}, camelKey, expectedNumberOfNonCommentArgs) : camelKey,
          "aria-current" : quirks && inBody
        }, pdataOld));
      }
    });
  };
  create.propTypes = {
    to : obj.default.propTypes.to,
    exact : doc.a.bool,
    strict : doc.a.bool,
    location : doc.a.object,
    activeClassName : doc.a.string,
    className : doc.a.string,
    activeStyle : doc.a.object,
    style : doc.a.object,
    isActive : doc.a.func,
    ariaCurrent : doc.a.oneOf(["page", "step", "location", "true"])
  };
  create.defaultProps = {
    activeClassName : "active",
    ariaCurrent : "true"
  };
  /** @type {function (?): ?} */
  object.default = create;
}, function(config, dataAndEvents, $sanitize) {
  /**
   * @param {string} arg
   * @param {Object} data
   * @return {?}
   */
  function process(arg, data) {
    var args;
    /** @type {Array} */
    var layout = [];
    /** @type {number} */
    var idx = 0;
    /** @type {number} */
    var recurring = 0;
    /** @type {string} */
    var expectedHashCode = "";
    var AUTH_KEY = data && data.delimiter || "/";
    for (;null != (args = v2CompParser.exec(arg));) {
      /** @type {string} */
      var parent = args[0];
      /** @type {string} */
      var pageY = args[1];
      /** @type {number} */
      var expectedNumberOfNonCommentArgs = args.index;
      if (expectedHashCode += arg.slice(recurring, expectedNumberOfNonCommentArgs), recurring = expectedNumberOfNonCommentArgs + parent.length, pageY) {
        expectedHashCode += pageY[1];
      } else {
        var val = arg[recurring];
        /** @type {string} */
        var expected = args[2];
        /** @type {string} */
        var name = args[3];
        /** @type {string} */
        var success = args[4];
        /** @type {string} */
        var fail = args[5];
        /** @type {string} */
        var next = args[6];
        /** @type {string} */
        var pageX = args[7];
        if (expectedHashCode) {
          layout.push(expectedHashCode);
          /** @type {string} */
          expectedHashCode = "";
        }
        /** @type {boolean} */
        var partial = null != expected && (null != val && val !== expected);
        /** @type {boolean} */
        var repeat = "+" === next || "*" === next;
        /** @type {boolean} */
        var optional = "?" === next || "*" === next;
        var delim = args[2] || AUTH_KEY;
        /** @type {string} */
        var found = success || fail;
        layout.push({
          name : name || idx++,
          prefix : expected || "",
          delimiter : delim,
          optional : optional,
          repeat : repeat,
          partial : partial,
          asterisk : !!pageX,
          pattern : found ? quote(found) : pageX ? ".*" : "[^" + trim(delim) + "]+?"
        });
      }
    }
    return recurring < arg.length && (expectedHashCode += arg.substr(recurring)), expectedHashCode && layout.push(expectedHashCode), layout;
  }
  /**
   * @param {string} value
   * @return {?}
   */
  function encodeEntities(value) {
    return encodeURI(value).replace(/[\/?#]/g, function(a) {
      return "%" + a.charCodeAt(0).toString(16).toUpperCase();
    });
  }
  /**
   * @param {?} text
   * @return {?}
   */
  function encode(text) {
    return encodeURI(text).replace(/[?#]/g, function(a) {
      return "%" + a.charCodeAt(0).toString(16).toUpperCase();
    });
  }
  /**
   * @param {Array} codeSegments
   * @return {?}
   */
  function parse(codeSegments) {
    /** @type {Array} */
    var formats = new Array(codeSegments.length);
    /** @type {number} */
    var i = 0;
    for (;i < codeSegments.length;i++) {
      if ("object" == typeof codeSegments[i]) {
        /** @type {RegExp} */
        formats[i] = new RegExp("^(?:" + codeSegments[i].pattern + ")$");
      }
    }
    return function(opt_values, dataAndEvents) {
      /** @type {string} */
      var str = "";
      var values = opt_values || {};
      /** @type {Function} */
      var decodeURIComponent = (dataAndEvents || {}).pretty ? encodeEntities : encodeURIComponent;
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var options = codeSegments[i];
        if ("string" != typeof options) {
          var key;
          var value = values[options.name];
          if (null == value) {
            if (options.optional) {
              if (options.partial) {
                str += options.prefix;
              }
              continue;
            }
            throw new TypeError('Expected "' + options.name + '" to be defined');
          }
          if (isArray(value)) {
            if (!options.repeat) {
              throw new TypeError('Expected "' + options.name + '" to not repeat, but received `' + JSON.stringify(value) + "`");
            }
            if (0 === value.length) {
              if (options.optional) {
                continue;
              }
              throw new TypeError('Expected "' + options.name + '" to not be empty');
            }
            /** @type {number} */
            var j = 0;
            for (;j < value.length;j++) {
              if (key = decodeURIComponent(value[j]), !formats[i].test(key)) {
                throw new TypeError('Expected all "' + options.name + '" to match "' + options.pattern + '", but received `' + JSON.stringify(key) + "`");
              }
              str += (0 === j ? options.prefix : options.delimiter) + key;
            }
          } else {
            if (key = options.asterisk ? encode(value) : decodeURIComponent(value), !formats[i].test(key)) {
              throw new TypeError('Expected "' + options.name + '" to match "' + options.pattern + '", but received "' + key + '"');
            }
            str += options.prefix + key;
          }
        } else {
          str += options;
        }
      }
      return str;
    };
  }
  /**
   * @param {?} str
   * @return {?}
   */
  function trim(str) {
    return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, "\\$1");
  }
  /**
   * @param {string} s
   * @return {?}
   */
  function quote(s) {
    return s.replace(/([=!:$\/()])/g, "\\$1");
  }
  /**
   * @param {Object} elem
   * @param {string} value
   * @return {?}
   */
  function replace(elem, value) {
    return elem.keys = value, elem;
  }
  /**
   * @param {Object} options
   * @return {?}
   */
  function setup(options) {
    return options.sensitive ? "" : "i";
  }
  /**
   * @param {Object} obj
   * @param {(Array|string)} object
   * @return {?}
   */
  function serialize(obj, object) {
    var codeSegments = obj.source.match(/\((?!\?)/g);
    if (codeSegments) {
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        object.push({
          name : i,
          prefix : null,
          delimiter : null,
          optional : false,
          repeat : false,
          partial : false,
          asterisk : false,
          pattern : null
        });
      }
    }
    return replace(obj, object);
  }
  /**
   * @param {Array} list
   * @param {string} pdataOld
   * @param {Object} expectedNumberOfNonCommentArgs
   * @return {?}
   */
  function expand(list, pdataOld, expectedNumberOfNonCommentArgs) {
    /** @type {Array} */
    var rbuggyMatches = [];
    /** @type {number} */
    var i = 0;
    for (;i < list.length;i++) {
      rbuggyMatches.push(text(list[i], pdataOld, expectedNumberOfNonCommentArgs).source);
    }
    return replace(new RegExp("(?:" + rbuggyMatches.join("|") + ")", setup(expectedNumberOfNonCommentArgs)), pdataOld);
  }
  /**
   * @param {string} filename
   * @param {string} name
   * @param {Object} data
   * @return {?}
   */
  function callback(filename, name, data) {
    return compile(process(filename, data), name, data);
  }
  /**
   * @param {Array} b
   * @param {Object} value
   * @param {Object} options
   * @return {?}
   */
  function compile(b, value, options) {
    if (!isArray(value)) {
      options = value || options;
      /** @type {Array} */
      value = [];
    }
    var strict = (options = options || {}).strict;
    /** @type {boolean} */
    var comma = false !== options.end;
    /** @type {string} */
    var word = "";
    /** @type {number} */
    var bi = 0;
    for (;bi < b.length;bi++) {
      var expectedHashCode = b[bi];
      if ("string" == typeof expectedHashCode) {
        word += trim(expectedHashCode);
      } else {
        var r = trim(expectedHashCode.prefix);
        /** @type {string} */
        var g = "(?:" + expectedHashCode.pattern + ")";
        value.push(expectedHashCode);
        if (expectedHashCode.repeat) {
          g += "(?:" + r + g + ")*";
        }
        word += g = expectedHashCode.optional ? expectedHashCode.partial ? r + "(" + g + ")?" : "(?:" + r + "(" + g + "))?" : r + "(" + g + ")";
      }
    }
    var lowerToParts = trim(options.delimiter || "/");
    /** @type {boolean} */
    var i = word.slice(-lowerToParts.length) === lowerToParts;
    return strict || (word = (i ? word.slice(0, -lowerToParts.length) : word) + "(?:" + lowerToParts + "(?=$))?"), word += comma ? "$" : strict && i ? "" : "(?=" + lowerToParts + "|$)", replace(new RegExp("^" + word, setup(options)), value);
  }
  /**
   * @param {?} expectedHashCode
   * @param {string} value
   * @param {Object} expectedNumberOfNonCommentArgs
   * @return {?}
   */
  function text(expectedHashCode, value, expectedNumberOfNonCommentArgs) {
    return isArray(value) || (expectedNumberOfNonCommentArgs = value || expectedNumberOfNonCommentArgs, value = []), expectedNumberOfNonCommentArgs = expectedNumberOfNonCommentArgs || {}, expectedHashCode instanceof RegExp ? serialize(expectedHashCode, value) : isArray(expectedHashCode) ? expand(expectedHashCode, value, expectedNumberOfNonCommentArgs) : callback(expectedHashCode, value, expectedNumberOfNonCommentArgs);
  }
  var isArray = $sanitize(93);
  /** @type {function (?, string, Object): ?} */
  config.exports = text;
  /** @type {function (string, Object): ?} */
  config.exports.parse = process;
  /**
   * @param {string} i
   * @param {Object} o
   * @return {?}
   */
  config.exports.compile = function(i, o) {
    return parse(process(i, o));
  };
  /** @type {function (Array): ?} */
  config.exports.tokensToFunction = parse;
  /** @type {function (Array, Object, Object): ?} */
  config.exports.tokensToRegExp = compile;
  /** @type {RegExp} */
  var v2CompParser = new RegExp(["(\\\\.)", "([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"), "g");
}, function(module, dataAndEvents) {
  /** @type {function (*): boolean} */
  module.exports = Array.isArray || function(expectedHashCode) {
    return "[object Array]" == Object.prototype.toString.call(expectedHashCode);
  };
}, function(dataAndEvents, item, expression) {
  Object.defineProperty(item, "__esModule", {
    value : true
  });
  var obj = expression(95);
  item.default = obj.default;
}, function(dataAndEvents, prototype, $) {
  /**
   * @param {?} dataAndEvents
   * @param {Function} Plugin
   * @return {undefined}
   */
  function _throw(dataAndEvents, Plugin) {
    if (!(dataAndEvents instanceof Plugin)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  /**
   * @param {string} dataAndEvents
   * @param {?} fn
   * @return {?}
   */
  function apply(dataAndEvents, fn) {
    if (!dataAndEvents) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return!fn || "object" != typeof fn && "function" != typeof fn ? dataAndEvents : fn;
  }
  /**
   * @param {Object} m
   * @param {Object} b
   * @return {undefined}
   */
  function f(m, b) {
    if ("function" != typeof b && null !== b) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof b);
    }
    /** @type {Object} */
    m.prototype = Object.create(b && b.prototype, {
      constructor : {
        value : m,
        enumerable : false,
        writable : true,
        configurable : true
      }
    });
    if (b) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(m, b);
      } else {
        /** @type {Object} */
        m.__proto__ = b;
      }
    }
  }
  Object.defineProperty(prototype, "__esModule", {
    value : true
  });
  var content = $(0);
  var actual = $.n(content);
  var scripts = $(2);
  var self = $.n(scripts);
  var update = $(3);
  var throttledUpdate = $.n(update);
  var Constructor = function(_super) {
    /**
     * @return {?}
     */
    function Plugin() {
      return _throw(this, Plugin), apply(this, _super.apply(this, arguments));
    }
    return f(Plugin, _super), Plugin.prototype.enable = function(expectedHashCode) {
      if (this.unblock) {
        this.unblock();
      }
      this.unblock = this.context.router.history.block(expectedHashCode);
    }, Plugin.prototype.disable = function() {
      if (this.unblock) {
        this.unblock();
        /** @type {null} */
        this.unblock = null;
      }
    }, Plugin.prototype.componentWillMount = function() {
      throttledUpdate()(this.context.router, "You should not use <Prompt> outside a <Router>");
      if (this.props.when) {
        this.enable(this.props.message);
      }
    }, Plugin.prototype.componentWillReceiveProps = function(error) {
      if (error.when) {
        if (!(this.props.when && this.props.message === error.message)) {
          this.enable(error.message);
        }
      } else {
        this.disable();
      }
    }, Plugin.prototype.componentWillUnmount = function() {
      this.disable();
    }, Plugin.prototype.render = function() {
      return null;
    }, Plugin;
  }(actual.a.Component);
  Constructor.propTypes = {
    when : self.a.bool,
    message : self.a.oneOfType([self.a.func, self.a.string]).isRequired
  };
  Constructor.defaultProps = {
    when : true
  };
  Constructor.contextTypes = {
    router : self.a.shape({
      history : self.a.shape({
        block : self.a.func.isRequired
      }).isRequired
    }).isRequired
  };
  prototype.default = Constructor;
}, function(dataAndEvents, item, expression) {
  Object.defineProperty(item, "__esModule", {
    value : true
  });
  var obj = expression(97);
  item.default = obj.default;
}, function(dataAndEvents, prototype, $) {
  /**
   * @param {?} dataAndEvents
   * @param {Function} object
   * @return {undefined}
   */
  function defineProperties(dataAndEvents, object) {
    if (!(dataAndEvents instanceof object)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  /**
   * @param {string} dataAndEvents
   * @param {?} opts
   * @return {?}
   */
  function initialize(dataAndEvents, opts) {
    if (!dataAndEvents) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return!opts || "object" != typeof opts && "function" != typeof opts ? dataAndEvents : opts;
  }
  /**
   * @param {Object} constructor
   * @param {Object} b
   * @return {undefined}
   */
  function create(constructor, b) {
    if ("function" != typeof b && null !== b) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof b);
    }
    /** @type {Object} */
    constructor.prototype = Object.create(b && b.prototype, {
      constructor : {
        value : constructor,
        enumerable : false,
        writable : true,
        configurable : true
      }
    });
    if (b) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(constructor, b);
      } else {
        /** @type {Object} */
        constructor.__proto__ = b;
      }
    }
  }
  Object.defineProperty(prototype, "__esModule", {
    value : true
  });
  var content = $(0);
  var actual = $.n(content);
  var scripts = $(2);
  var self = $.n(scripts);
  var elems = $(1);
  var isArray = $.n(elems);
  var update = $(3);
  var throttledUpdate = $.n(update);
  var frame = $(98);
  var Constructor = function(_super) {
    /**
     * @return {?}
     */
    function Text() {
      return defineProperties(this, Text), initialize(this, _super.apply(this, arguments));
    }
    return create(Text, _super), Text.prototype.isStatic = function() {
      return this.context.router && this.context.router.staticContext;
    }, Text.prototype.componentWillMount = function() {
      throttledUpdate()(this.context.router, "You should not use <Redirect> outside a <Router>");
      if (this.isStatic()) {
        this.perform();
      }
    }, Text.prototype.componentDidMount = function() {
      if (!this.isStatic()) {
        this.perform();
      }
    }, Text.prototype.componentDidUpdate = function(t) {
      var r20 = Object(frame.createLocation)(t.to);
      var lo = Object(frame.createLocation)(this.props.to);
      if (Object(frame.locationsAreEqual)(r20, lo)) {
        isArray()(false, "You tried to redirect to the same route you're currently on: \"" + lo.pathname + lo.search + '"');
      } else {
        this.perform();
      }
    }, Text.prototype.perform = function() {
      var history = this.context.router.history;
      var props = this.props;
      var core_push = props.push;
      var expectedHashCode = props.to;
      if (core_push) {
        history.push(expectedHashCode);
      } else {
        history.replace(expectedHashCode);
      }
    }, Text.prototype.render = function() {
      return null;
    }, Text;
  }(actual.a.Component);
  Constructor.propTypes = {
    push : self.a.bool,
    from : self.a.string,
    to : self.a.oneOfType([self.a.string, self.a.object]).isRequired
  };
  Constructor.defaultProps = {
    push : false
  };
  Constructor.contextTypes = {
    router : self.a.shape({
      history : self.a.shape({
        push : self.a.func.isRequired,
        replace : self.a.func.isRequired
      }).isRequired,
      staticContext : self.a.object
    }).isRequired
  };
  prototype.default = Constructor;
}, function(dataAndEvents, ctx, $) {
  Object.defineProperty(ctx, "__esModule", {
    value : true
  });
  var obj = $(99);
  $.d(ctx, "createBrowserHistory", function() {
    return obj.default;
  });
  var opt = $(100);
  $.d(ctx, "createHashHistory", function() {
    return opt.default;
  });
  var opts = $(101);
  $.d(ctx, "createMemoryHistory", function() {
    return opts.default;
  });
  var emptyJ = $(7);
  $.d(ctx, "createLocation", function() {
    return emptyJ.createLocation;
  });
  $.d(ctx, "locationsAreEqual", function() {
    return emptyJ.locationsAreEqual;
  });
  var s = $(5);
  $.d(ctx, "parsePath", function() {
    return s.parsePath;
  });
  $.d(ctx, "createPath", function() {
    return s.createPath;
  });
}, function(dataAndEvents, object, $) {
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  var elems = $(1);
  var isArray = $.n(elems);
  var update = $(3);
  var throttledUpdate = $.n(update);
  var options = $(7);
  var dir = $(5);
  var obj = $(16);
  var frame = $(36);
  /** @type {function (?): ?} */
  var y = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(dataAndEvents) {
    return typeof dataAndEvents;
  } : function(b) {
    return b && ("function" == typeof Symbol && (b.constructor === Symbol && b !== Symbol.prototype)) ? "symbol" : typeof b;
  };
  var fn = Object.assign || function(expectedHashCode) {
    /** @type {number} */
    var i = 1;
    for (;i < arguments.length;i++) {
      var iterable = arguments[i];
      var key;
      for (key in iterable) {
        if (Object.prototype.hasOwnProperty.call(iterable, key)) {
          expectedHashCode[key] = iterable[key];
        }
      }
    }
    return expectedHashCode;
  };
  /**
   * @return {?}
   */
  var initialize = function() {
    try {
      return window.history.state || {};
    } catch (t) {
      return{};
    }
  };
  /**
   * @return {?}
   */
  object.default = function() {
    var options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    throttledUpdate()(frame.canUseDOM, "Browser history needs a DOM");
    /** @type {History} */
    var history = window.history;
    var n = Object(frame.supportsHistory)();
    /** @type {boolean} */
    var r = !Object(frame.supportsPopStateOnHashChange)();
    var media = options.forceRefresh;
    var useMedia = void 0 !== media && media;
    var value = options.getUserConfirmation;
    var h = void 0 === value ? frame.getConfirmation : value;
    var i = options.keyLength;
    var lastDotIndex = void 0 === i ? 6 : i;
    var key = options.basename ? Object(dir.stripTrailingSlash)(Object(dir.addLeadingSlash)(options.basename)) : "";
    /**
     * @param {Object} loadingLang
     * @return {?}
     */
    var load = function(loadingLang) {
      var test = loadingLang || {};
      var tlen = test.key;
      var _done = test.state;
      /** @type {Location} */
      var loc = window.location;
      /** @type {string} */
      var data = loc.pathname + loc.search + loc.hash;
      return isArray()(!key || Object(dir.hasBasename)(data, key), 'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "' + data + '" to begin with "' + key + '".'), key && (data = Object(dir.stripBasename)(data, key)), Object(options.createLocation)(data, _done, tlen);
    };
    /**
     * @return {?}
     */
    var write = function() {
      return Math.random().toString(36).substr(2, lastDotIndex);
    };
    var that = Object(obj.default)();
    /**
     * @param {string} pdataOld
     * @return {undefined}
     */
    var trigger = function(pdataOld) {
      fn(self, pdataOld);
      /** @type {number} */
      self.length = history.length;
      that.notifyListeners(self.location, self.action);
    };
    /**
     * @param {Object} next
     * @return {undefined}
     */
    var find = function(next) {
      if (!Object(frame.isExtraneousPopstateEvent)(next)) {
        onSuccess(load(next.state));
      }
    };
    /**
     * @return {undefined}
     */
    var onload = function() {
      onSuccess(load(initialize()));
    };
    /** @type {boolean} */
    var C = false;
    /**
     * @param {Object} e
     * @return {undefined}
     */
    var onSuccess = function(e) {
      if (C) {
        /** @type {boolean} */
        C = false;
        trigger();
      } else {
        that.confirmTransitionTo(e, "POP", h, function(dataAndEvents) {
          if (dataAndEvents) {
            trigger({
              action : "POP",
              location : e
            });
          } else {
            back(e);
          }
        });
      }
    };
    /**
     * @param {Object} event
     * @return {undefined}
     */
    var back = function(event) {
      var match = self.location;
      var a = keys.indexOf(match.key);
      if (-1 === a) {
        /** @type {number} */
        a = 0;
      }
      var b = keys.indexOf(event.key);
      if (-1 === b) {
        /** @type {number} */
        b = 0;
      }
      /** @type {number} */
      var expectedNumberOfNonCommentArgs = a - b;
      if (expectedNumberOfNonCommentArgs) {
        /** @type {boolean} */
        C = true;
        go(expectedNumberOfNonCommentArgs);
      }
    };
    var message = load(initialize());
    /** @type {Array} */
    var keys = [message.key];
    /**
     * @param {?} expectedHashCode
     * @return {?}
     */
    var callback = function(expectedHashCode) {
      return key + Object(dir.createPath)(expectedHashCode);
    };
    /**
     * @param {number} expectedNumberOfNonCommentArgs
     * @return {undefined}
     */
    var go = function(expectedNumberOfNonCommentArgs) {
      history.go(expectedNumberOfNonCommentArgs);
    };
    /** @type {number} */
    var M = 0;
    /**
     * @param {number} expectedNumberOfNonCommentArgs
     * @return {undefined}
     */
    var $ = function(expectedNumberOfNonCommentArgs) {
      if (1 === (M += expectedNumberOfNonCommentArgs)) {
        Object(frame.addEventListener)(window, "popstate", find);
        if (r) {
          Object(frame.addEventListener)(window, "hashchange", onload);
        }
      } else {
        if (0 === M) {
          Object(frame.removeEventListener)(window, "popstate", find);
          if (r) {
            Object(frame.removeEventListener)(window, "hashchange", onload);
          }
        }
      }
    };
    /** @type {boolean} */
    var D = false;
    var self = {
      length : history.length,
      action : "POP",
      location : message,
      /** @type {function (?): ?} */
      createHref : callback,
      /**
       * @param {?} expectedHashCode
       * @param {string} value
       * @return {undefined}
       */
      push : function(expectedHashCode, value) {
        isArray()(!("object" === (void 0 === expectedHashCode ? "undefined" : y(expectedHashCode)) && (void 0 !== expectedHashCode.state && void 0 !== value)), "You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");
        var test = Object(options.createLocation)(expectedHashCode, value, write(), self.location);
        that.confirmTransitionTo(test, "PUSH", h, function(dataAndEvents) {
          if (dataAndEvents) {
            var url = callback(test);
            var name = test.key;
            var data = test.state;
            if (n) {
              if (history.pushState({
                key : name,
                state : data
              }, null, url), useMedia) {
                window.location.href = url;
              } else {
                var ret = keys.indexOf(self.location.key);
                var _ = keys.slice(0, -1 === ret ? 0 : ret + 1);
                _.push(test.key);
                keys = _;
                trigger({
                  action : "PUSH",
                  location : test
                });
              }
            } else {
              isArray()(void 0 === data, "Browser history cannot push state in browsers that do not support HTML5 history");
              window.location.href = url;
            }
          }
        });
      },
      /**
       * @param {?} expectedHashCode
       * @param {string} value
       * @return {undefined}
       */
      replace : function(expectedHashCode, value) {
        isArray()(!("object" === (void 0 === expectedHashCode ? "undefined" : y(expectedHashCode)) && (void 0 !== expectedHashCode.state && void 0 !== value)), "You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");
        var test = Object(options.createLocation)(expectedHashCode, value, write(), self.location);
        that.confirmTransitionTo(test, "REPLACE", h, function(dataAndEvents) {
          if (dataAndEvents) {
            var expectedHashCode = callback(test);
            var name = test.key;
            var data = test.state;
            if (n) {
              if (history.replaceState({
                key : name,
                state : data
              }, null, expectedHashCode), useMedia) {
                window.location.replace(expectedHashCode);
              } else {
                var i = keys.indexOf(self.location.key);
                if (-1 !== i) {
                  keys[i] = test.key;
                }
                trigger({
                  action : "REPLACE",
                  location : test
                });
              }
            } else {
              isArray()(void 0 === data, "Browser history cannot replace state in browsers that do not support HTML5 history");
              window.location.replace(expectedHashCode);
            }
          }
        });
      },
      /** @type {function (number): undefined} */
      go : go,
      /**
       * @return {?}
       */
      goBack : function() {
        return go(-1);
      },
      /**
       * @return {?}
       */
      goForward : function() {
        return go(1);
      },
      /**
       * @return {?}
       */
      block : function() {
        var firstLength = arguments.length > 0 && (void 0 !== arguments[0] && arguments[0]);
        var throttledUpdate = that.setPrompt(firstLength);
        return D || ($(1), D = true), function() {
          return D && (D = false, $(-1)), throttledUpdate();
        };
      },
      /**
       * @param {Function} el
       * @return {?}
       */
      listen : function(el) {
        var fontSize = that.appendListener(el);
        return $(1), function() {
          $(-1);
          fontSize();
        };
      }
    };
    return self;
  };
}, function(dataAndEvents, object, $) {
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  var content = $(1);
  var call = $.n(content);
  var update = $(3);
  var throttledUpdate = $.n(update);
  var options = $(7);
  var dir = $(5);
  var obj = $(16);
  var frame = $(36);
  var template = Object.assign || function(expectedHashCode) {
    /** @type {number} */
    var i = 1;
    for (;i < arguments.length;i++) {
      var iterable = arguments[i];
      var key;
      for (key in iterable) {
        if (Object.prototype.hasOwnProperty.call(iterable, key)) {
          expectedHashCode[key] = iterable[key];
        }
      }
    }
    return expectedHashCode;
  };
  var viewItems = {
    hashbang : {
      /**
       * @param {?} elems
       * @return {?}
       */
      encodePath : function(elems) {
        return "!" === elems.charAt(0) ? elems : "!/" + Object(dir.stripLeadingSlash)(elems);
      },
      /**
       * @param {?} str
       * @return {?}
       */
      decodePath : function(str) {
        return "!" === str.charAt(0) ? str.substr(1) : str;
      }
    },
    noslash : {
      encodePath : dir.stripLeadingSlash,
      decodePath : dir.addLeadingSlash
    },
    slash : {
      encodePath : dir.addLeadingSlash,
      decodePath : dir.addLeadingSlash
    }
  };
  /**
   * @return {?}
   */
  var trigger = function() {
    /** @type {string} */
    var url = window.location.href;
    /** @type {number} */
    var hashIndex = url.indexOf("#");
    return-1 === hashIndex ? "" : url.substring(hashIndex + 1);
  };
  /**
   * @param {?} path
   * @return {?}
   */
  var handler = function(path) {
    return window.location.hash = path;
  };
  /**
   * @param {?} type
   * @return {undefined}
   */
  var on = function(type) {
    /** @type {number} */
    var num = window.location.href.indexOf("#");
    window.location.replace(window.location.href.slice(0, num >= 0 ? num : 0) + "#" + type);
  };
  /**
   * @return {?}
   */
  object.default = function() {
    var entry = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    throttledUpdate()(frame.canUseDOM, "Hash history needs a DOM");
    /** @type {History} */
    var context = window.history;
    var r20 = Object(frame.supportsGoWithoutReloadUsingHash)();
    var value = entry.getUserConfirmation;
    var h = void 0 === value ? frame.getConfirmation : value;
    var i = entry.hashType;
    var index = void 0 === i ? "slash" : i;
    var root = entry.basename ? Object(dir.stripTrailingSlash)(Object(dir.addLeadingSlash)(entry.basename)) : "";
    var item = viewItems[index];
    var parse = item.encodePath;
    var children = item.decodePath;
    /**
     * @return {?}
     */
    var isObject = function() {
      var nodes = children(trigger());
      return call()(!root || Object(dir.hasBasename)(nodes, root), 'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "' + nodes + '" to begin with "' + root + '".'), root && (nodes = Object(dir.stripBasename)(nodes, root)), Object(options.createLocation)(nodes);
    };
    var that = Object(obj.default)();
    /**
     * @param {string} pdataOld
     * @return {undefined}
     */
    var callback = function(pdataOld) {
      template(data, pdataOld);
      /** @type {number} */
      data.length = context.length;
      that.notifyListeners(data.location, data.action);
    };
    /** @type {boolean} */
    var asStr = false;
    /** @type {null} */
    var type = null;
    /**
     * @return {undefined}
     */
    var onSuccess = function() {
      var val = trigger();
      var json = parse(val);
      if (val !== json) {
        on(json);
      } else {
        var obj = isObject();
        var dl = data.location;
        if (!asStr && Object(options.locationsAreEqual)(dl, obj)) {
          return;
        }
        if (type === Object(dir.createPath)(obj)) {
          return;
        }
        /** @type {null} */
        type = null;
        cb(obj);
      }
    };
    /**
     * @param {Object} t
     * @return {undefined}
     */
    var cb = function(t) {
      if (asStr) {
        /** @type {boolean} */
        asStr = false;
        callback();
      } else {
        that.confirmTransitionTo(t, "POP", h, function(dataAndEvents) {
          if (dataAndEvents) {
            callback({
              action : "POP",
              location : t
            });
          } else {
            error(t);
          }
        });
      }
    };
    /**
     * @param {Object} t
     * @return {undefined}
     */
    var error = function(t) {
      var dl = data.location;
      var a = m.lastIndexOf(Object(dir.createPath)(dl));
      if (-1 === a) {
        /** @type {number} */
        a = 0;
      }
      var b = m.lastIndexOf(Object(dir.createPath)(t));
      if (-1 === b) {
        /** @type {number} */
        b = 0;
      }
      /** @type {number} */
      var expectedNumberOfNonCommentArgs = a - b;
      if (expectedNumberOfNonCommentArgs) {
        /** @type {boolean} */
        asStr = true;
        go(expectedNumberOfNonCommentArgs);
      }
    };
    var val = trigger();
    var json = parse(val);
    if (val !== json) {
      on(json);
    }
    var originalEvent = isObject();
    /** @type {Array} */
    var m = [Object(dir.createPath)(originalEvent)];
    /**
     * @param {number} expectedNumberOfNonCommentArgs
     * @return {undefined}
     */
    var go = function(expectedNumberOfNonCommentArgs) {
      call()(r20, "Hash history go(n) causes a full page reload in this browser");
      context.go(expectedNumberOfNonCommentArgs);
    };
    /** @type {number} */
    var D = 0;
    /**
     * @param {number} expectedNumberOfNonCommentArgs
     * @return {undefined}
     */
    var $ = function(expectedNumberOfNonCommentArgs) {
      if (1 === (D += expectedNumberOfNonCommentArgs)) {
        Object(frame.addEventListener)(window, "hashchange", onSuccess);
      } else {
        if (0 === D) {
          Object(frame.removeEventListener)(window, "hashchange", onSuccess);
        }
      }
    };
    /** @type {boolean} */
    var L = false;
    var data = {
      length : context.length,
      action : "POP",
      location : originalEvent,
      /**
       * @param {?} expectedHashCode
       * @return {?}
       */
      createHref : function(expectedHashCode) {
        return "#" + parse(root + Object(dir.createPath)(expectedHashCode));
      },
      /**
       * @param {?} expectedHashCode
       * @param {string} value
       * @return {undefined}
       */
      push : function(expectedHashCode, value) {
        call()(void 0 === value, "Hash history cannot push state; it is ignored");
        var location = Object(options.createLocation)(expectedHashCode, void 0, void 0, data.location);
        that.confirmTransitionTo(location, "PUSH", h, function(dataAndEvents) {
          if (dataAndEvents) {
            var expectedHashCode = Object(dir.createPath)(location);
            var json = parse(root + expectedHashCode);
            if (trigger() !== json) {
              type = expectedHashCode;
              handler(json);
              var ret = m.lastIndexOf(Object(dir.createPath)(data.location));
              var arg = m.slice(0, -1 === ret ? 0 : ret + 1);
              arg.push(expectedHashCode);
              m = arg;
              callback({
                action : "PUSH",
                location : location
              });
            } else {
              call()(false, "Hash history cannot PUSH the same path; a new entry will not be added to the history stack");
              callback();
            }
          }
        });
      },
      /**
       * @param {?} expectedHashCode
       * @param {string} value
       * @return {undefined}
       */
      replace : function(expectedHashCode, value) {
        call()(void 0 === value, "Hash history cannot replace state; it is ignored");
        var location = Object(options.createLocation)(expectedHashCode, void 0, void 0, data.location);
        that.confirmTransitionTo(location, "REPLACE", h, function(dataAndEvents) {
          if (dataAndEvents) {
            var path = Object(dir.createPath)(location);
            var json = parse(root + path);
            if (trigger() !== json) {
              type = path;
              on(json);
            }
            var name = m.indexOf(Object(dir.createPath)(data.location));
            if (-1 !== name) {
              m[name] = path;
            }
            callback({
              action : "REPLACE",
              location : location
            });
          }
        });
      },
      /** @type {function (number): undefined} */
      go : go,
      /**
       * @return {?}
       */
      goBack : function() {
        return go(-1);
      },
      /**
       * @return {?}
       */
      goForward : function() {
        return go(1);
      },
      /**
       * @return {?}
       */
      block : function() {
        var firstLength = arguments.length > 0 && (void 0 !== arguments[0] && arguments[0]);
        var throttledUpdate = that.setPrompt(firstLength);
        return L || ($(1), L = true), function() {
          return L && (L = false, $(-1)), throttledUpdate();
        };
      },
      /**
       * @param {Function} el
       * @return {?}
       */
      listen : function(el) {
        var fontSize = that.appendListener(el);
        return $(1), function() {
          $(-1);
          fontSize();
        };
      }
    };
    return data;
  };
}, function(dataAndEvents, object, parse) {
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  var c = parse(1);
  var select = parse.n(c);
  var root = parse(5);
  var url = parse(7);
  var obj = parse(16);
  /** @type {function (?): ?} */
  var y = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(dataAndEvents) {
    return typeof dataAndEvents;
  } : function(b) {
    return b && ("function" == typeof Symbol && (b.constructor === Symbol && b !== Symbol.prototype)) ? "symbol" : typeof b;
  };
  var makeTriggerData = Object.assign || function(expectedHashCode) {
    /** @type {number} */
    var i = 1;
    for (;i < arguments.length;i++) {
      var iterable = arguments[i];
      var key;
      for (key in iterable) {
        if (Object.prototype.hasOwnProperty.call(iterable, key)) {
          expectedHashCode[key] = iterable[key];
        }
      }
    }
    return expectedHashCode;
  };
  /**
   * @param {number} value
   * @param {number} x
   * @param {number} from
   * @return {?}
   */
  var indexOf = function(value, x, from) {
    return Math.min(Math.max(value, x), from);
  };
  /**
   * @return {?}
   */
  object.default = function() {
    var options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    var h = options.getUserConfirmation;
    var value = options.initialEntries;
    var newValue = void 0 === value ? ["/"] : value;
    var i = options.initialIndex;
    var a = void 0 === i ? 0 : i;
    var e = options.keyLength;
    var point = void 0 === e ? 6 : e;
    var that = Object(obj.default)();
    /**
     * @param {string} pdataOld
     * @return {undefined}
     */
    var trigger = function(pdataOld) {
      makeTriggerData(data, pdataOld);
      data.length = data.entries.length;
      that.notifyListeners(data.location, data.action);
    };
    /**
     * @return {?}
     */
    var write = function() {
      return Math.random().toString(36).substr(2, point);
    };
    var idx = indexOf(a, 0, newValue.length - 1);
    var names = newValue.map(function(string) {
      return "string" == typeof string ? Object(url.createLocation)(string, void 0, write()) : Object(url.createLocation)(string, void 0, string.key || write());
    });
    var l = root.createPath;
    /**
     * @param {number} expectedNumberOfNonCommentArgs
     * @return {undefined}
     */
    var go = function(expectedNumberOfNonCommentArgs) {
      var i = indexOf(data.index + expectedNumberOfNonCommentArgs, 0, data.entries.length - 1);
      var location = data.entries[i];
      that.confirmTransitionTo(location, "POP", h, function(dataAndEvents) {
        if (dataAndEvents) {
          trigger({
            action : "POP",
            location : location,
            index : i
          });
        } else {
          trigger();
        }
      });
    };
    var data = {
      length : names.length,
      action : "POP",
      location : names[idx],
      index : idx,
      entries : names,
      createHref : l,
      /**
       * @param {?} expectedHashCode
       * @param {string} value
       * @return {undefined}
       */
      push : function(expectedHashCode, value) {
        select()(!("object" === (void 0 === expectedHashCode ? "undefined" : y(expectedHashCode)) && (void 0 !== expectedHashCode.state && void 0 !== value)), "You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");
        var text = Object(url.createLocation)(expectedHashCode, value, write(), data.location);
        that.confirmTransitionTo(text, "PUSH", h, function(dataAndEvents) {
          if (dataAndEvents) {
            var i = data.index + 1;
            var jsonml = data.entries.slice(0);
            if (jsonml.length > i) {
              jsonml.splice(i, jsonml.length - i, text);
            } else {
              jsonml.push(text);
            }
            trigger({
              action : "PUSH",
              location : text,
              index : i,
              entries : jsonml
            });
          }
        });
      },
      /**
       * @param {?} expectedHashCode
       * @param {string} value
       * @return {undefined}
       */
      replace : function(expectedHashCode, value) {
        select()(!("object" === (void 0 === expectedHashCode ? "undefined" : y(expectedHashCode)) && (void 0 !== expectedHashCode.state && void 0 !== value)), "You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");
        var t = Object(url.createLocation)(expectedHashCode, value, write(), data.location);
        that.confirmTransitionTo(t, "REPLACE", h, function(dataAndEvents) {
          if (dataAndEvents) {
            data.entries[data.index] = t;
            trigger({
              action : "REPLACE",
              location : t
            });
          }
        });
      },
      /** @type {function (number): undefined} */
      go : go,
      /**
       * @return {?}
       */
      goBack : function() {
        return go(-1);
      },
      /**
       * @return {?}
       */
      goForward : function() {
        return go(1);
      },
      /**
       * @param {?} i
       * @return {?}
       */
      canGo : function(i) {
        var row = data.index + i;
        return row >= 0 && row < data.entries.length;
      },
      /**
       * @return {?}
       */
      block : function() {
        var firstLength = arguments.length > 0 && (void 0 !== arguments[0] && arguments[0]);
        return that.setPrompt(firstLength);
      },
      /**
       * @param {Function} el
       * @return {?}
       */
      listen : function(el) {
        return that.appendListener(el);
      }
    };
    return data;
  };
}, function(dataAndEvents, item, expression) {
  Object.defineProperty(item, "__esModule", {
    value : true
  });
  var obj = expression(103);
  item.default = obj.default;
}, function(dataAndEvents, self, $) {
  /**
   * @param {Object} iterable
   * @param {Array} arr
   * @return {?}
   */
  function each(iterable, arr) {
    var object = {};
    var key;
    for (key in iterable) {
      if (!(arr.indexOf(key) >= 0)) {
        if (Object.prototype.hasOwnProperty.call(iterable, key)) {
          object[key] = iterable[key];
        }
      }
    }
    return object;
  }
  /**
   * @param {?} dataAndEvents
   * @param {Function} n
   * @return {undefined}
   */
  function pow(dataAndEvents, n) {
    if (!(dataAndEvents instanceof n)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  /**
   * @param {string} key
   * @param {?} b
   * @return {?}
   */
  function b(key, b) {
    if (!key) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return!b || "object" != typeof b && "function" != typeof b ? key : b;
  }
  /**
   * @param {Object} m
   * @param {Object} b
   * @return {undefined}
   */
  function create(m, b) {
    if ("function" != typeof b && null !== b) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof b);
    }
    /** @type {Object} */
    m.prototype = Object.create(b && b.prototype, {
      constructor : {
        value : m,
        enumerable : false,
        writable : true,
        configurable : true
      }
    });
    if (b) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(m, b);
      } else {
        /** @type {Object} */
        m.__proto__ = b;
      }
    }
  }
  Object.defineProperty(self, "__esModule", {
    value : true
  });
  var update = $(1);
  var throttledUpdate = $.n(update);
  var value = $(3);
  var iterator = $.n(value);
  var content = $(0);
  var root = $.n(content);
  var scripts = $(2);
  var object = $.n(scripts);
  var s = $(4);
  var obj = ($.n(s), $(14));
  var toLowerCase = Object.assign || function(expectedHashCode) {
    /** @type {number} */
    var i = 1;
    for (;i < arguments.length;i++) {
      var iterable = arguments[i];
      var key;
      for (key in iterable) {
        if (Object.prototype.hasOwnProperty.call(iterable, key)) {
          expectedHashCode[key] = iterable[key];
        }
      }
    }
    return expectedHashCode;
  };
  /**
   * @param {string} input
   * @return {?}
   */
  var url = function(input) {
    var value = input.pathname;
    var computed = void 0 === value ? "/" : value;
    var i = input.search;
    var path = void 0 === i ? "" : i;
    var length = input.hash;
    var buffer = void 0 === length ? "" : length;
    return{
      pathname : computed,
      search : "?" === path ? "" : path,
      hash : "#" === buffer ? "" : buffer
    };
  };
  /**
   * @param {?} object
   * @param {string} pdataOld
   * @return {?}
   */
  var hasKey = function(object, pdataOld) {
    return object ? toLowerCase({}, pdataOld, {
      pathname : Object(s.addLeadingSlash)(object) + pdataOld.pathname
    }) : pdataOld;
  };
  /**
   * @param {?} event
   * @param {string} pdataOld
   * @return {?}
   */
  var next = function(event, pdataOld) {
    if (!event) {
      return pdataOld;
    }
    var boundary = Object(s.addLeadingSlash)(event);
    return 0 !== pdataOld.pathname.indexOf(boundary) ? pdataOld : toLowerCase({}, pdataOld, {
      pathname : pdataOld.pathname.substr(boundary.length)
    });
  };
  /**
   * @param {?} string
   * @return {?}
   */
  var filter = function(string) {
    return "string" == typeof string ? Object(s.parsePath)(string) : url(string);
  };
  /**
   * @param {string} deepDataAndEvents
   * @return {?}
   */
  var clone = function(deepDataAndEvents) {
    return "string" == typeof deepDataAndEvents ? deepDataAndEvents : Object(s.createPath)(deepDataAndEvents);
  };
  /**
   * @param {string} callback
   * @return {?}
   */
  var some = function(callback) {
    return function() {
      iterator()(false, "You cannot %s with <StaticRouter>", callback);
    };
  };
  /**
   * @return {undefined}
   */
  var handleBlock = function() {
  };
  var $scope = function(f) {
    /**
     * @return {?}
     */
    function e() {
      var promise;
      var self;
      var oldconfig;
      pow(this, e);
      /** @type {number} */
      var l = arguments.length;
      /** @type {Array} */
      var args = Array(l);
      /** @type {number} */
      var i = 0;
      for (;i < l;i++) {
        args[i] = arguments[i];
      }
      return promise = self = b(this, f.call.apply(f, [this].concat(args))), self.createHref = function(expectedHashCode) {
        return Object(s.addLeadingSlash)(self.props.basename + clone(expectedHashCode));
      }, self.handlePush = function(expectedHashCode) {
        var result = self.props;
        var value = result.basename;
        var context = result.context;
        /** @type {string} */
        context.action = "PUSH";
        context.location = hasKey(value, filter(expectedHashCode));
        context.url = clone(context.location);
      }, self.handleReplace = function(expectedHashCode) {
        var result = self.props;
        var value = result.basename;
        var context = result.context;
        /** @type {string} */
        context.action = "REPLACE";
        context.location = hasKey(value, filter(expectedHashCode));
        context.url = clone(context.location);
      }, self.handleListen = function() {
        return handleBlock;
      }, self.handleBlock = function() {
        return handleBlock;
      }, oldconfig = promise, b(self, oldconfig);
    }
    return create(e, f), e.prototype.getChildContext = function() {
      return{
        router : {
          staticContext : this.props.context
        }
      };
    }, e.prototype.componentWillMount = function() {
      throttledUpdate()(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.");
    }, e.prototype.render = function() {
      var args = this.props;
      var t = args.basename;
      var item = (args.context, args.location);
      var pdataOld = each(args, ["basename", "context", "location"]);
      var options = {
        createHref : this.createHref,
        action : "POP",
        location : next(t, filter(item)),
        push : this.handlePush,
        replace : this.handleReplace,
        go : some("go"),
        goBack : some("goBack"),
        goForward : some("goForward"),
        listen : this.handleListen,
        block : this.handleBlock
      };
      return root.a.createElement(obj.default, toLowerCase({}, pdataOld, {
        history : options
      }));
    }, e;
  }(root.a.Component);
  $scope.propTypes = {
    basename : object.a.string,
    context : object.a.object.isRequired,
    location : object.a.oneOfType([object.a.string, object.a.object])
  };
  $scope.defaultProps = {
    basename : "",
    location : "/"
  };
  $scope.childContextTypes = {
    router : object.a.object.isRequired
  };
  self.default = $scope;
}, function(dataAndEvents, item, expression) {
  Object.defineProperty(item, "__esModule", {
    value : true
  });
  var obj = expression(105);
  item.default = obj.default;
}, function(dataAndEvents, prototype, $) {
  /**
   * @param {?} dataAndEvents
   * @param {Function} n
   * @return {undefined}
   */
  function pow(dataAndEvents, n) {
    if (!(dataAndEvents instanceof n)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  /**
   * @param {string} dataAndEvents
   * @param {?} obj
   * @return {?}
   */
  function keys(dataAndEvents, obj) {
    if (!dataAndEvents) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return!obj || "object" != typeof obj && "function" != typeof obj ? dataAndEvents : obj;
  }
  /**
   * @param {Object} m
   * @param {Object} b
   * @return {undefined}
   */
  function create(m, b) {
    if ("function" != typeof b && null !== b) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof b);
    }
    /** @type {Object} */
    m.prototype = Object.create(b && b.prototype, {
      constructor : {
        value : m,
        enumerable : false,
        writable : true,
        configurable : true
      }
    });
    if (b) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(m, b);
      } else {
        /** @type {Object} */
        m.__proto__ = b;
      }
    }
  }
  Object.defineProperty(prototype, "__esModule", {
    value : true
  });
  var content = $(0);
  var actual = $.n(content);
  var marker = $(2);
  var node = $.n(marker);
  var elems = $(1);
  var isArray = $.n(elems);
  var update = $(3);
  var throttledUpdate = $.n(update);
  var obj = $(15);
  var Constructor = function(_super) {
    /**
     * @return {?}
     */
    function e() {
      return pow(this, e), keys(this, _super.apply(this, arguments));
    }
    return create(e, _super), e.prototype.componentWillMount = function() {
      throttledUpdate()(this.context.router, "You should not use <Switch> outside a <Router>");
    }, e.prototype.componentWillReceiveProps = function(keepData) {
      isArray()(!(keepData.location && !this.props.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
      isArray()(!(!keepData.location && this.props.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
    }, e.prototype.render = function() {
      var location = this.context.router.route;
      var ol = this.props.children;
      var url = this.props.location || location.location;
      var index = void 0;
      var value = void 0;
      return actual.a.Children.forEach(ol, function(e) {
        if (actual.a.isValidElement(e)) {
          var options = e.props;
          var to = options.path;
          var exact = options.exact;
          var async = options.strict;
          var successCb = options.sensitive;
          var from = options.from;
          var d = to || from;
          if (null == index) {
            /** @type {Object} */
            value = e;
            index = d ? Object(obj.default)(url.pathname, {
              path : d,
              exact : exact,
              strict : async,
              sensitive : successCb
            }) : location.match;
          }
        }
      }), index ? actual.a.cloneElement(value, {
        location : url,
        computedMatch : index
      }) : null;
    }, e;
  }(actual.a.Component);
  Constructor.contextTypes = {
    router : node.a.shape({
      route : node.a.object.isRequired
    }).isRequired
  };
  Constructor.propTypes = {
    children : node.a.node,
    location : node.a.object
  };
  prototype.default = Constructor;
}, function(dataAndEvents, item, expression) {
  Object.defineProperty(item, "__esModule", {
    value : true
  });
  var obj = expression(15);
  item.default = obj.default;
}, function(dataAndEvents, item, expression) {
  Object.defineProperty(item, "__esModule", {
    value : true
  });
  var obj = expression(108);
  item.default = obj.default;
}, function(dataAndEvents, object, jQuery) {
  /**
   * @param {Object} iterable
   * @param {Array} arr
   * @return {?}
   */
  function forEach(iterable, arr) {
    var object = {};
    var key;
    for (key in iterable) {
      if (!(arr.indexOf(key) >= 0)) {
        if (Object.prototype.hasOwnProperty.call(iterable, key)) {
          object[key] = iterable[key];
        }
      }
    }
    return object;
  }
  Object.defineProperty(object, "__esModule", {
    value : true
  });
  var scripts = jQuery(0);
  var opts = jQuery.n(scripts);
  var which = jQuery(2);
  var args = jQuery.n(which);
  var elems = jQuery(21);
  var isArray = jQuery.n(elems);
  var obj = jQuery(35);
  var templateFunc = Object.assign || function(expectedHashCode) {
    /** @type {number} */
    var i = 1;
    for (;i < arguments.length;i++) {
      var iterable = arguments[i];
      var key;
      for (key in iterable) {
        if (Object.prototype.hasOwnProperty.call(iterable, key)) {
          expectedHashCode[key] = iterable[key];
        }
      }
    }
    return expectedHashCode;
  };
  /**
   * @param {?} expectedHashCode
   * @return {?}
   */
  object.default = function(expectedHashCode) {
    /**
     * @param {Object} value
     * @return {?}
     */
    var Constructor = function(value) {
      var name = value.wrappedComponentRef;
      var pdataOld = forEach(value, ["wrappedComponentRef"]);
      return opts.a.createElement(obj.default, {
        /**
         * @param {?} expectedNumberOfNonCommentArgs
         * @return {?}
         */
        render : function(expectedNumberOfNonCommentArgs) {
          return opts.a.createElement(expectedHashCode, templateFunc({}, pdataOld, expectedNumberOfNonCommentArgs, {
            ref : name
          }));
        }
      });
    };
    return Constructor.displayName = "withRouter(" + (expectedHashCode.displayName || expectedHashCode.name) + ")", Constructor.WrappedComponent = expectedHashCode, Constructor.propTypes = {
      wrappedComponentRef : args.a.func
    }, isArray()(Constructor, expectedHashCode);
  };
}, function(dataAndEvents, param, deepDataAndEvents) {
  /**
   * @param {?} cb
   * @return {?}
   */
  function makeCallback(cb) {
    return function(self) {
      var req = self.dispatch;
      var conf = self.getState;
      return function($timeout) {
        return function(fn) {
          return "function" == typeof fn ? fn(req, conf, cb) : $timeout(fn);
        };
      };
    };
  }
  /** @type {boolean} */
  param.__esModule = true;
  var def = makeCallback();
  /** @type {function (?): ?} */
  def.withExtraArgument = makeCallback;
  param.default = def;
}, function(dataAndEvents, exports, deepDataAndEvents) {
  /**
   * @param {?} context
   * @param {?} node
   * @return {?}
   */
  function detach(context, node) {
    return context === node;
  }
  /**
   * @param {?} callback
   * @param {Object} values
   * @param {Object} a
   * @return {?}
   */
  function normalize(callback, values, a) {
    if (null === values || (null === a || values.length !== a.length)) {
      return false;
    }
    var valuesLen = values.length;
    /** @type {number} */
    var i = 0;
    for (;i < valuesLen;i++) {
      if (!callback(values[i], a[i])) {
        return false;
      }
    }
    return true;
  }
  /**
   * @param {Function} matcherFunction
   * @return {?}
   */
  function resolve(matcherFunction) {
    var restoreScript = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : detach;
    /** @type {null} */
    var progressValues = null;
    /** @type {null} */
    var returnValue = null;
    return function() {
      return normalize(restoreScript, progressValues, arguments) || (returnValue = matcherFunction.apply(null, arguments)), progressValues = arguments, returnValue;
    };
  }
  /**
   * @param {string} data
   * @return {?}
   */
  function done(data) {
    var d = Array.isArray(data[0]) ? data[0] : data;
    if (!d.every(function(opts) {
      return "function" == typeof opts;
    })) {
      var n = d.map(function(dataAndEvents) {
        return typeof dataAndEvents;
      }).join(", ");
      throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: [" + n + "]");
    }
    return d;
  }
  /**
   * @param {Function} fn
   * @return {?}
   */
  function next(fn) {
    /** @type {number} */
    var len = arguments.length;
    /** @type {Array} */
    var args = Array(len > 1 ? len - 1 : 0);
    /** @type {number} */
    var i = 1;
    for (;i < len;i++) {
      args[i - 1] = arguments[i];
    }
    return function() {
      /** @type {number} */
      var n = arguments.length;
      /** @type {Array} */
      var result = Array(n);
      /** @type {number} */
      var i = 0;
      for (;i < n;i++) {
        result[i] = arguments[i];
      }
      /** @type {number} */
      var recomputations = 0;
      var matcherFunction = result.pop();
      var io = done(result);
      var core_push = fn.apply(void 0, [function() {
        return recomputations++, matcherFunction.apply(null, arguments);
      }].concat(args));
      var resolvedValue = resolve(function() {
        /** @type {Array} */
        var arr = [];
        var numrows = io.length;
        /** @type {number} */
        var k = 0;
        for (;k < numrows;k++) {
          arr.push(io[k].apply(null, arguments));
        }
        return core_push.apply(null, arr);
      });
      return resolvedValue.resultFunc = matcherFunction, resolvedValue.recomputations = function() {
        return recomputations;
      }, resolvedValue.resetRecomputations = function() {
        return recomputations = 0;
      }, resolvedValue;
    };
  }
  /** @type {boolean} */
  exports.__esModule = true;
  /** @type {function (Function): ?} */
  exports.defaultMemoize = resolve;
  /** @type {function (Function): ?} */
  exports.createSelectorCreator = next;
  /**
   * @param {Object} registry
   * @return {?}
   */
  exports.createStructuredSelector = function(registry) {
    var computed = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : value;
    if ("object" != typeof registry) {
      throw new Error("createStructuredSelector expects first argument to be an object where each property is a selector, instead received a " + typeof registry);
    }
    /** @type {Array.<string>} */
    var mod = Object.keys(registry);
    return computed(mod.map(function(uid) {
      return registry[uid];
    }), function() {
      /** @type {number} */
      var l = arguments.length;
      /** @type {Array} */
      var args = Array(l);
      /** @type {number} */
      var i = 0;
      for (;i < l;i++) {
        args[i] = arguments[i];
      }
      return args.reduce(function(exports, val, prop) {
        return exports[mod[prop]] = val, exports;
      }, {});
    });
  };
  var value = exports.createSelector = next(resolve);
}, function(opts, arg, mapper) {
  var result;
  !function() {
    var self = {};
    (function(global) {
      /**
       * @param {string} param
       * @param {Function} type
       * @return {undefined}
       */
      function run(param, type) {
        var $name$$ = param.split(".");
        var $cur_opt_objectToExportTo = Le;
        if (!($name$$[0] in $cur_opt_objectToExportTo)) {
          if (!!$cur_opt_objectToExportTo.execScript) {
            $cur_opt_objectToExportTo.execScript("var " + $name$$[0]);
          }
        }
        var $part;
        for (;$name$$.length && ($part = $name$$.shift());) {
          if ($name$$.length || void 0 === type) {
            $cur_opt_objectToExportTo = $cur_opt_objectToExportTo[$part] ? $cur_opt_objectToExportTo[$part] : $cur_opt_objectToExportTo[$part] = {};
          } else {
            /** @type {Function} */
            $cur_opt_objectToExportTo[$part] = type;
          }
        }
      }
      /**
       * @param {Function} child
       * @return {undefined}
       */
      function __extends(child) {
        /**
         * @return {undefined}
         */
        function ctor() {
        }
        /** @type {function (): undefined} */
        var parent = EventDispatcher;
        ctor.prototype = parent.prototype;
        child.Ze = parent.prototype;
        child.prototype = new ctor;
        /** @type {Function} */
        child.prototype.constructor = child;
        /**
         * @param {?} opt_context
         * @param {?} method
         * @param {?} dataAndEvents
         * @return {?}
         */
        child.Xe = function(opt_context, method, dataAndEvents) {
          return parent.prototype[method].apply(opt_context, Array.prototype.slice.call(arguments, 2));
        };
      }
      /**
       * @param {number} decayTime
       * @return {undefined}
       */
      function preloadInit(decayTime) {
        /** @type {number} */
        this.c = Math.exp(Math.log(0.5) / decayTime);
        /** @type {number} */
        this.b = this.a = 0;
      }
      /**
       * @param {Object} x
       * @param {number} i
       * @param {number} v
       * @return {undefined}
       */
      function getColor(x, i, v) {
        /** @type {number} */
        var a = Math.pow(x.c, i);
        /** @type {number} */
        v = v * (1 - a) + a * x.a;
        if (!isNaN(v)) {
          /** @type {number} */
          x.a = v;
          x.b += i;
        }
      }
      /**
       * @param {Object} options
       * @return {?}
       */
      function round(options) {
        return options.a / (1 - Math.pow(options.c, options.b));
      }
      /**
       * @return {undefined}
       */
      function abc() {
        this.b = new preloadInit(2);
        this.c = new preloadInit(5);
        /** @type {number} */
        this.a = 0;
      }
      /**
       * @return {undefined}
       */
      function suiteView() {
      }
      /**
       * @param {number} textStatus
       * @param {number} category
       * @param {number} code
       * @param {?} jqXHR
       * @return {undefined}
       */
      function error(textStatus, category, code, jqXHR) {
        /** @type {number} */
        this.severity = textStatus;
        /** @type {number} */
        this.category = category;
        /** @type {number} */
        this.code = code;
        /** @type {Array.<?>} */
        this.data = Array.prototype.slice.call(arguments, 3);
        /** @type {boolean} */
        this.handled = false;
      }
      /**
       * @param {Object} obj
       * @return {undefined}
       */
      function anonymous(obj) {
        var p;
        if (obj instanceof anonymous) {
          extend(this, obj.ca);
          this.Ba = obj.Ba;
          this.ha = obj.ha;
          indexOf(this, obj.Ia);
          this.$ = obj.$;
          clone(this, setMatrix(obj.a));
          this.ua = obj.ua;
        } else {
          if (obj && (p = String(obj).match(expectedHashCode))) {
            extend(this, p[1] || "", true);
            this.Ba = replace(p[2] || "");
            this.ha = replace(p[3] || "", true);
            indexOf(this, p[4]);
            this.$ = replace(p[5] || "", true);
            clone(this, p[6] || "", true);
            this.ua = replace(p[7] || "");
          } else {
            this.a = new A(null);
          }
        }
      }
      /**
       * @param {?} target
       * @param {string} array
       * @param {boolean} f
       * @return {undefined}
       */
      function extend(target, array, f) {
        target.ca = f ? replace(array, true) : array;
        if (target.ca) {
          target.ca = target.ca.replace(/:$/, "");
        }
      }
      /**
       * @param {?} obj
       * @param {number} end
       * @return {undefined}
       */
      function indexOf(obj, end) {
        if (end) {
          if (end = Number(end), isNaN(end) || 0 > end) {
            throw Error("Bad port number " + end);
          }
          /** @type {number} */
          obj.Ia = end;
        } else {
          /** @type {null} */
          obj.Ia = null;
        }
      }
      /**
       * @param {?} input
       * @param {Object} value
       * @param {boolean} dataAndEvents
       * @return {undefined}
       */
      function clone(input, value, dataAndEvents) {
        if (value instanceof A) {
          /** @type {Object} */
          input.a = value;
        } else {
          if (!dataAndEvents) {
            value = escapeHTML(value, rclass);
          }
          input.a = new A(value);
        }
      }
      /**
       * @param {string} url
       * @param {boolean} dataAndEvents
       * @return {?}
       */
      function replace(url, dataAndEvents) {
        return url ? dataAndEvents ? decodeURI(url) : decodeURIComponent(url) : "";
      }
      /**
       * @param {string} value
       * @param {?} expectedHashCode
       * @param {Object} dataAndEvents
       * @return {?}
       */
      function escapeHTML(value, expectedHashCode, dataAndEvents) {
        return "string" == typeof value ? (value = encodeURI(value).replace(expectedHashCode, pdataOld), dataAndEvents && (value = value.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), value) : null;
      }
      /**
       * @param {number} a
       * @return {?}
       */
      function pdataOld(a) {
        return "%" + ((a = a.charCodeAt(0)) >> 4 & 15).toString(16) + (15 & a).toString(16);
      }
      /**
       * @param {Node} b
       * @return {undefined}
       */
      function A(b) {
        this.b = b || null;
      }
      /**
       * @param {Object} matrix
       * @return {?}
       */
      function setMatrix(matrix) {
        var m = new A;
        if (m.b = matrix.b, matrix.a) {
          var attr;
          var v = {};
          for (attr in matrix.a) {
            v[attr] = matrix.a[attr].concat();
          }
          m.a = v;
          m.c = matrix.c;
        }
        return m;
      }
      /**
       * @return {?}
       */
      function Point() {
        var resolve;
        var reject;
        var promise = new Promise(function(res, rej) {
          /** @type {Function} */
          resolve = res;
          /** @type {Function} */
          reject = rej;
        });
        return promise.resolve = resolve, promise.reject = reject, promise;
      }
      /**
       * @param {?} x
       * @param {boolean} c
       * @return {undefined}
       */
      function calcPoint(x, c) {
        var decay = random();
        this.i = null == x.maxAttempts ? decay.maxAttempts : x.maxAttempts;
        this.f = null == x.baseDelay ? decay.baseDelay : x.baseDelay;
        this.h = null == x.fuzzFactor ? decay.fuzzFactor : x.fuzzFactor;
        this.g = null == x.backoffFactor ? decay.backoffFactor : x.backoffFactor;
        /** @type {number} */
        this.a = 0;
        this.b = this.f;
        if (this.c = c || false) {
          /** @type {number} */
          this.a = 1;
        }
      }
      /**
       * @param {Object} args
       * @return {?}
       */
      function pipe(args) {
        if (args.a >= args.i) {
          if (!args.c) {
            return Promise.reject();
          }
          /** @type {number} */
          args.a = 1;
          args.b = args.f;
        }
        var self = new Point;
        return args.a ? (global.setTimeout(self.resolve, args.b * (1 + (2 * Math.random() - 1) * args.h)), args.b *= args.g) : self.resolve(), args.a++, self;
      }
      /**
       * @return {?}
       */
      function random() {
        return{
          maxAttempts : 2,
          baseDelay : 1E3,
          backoffFactor : 2,
          fuzzFactor : 0.5,
          timeout : 0
        };
      }
      /**
       * @param {Array} base
       * @param {?} obj
       * @param {?} left
       * @param {Object} extra
       * @param {string} name
       * @return {undefined}
       */
      function inherit(base, obj, left, extra, name) {
        var key;
        /** @type {boolean} */
        var object = name in extra;
        for (key in obj) {
          /** @type {string} */
          var rvar = name + "." + key;
          var value = object ? extra[name] : left[key];
          if (object || key in base) {
            if (void 0 === obj[key]) {
              if (void 0 === value || object) {
                delete base[key];
              } else {
                base[key] = value;
              }
            } else {
              if (value.constructor == Object && (obj[key] && obj[key].constructor == Object)) {
                if (!base[key]) {
                  base[key] = value;
                }
                inherit(base[key], obj[key], value, extra, rvar);
              } else {
                if (typeof obj[key] == typeof value) {
                  if (null != obj[key]) {
                    if (obj[key].constructor == value.constructor) {
                      base[key] = obj[key];
                    }
                  }
                }
              }
            }
          }
        }
      }
      /**
       * @param {?} state
       * @return {?}
       */
      function $(state) {
        return JSON.parse(JSON.stringify(state));
      }
      /**
       * @param {Array} value
       * @param {Function} i
       * @return {?}
       */
      function getLayout(value, i) {
        return value.reduce(function(goog, arr, opt_obj) {
          return arr.catch(goog.bind(null, opt_obj));
        }.bind(null, i), Promise.reject());
      }
      /**
       * @param {(Array|number)} opt
       * @param {?} argv
       * @return {?}
       */
      function options(opt, argv) {
        return opt.concat(argv);
      }
      /**
       * @return {undefined}
       */
      function paths() {
      }
      /**
       * @param {string} aspect
       * @return {?}
       */
      function el(aspect) {
        return null != aspect;
      }
      /**
       * @param {string} str
       * @param {?} val
       * @param {string} txt
       * @return {?}
       */
      function src(str, val, txt) {
        return txt.indexOf(str) == val;
      }
      /**
       * @param {number} g
       * @return {undefined}
       */
      function s(g) {
        /** @type {boolean} */
        this.f = false;
        /** @type {Array} */
        this.a = [];
        /** @type {Array} */
        this.b = [];
        /** @type {Array} */
        this.c = [];
        this.g = g || null;
      }
      /**
       * @param {(Array|string)} args
       * @param {?} fn
       * @return {?}
       */
      function shift(args, fn) {
        return{
          uris : args,
          method : "GET",
          body : null,
          headers : {},
          allowCrossSiteCredentials : false,
          retryParameters : fn
        };
      }
      /**
       * @param {Object} d
       * @param {Object} expectedNumberOfNonCommentArgs
       * @param {string} pdataOld
       * @param {Object} message
       * @param {number} j
       * @param {number} callback
       * @return {?}
       */
      function write(d, expectedNumberOfNonCommentArgs, pdataOld, message, j, callback) {
        if (d.f) {
          return Promise.reject();
        }
        var opts = new anonymous(pdataOld.uris[j]);
        var fn = opts.ca;
        if (fn || (fn = location.protocol, fn = fn.slice(0, -1), extend(opts, fn), pdataOld.uris[j] = opts.toString()), !(fn = settings[fn])) {
          return Promise.reject(new error(2, 1, 1E3, opts));
        }
        /** @type {number} */
        var lastX = Date.now();
        return fn(pdataOld.uris[j], pdataOld, expectedNumberOfNonCommentArgs).then(function(args) {
          if (void 0 == args.timeMs) {
            /** @type {number} */
            args.timeMs = Date.now() - lastX;
          }
          /** @type {number} */
          var timeMs = Date.now();
          var promise = Promise.resolve();
          return this.c.forEach(function(listener) {
            promise = promise.then(function() {
              return Promise.resolve(listener(expectedNumberOfNonCommentArgs, args));
            }.bind(this));
          }), (promise = promise.catch(function(err) {
            /** @type {number} */
            var _ref1 = 2;
            throw err instanceof error && (_ref1 = err.severity), new error(_ref1, 1, 1007, err);
          })).then(function() {
            return args.timeMs += Date.now() - timeMs, args.timeMs += callback, args;
          });
        }.bind(d)).catch(function(err) {
          if (err && 1 == err.severity) {
            return j = (j + 1) % pdataOld.uris.length, pipe(message).then(function() {
              return write(this, expectedNumberOfNonCommentArgs, pdataOld, message, j, callback);
            }.bind(this), function() {
              throw err;
            });
          }
          throw err;
        }.bind(d));
      }
      /**
       * @param {Array} a
       * @param {Function} fn
       * @return {?}
       */
      function nextTick(a, fn) {
        /** @type {Array} */
        var b = [];
        /** @type {number} */
        var i = 0;
        for (;i < a.length;++i) {
          /** @type {boolean} */
          var data = false;
          /** @type {number} */
          var j = 0;
          for (;j < b.length && !(data = fn ? fn(a[i], b[j]) : a[i] === b[j]);++j) {
          }
          if (!data) {
            b.push(a[i]);
          }
        }
        return b;
      }
      /**
       * @param {Array} b
       * @param {?} code
       * @param {Function} a
       * @return {?}
       */
      function a(b, code, a) {
        /** @type {number} */
        var bi = 0;
        for (;bi < b.length;++bi) {
          if (a(b[bi], code)) {
            return bi;
          }
        }
        return-1;
      }
      /**
       * @param {Array} stats
       * @param {string} str
       * @return {undefined}
       */
      function validate(stats, str) {
        var end = stats.indexOf(str);
        if (-1 < end) {
          stats.splice(end, 1);
        }
      }
      /**
       * @return {undefined}
       */
      function that() {
        this.a = {};
      }
      /**
       * @return {undefined}
       */
      function Image() {
        this.a = new that;
      }
      /**
       * @param {?} object
       * @param {string} pdataOld
       * @param {?} expectedHashCode
       * @param {Function} e
       * @return {undefined}
       */
      function callback(object, pdataOld, expectedHashCode, e) {
        if (object.a) {
          pdataOld = new Buffer(pdataOld, expectedHashCode, e);
          object.a.push(expectedHashCode, pdataOld);
        }
      }
      /**
       * @param {?} actual
       * @param {string} key
       * @param {string} type
       * @param {Function} cb
       * @return {undefined}
       */
      function match(actual, key, type, cb) {
        callback(actual, key, type, function(outErr) {
          this.la(key, type);
          cb(outErr);
        }.bind(actual));
      }
      /**
       * @param {?} object
       * @return {undefined}
       */
      function clean(object) {
        if (object.a) {
          var key;
          var p = object.a;
          /** @type {Array} */
          var poly = [];
          for (key in p.a) {
            poly.push.apply(poly, p.a[key]);
          }
          /** @type {number} */
          p = 0;
          for (;p < poly.length;++p) {
            poly[p].la();
          }
          object.a.a = {};
        }
      }
      /**
       * @param {Object} opt_target
       * @param {string} type
       * @param {Object} handler
       * @return {undefined}
       */
      function Buffer(opt_target, type, handler) {
        /** @type {Object} */
        this.target = opt_target;
        /** @type {string} */
        this.type = type;
        /** @type {Object} */
        this.a = handler;
        this.target.addEventListener(type, handler, false);
      }
      /**
       * @param {?} str
       * @param {Array} values
       * @return {?}
       */
      function call(str, values) {
        if (!values.length) {
          return str;
        }
        var files = values.map(function(dataAndEvents) {
          return new anonymous(dataAndEvents);
        });
        return str.map(function(dataAndEvents) {
          return new anonymous(dataAndEvents);
        }).map(function(path) {
          return files.map(path.resolve.bind(path));
        }).reduce(options, []).map(function(dstUri) {
          return dstUri.toString();
        });
      }
      /**
       * @param {?} value
       * @param {Array} stream
       * @return {?}
       */
      function token(value, stream) {
        return{
          keySystem : value,
          licenseServerUri : "",
          distinctiveIdentifierRequired : false,
          persistentStateRequired : false,
          audioRobustness : "",
          videoRobustness : "",
          serverCertificate : null,
          initData : stream || [],
          keyIds : []
        };
      }
      /**
       * @param {?} user
       * @return {?}
       */
      function echo(user) {
        return!user || !Object.keys(user).length;
      }
      /**
       * @param {?} object
       * @return {?}
       */
      function keys(object) {
        return Object.keys(object).map(function(flag) {
          return object[flag];
        });
      }
      /**
       * @param {Object} object
       * @param {Function} callback
       * @return {?}
       */
      function isEmpty(object, callback) {
        return Object.keys(object).reduce(function(output, key) {
          return output[key] = callback(object[key], key), output;
        }, {});
      }
      /**
       * @param {Object} dependencies
       * @param {Function} store
       * @return {?}
       */
      function sameOptions(dependencies, store) {
        return Object.keys(dependencies).every(function(key) {
          return store(key, dependencies[key]);
        });
      }
      /**
       * @param {Object} o
       * @param {Function} callback
       * @return {undefined}
       */
      function exec(o, callback) {
        Object.keys(o).forEach(function(key) {
          callback(key, o[key]);
        });
      }
      /**
       * @param {string} val
       * @param {?} arg
       * @return {?}
       */
      function isFunction(val, arg) {
        /** @type {string} */
        var rval = val;
        return arg && (rval += '; codecs="' + arg + '"'), rval;
      }
      /**
       * @param {Uint8Array} input
       * @return {?}
       */
      function text(input) {
        if (!input) {
          return "";
        }
        if (239 == (input = new Uint8Array(input))[0]) {
          if (187 == input[1]) {
            if (191 == input[2]) {
              /** @type {Uint8Array} */
              input = input.subarray(3);
            }
          }
        }
        /** @type {string} */
        input = escape(assert(input));
        try {
          return decodeURIComponent(input);
        } catch (t) {
          throw new error(2, 2, 2004);
        }
      }
      /**
       * @param {number} data
       * @param {boolean} recurring
       * @param {Uint8Array} input
       * @return {?}
       */
      function decode(data, recurring, input) {
        if (!data) {
          return "";
        }
        if (!input && data.byteLength % 2) {
          throw new error(2, 2, 2004);
        }
        if (data instanceof ArrayBuffer) {
          /** @type {number} */
          var buffer = data
        } else {
          (input = new Uint8Array(data.byteLength)).set(new Uint8Array(data));
          /** @type {ArrayBuffer} */
          buffer = input.buffer;
        }
        /** @type {number} */
        data = Math.floor(data.byteLength / 2);
        /** @type {Uint16Array} */
        input = new Uint16Array(data);
        /** @type {DataView} */
        buffer = new DataView(buffer);
        /** @type {number} */
        var j = 0;
        for (;j < data;j++) {
          /** @type {number} */
          input[j] = buffer.getUint16(2 * j, recurring);
        }
        return assert(input);
      }
      /**
       * @param {(Object|number)} data
       * @return {?}
       */
      function append(data) {
        /** @type {Uint8Array} */
        var a = new Uint8Array(data);
        if (239 == a[0] && (187 == a[1] && 191 == a[2])) {
          return text(a);
        }
        if (254 == a[0] && 255 == a[1]) {
          return decode(a.subarray(2), false);
        }
        if (255 == a[0] && 254 == a[1]) {
          return decode(a.subarray(2), true);
        }
        var isObject = function(buf, off) {
          return buf.byteLength <= off || 32 <= buf[off] && 126 >= buf[off];
        }.bind(null, a);
        if (!a[0] && !a[2]) {
          return decode(data, false);
        }
        if (!a[1] && !a[3]) {
          return decode(data, true);
        }
        if (isObject(0) && (isObject(1) && (isObject(2) && isObject(3)))) {
          return text(data);
        }
        throw new error(2, 2, 2003);
      }
      /**
       * @param {string} str
       * @return {?}
       */
      function encode(str) {
        /** @type {string} */
        str = unescape(encodeURIComponent(str));
        /** @type {Uint8Array} */
        var ret = new Uint8Array(str.length);
        /** @type {number} */
        var i = 0;
        for (;i < str.length;++i) {
          /** @type {number} */
          ret[i] = str.charCodeAt(i);
        }
        return ret.buffer;
      }
      /**
       * @param {Uint8Array} string
       * @return {?}
       */
      function assert(string) {
        /** @type {string} */
        var expression = "";
        /** @type {number} */
        var index = 0;
        for (;index < string.length;index += 16E3) {
          expression += String.fromCharCode.apply(null, string.subarray(index, index + 16E3));
        }
        return expression;
      }
      /**
       * @param {?} behavior
       * @return {undefined}
       */
      function group(behavior) {
        /** @type {null} */
        this.a = null;
        this.b = function() {
          /** @type {null} */
          this.a = null;
          behavior();
        }.bind(this);
      }
      /**
       * @param {Object} me
       * @return {undefined}
       */
      function throttled(me) {
        me.cancel();
        /** @type {number} */
        me.a = setTimeout(me.b, 500);
      }
      /**
       * @param {?} arg
       * @param {boolean} recurring
       * @return {?}
       */
      function require(arg, recurring) {
        var raw = void 0 == recurring || recurring;
        var value = global.btoa(String.fromCharCode.apply(null, arg)).replace(/\+/g, "-").replace(/\//g, "_");
        return raw ? value : value.replace(/=*$/, "");
      }
      /**
       * @param {string} value
       * @return {?}
       */
      function reset(value) {
        value = global.atob(value.replace(/-/g, "+").replace(/_/g, "/"));
        /** @type {Uint8Array} */
        var result = new Uint8Array(value.length);
        /** @type {number} */
        var i = 0;
        for (;i < value.length;++i) {
          result[i] = value.charCodeAt(i);
        }
        return result;
      }
      /**
       * @param {string} a
       * @return {?}
       */
      function c(a) {
        /** @type {Uint8Array} */
        var ret = new Uint8Array(a.length / 2);
        /** @type {number} */
        var i = 0;
        for (;i < a.length;i += 2) {
          ret[i / 2] = global.parseInt(a.substr(i, 2), 16);
        }
        return ret;
      }
      /**
       * @param {Uint8Array} e
       * @return {?}
       */
      function cycle(e) {
        /** @type {string} */
        var optsData = "";
        /** @type {number} */
        var i = 0;
        for (;i < e.length;++i) {
          var buf = e[i].toString(16);
          if (1 == buf.length) {
            /** @type {string} */
            buf = "0" + buf;
          }
          optsData += buf;
        }
        return optsData;
      }
      /**
       * @param {Uint8Array} x
       * @param {Uint8Array} y
       * @return {?}
       */
      function drag(x, y) {
        if (!x && !y) {
          return true;
        }
        if (!x || (!y || x.length != y.length)) {
          return false;
        }
        /** @type {number} */
        var i = 0;
        for (;i < x.length;++i) {
          if (x[i] != y[i]) {
            return false;
          }
        }
        return true;
      }
      /**
       * @param {boolean} loadingLang
       * @param {?} callback
       * @param {?} opt_userInitiated
       * @param {?} req
       * @return {undefined}
       */
      function load(loadingLang, callback, opt_userInitiated, req) {
        /** @type {null} */
        this.l = this.j = this.s = null;
        /** @type {boolean} */
        this.D = false;
        /** @type {null} */
        this.b = null;
        this.f = new Image;
        /** @type {Array} */
        this.a = [];
        /** @type {Array} */
        this.m = [];
        this.i = new Point;
        /** @type {boolean} */
        this.ga = loadingLang;
        /** @type {null} */
        this.h = null;
        this.g = function(err) {
          this.i.reject(err);
          callback(err);
        }.bind(this);
        this.w = {};
        this.sa = opt_userInitiated;
        this.na = req;
        this.B = new group(this.Td.bind(this));
        /** @type {boolean} */
        this.fa = this.c = false;
        /** @type {Array} */
        this.C = [];
        /** @type {boolean} */
        this.O = false;
        /** @type {number} */
        this.I = setInterval(this.Sd.bind(this), 1E3);
        this.i.catch(function() {
        });
      }
      /**
       * @param {Object} d
       * @param {?} x
       * @return {?}
       */
      function resolve(d, x) {
        if (!d.j) {
          return match(d.f, x, "encrypted", function() {
            this.g(new error(2, 6, 6010));
          }.bind(d)), Promise.resolve();
        }
        d.l = x;
        match(d.f, d.l, "play", d.zd.bind(d));
        var bobUndo = (bobUndo = d.l.setMediaKeys(d.j)).catch(function(m1) {
          return Promise.reject(new error(2, 6, 6003, m1.message));
        });
        /** @type {null} */
        var aliceUndo = null;
        return d.b.serverCertificate && (d.b.serverCertificate.length && (aliceUndo = d.j.setServerCertificate(d.b.serverCertificate).then(function() {
        }).catch(function(m1) {
          return Promise.reject(new error(2, 6, 6004, m1.message));
        }))), Promise.all([bobUndo, aliceUndo]).then(function() {
          if (this.c) {
            return Promise.reject();
          }
          dispatch(this);
          if (!this.b.initData.length) {
            if (!this.m.length) {
              callback(this.f, this.l, "encrypted", this.pd.bind(this));
            }
          }
        }.bind(d)).catch(function(error) {
          return this.c ? Promise.resolve() : Promise.reject(error);
        }.bind(d));
      }
      /**
       * @param {?} that
       * @param {Array} statement
       * @return {?}
       */
      function wrap(that, statement) {
        return Promise.all(statement.map(function(url) {
          return register(this, url).then(function(selfObj) {
            if (selfObj) {
              var aliceUndo = new Point;
              /** @type {number} */
              var i = 0;
              for (;i < this.a.length;i++) {
                if (this.a[i].da == selfObj) {
                  this.a[i].ma = aliceUndo;
                  break;
                }
              }
              return Promise.all([selfObj.remove(), aliceUndo]);
            }
          }.bind(this));
        }.bind(that)));
      }
      /**
       * @param {Object} obj
       * @return {?}
       */
      function dispatch(obj) {
        var records = obj.b ? obj.b.initData : [];
        return records.forEach(function(res) {
          cb(this, res.initDataType, res.initData);
        }.bind(obj)), obj.m.forEach(function(url) {
          register(this, url);
        }.bind(obj)), records.length || (obj.m.length || obj.i.resolve()), obj.i;
      }
      /**
       * @param {Node} obj
       * @return {?}
       */
      function pluck(obj) {
        return obj.a.map(function(handshakeData) {
          return handshakeData.da.sessionId;
        });
      }
      /**
       * @param {Object} c
       * @param {?} options
       * @param {boolean} topic
       * @param {Object} params
       * @param {Array} k
       * @return {undefined}
       */
      function subscribe(c, options, topic, params, k) {
        var pos = clear(c);
        options.periods.forEach(function(self) {
          self.variants.forEach(function(item) {
            if (pos) {
              /** @type {Array} */
              item.drmInfos = [pos];
            }
            item.drmInfos.forEach(function(expectedHashCode) {
              resize(this, expectedHashCode);
              if (global.cast) {
                if (global.cast.__platform__) {
                  if ("com.microsoft.playready" == expectedHashCode.keySystem) {
                    /** @type {string} */
                    expectedHashCode.keySystem = "com.chromecast.playready";
                  }
                }
              }
              var fn = params[expectedHashCode.keySystem];
              if (!fn) {
                fn = {
                  audioCapabilities : [],
                  videoCapabilities : [],
                  distinctiveIdentifier : "optional",
                  persistentState : topic ? "required" : "optional",
                  sessionTypes : [topic ? "persistent-license" : "temporary"],
                  label : expectedHashCode.keySystem,
                  drmInfos : []
                };
                params[expectedHashCode.keySystem] = fn;
                k.push(expectedHashCode.keySystem);
              }
              fn.drmInfos.push(expectedHashCode);
              if (expectedHashCode.distinctiveIdentifierRequired) {
                /** @type {string} */
                fn.distinctiveIdentifier = "required";
              }
              if (expectedHashCode.persistentStateRequired) {
                /** @type {string} */
                fn.persistentState = "required";
              }
              /** @type {Array} */
              var series = [];
              if (item.video) {
                series.push(item.video);
              }
              if (item.audio) {
                series.push(item.audio);
              }
              series.forEach(function(info) {
                ("video" == info.type ? fn.videoCapabilities : fn.audioCapabilities).push({
                  robustness : ("video" == info.type ? expectedHashCode.videoRobustness : expectedHashCode.audioRobustness) || "",
                  contentType : isFunction(info.mimeType, info.codecs)
                });
              }.bind(this));
            }.bind(this));
          }.bind(this));
        }.bind(c));
      }
      /**
       * @param {?} selector
       * @param {Object} map
       * @param {Array} path
       * @return {?}
       */
      function init(selector, map, path) {
        if (1 == path.length && "" == path[0]) {
          return Promise.reject(new error(2, 6, 6E3));
        }
        var p2 = new Point;
        var self = p2;
        return[true, false].forEach(function(dataAndEvents) {
          path.forEach(function(ol) {
            var rule = map[ol];
            if (rule.drmInfos.some(function(dataAndEvents) {
              return!!dataAndEvents.licenseServerUri;
            }) == dataAndEvents) {
              if (!rule.audioCapabilities.length) {
                delete rule.audioCapabilities;
              }
              if (!rule.videoCapabilities.length) {
                delete rule.videoCapabilities;
              }
              self = self.catch(function() {
                return this.c ? Promise.reject() : navigator.requestMediaKeySystemAccess(ol, [rule]);
              }.bind(this));
            }
          }.bind(this));
        }.bind(selector)), self = self.catch(function() {
          return Promise.reject(new error(2, 6, 6001));
        }), self = self.then(function(e) {
          if (this.c) {
            return Promise.reject();
          }
          /** @type {boolean} */
          var c = 0 <= navigator.userAgent.indexOf("Edge/");
          var audioCapabilities = e.getConfiguration();
          return this.s = (audioCapabilities.audioCapabilities || []).concat(audioCapabilities.videoCapabilities || []).map(function(gridStore) {
            return gridStore.contentType;
          }), c && (this.s = null), c = map[e.keySystem], f(this, e.keySystem, c, c.drmInfos), this.b.licenseServerUri ? e.createMediaKeys() : Promise.reject(new error(2, 6, 6012));
        }.bind(selector)).then(function(j) {
          if (this.c) {
            return Promise.reject();
          }
          this.j = j;
          /** @type {boolean} */
          this.D = true;
        }.bind(selector)).catch(function(ex) {
          return this.c ? Promise.resolve() : (this.s = this.b = null, ex instanceof error ? Promise.reject(ex) : Promise.reject(new error(2, 6, 6002, ex.message)));
        }.bind(selector)), p2.reject(), self;
      }
      /**
       * @param {Object} args
       * @param {?} e
       * @return {undefined}
       */
      function resize(args, e) {
        var s = e.keySystem;
        if (s) {
          if (!e.licenseServerUri) {
            var source = args.h.servers[s];
            if (source) {
              e.licenseServerUri = source;
            }
          }
          if (!e.keyIds) {
            /** @type {Array} */
            e.keyIds = [];
          }
          if (s = args.h.advanced[s]) {
            if (!e.distinctiveIdentifierRequired) {
              e.distinctiveIdentifierRequired = s.distinctiveIdentifierRequired;
            }
            if (!e.persistentStateRequired) {
              e.persistentStateRequired = s.persistentStateRequired;
            }
            if (!e.videoRobustness) {
              e.videoRobustness = s.videoRobustness;
            }
            if (!e.audioRobustness) {
              e.audioRobustness = s.audioRobustness;
            }
            if (!e.serverCertificate) {
              e.serverCertificate = s.serverCertificate;
            }
          }
        }
      }
      /**
       * @param {Object} data
       * @return {?}
       */
      function clear(data) {
        if (echo(data.h.clearKeys)) {
          return null;
        }
        var d;
        /** @type {Array} */
        var keys = [];
        /** @type {Array} */
        var str = [];
        for (d in data.h.clearKeys) {
          var b = data.h.clearKeys[d];
          var expectedHashCode = c(d);
          b = c(b);
          expectedHashCode = {
            kty : "oct",
            kid : require(expectedHashCode, false),
            k : require(b, false)
          };
          keys.push(expectedHashCode);
          str.push(expectedHashCode.kid);
        }
        return data = JSON.stringify({
          keys : keys
        }), str = JSON.stringify({
          kids : str
        }), str = [{
          initData : new Uint8Array(encode(str)),
          initDataType : "keyids"
        }], {
          keySystem : "org.w3.clearkey",
          licenseServerUri : "data:application/json;base64," + global.btoa(data),
          distinctiveIdentifierRequired : false,
          persistentStateRequired : false,
          audioRobustness : "",
          videoRobustness : "",
          serverCertificate : null,
          initData : str,
          keyIds : []
        };
      }
      /**
       * @param {Node} a
       * @param {?} ctx
       * @param {boolean} n
       * @param {Object} dir
       * @return {undefined}
       */
      function f(a, ctx, n, dir) {
        /** @type {Array} */
        var expectationResult = [];
        /** @type {Array} */
        var activeIndex = [];
        /** @type {Array} */
        var oldconfig = [];
        /** @type {Array} */
        var udataCur = [];
        recurse(dir, expectationResult, activeIndex, oldconfig, udataCur);
        a.b = {
          keySystem : ctx,
          licenseServerUri : expectationResult[0],
          distinctiveIdentifierRequired : "required" == n.distinctiveIdentifier,
          persistentStateRequired : "required" == n.persistentState,
          audioRobustness : n.audioCapabilities ? n.audioCapabilities[0].robustness : "",
          videoRobustness : n.videoCapabilities ? n.videoCapabilities[0].robustness : "",
          serverCertificate : activeIndex[0],
          initData : oldconfig,
          keyIds : udataCur
        };
      }
      /**
       * @param {Array} dir
       * @param {Array} result
       * @param {Array} index
       * @param {Array} b
       * @param {Array} value
       * @return {undefined}
       */
      function recurse(dir, result, index, b, value) {
        /**
         * @param {Object} x
         * @param {Object} y
         * @return {?}
         */
        function newCoord(x, y) {
          return!(!x.keyId || x.keyId != y.keyId) || x.initDataType == y.initDataType && drag(x.initData, y.initData);
        }
        dir.forEach(function(item) {
          if (-1 == result.indexOf(item.licenseServerUri) && result.push(item.licenseServerUri), item.serverCertificate && (-1 == a(index, item.serverCertificate, drag) && index.push(item.serverCertificate)), item.initData && item.initData.forEach(function(expectedHashCode) {
            if (-1 == a(b, expectedHashCode, newCoord)) {
              b.push(expectedHashCode);
            }
          }), item.keyIds) {
            /** @type {number} */
            var i = 0;
            for (;i < item.keyIds.length;++i) {
              if (-1 == value.indexOf(item.keyIds[i])) {
                value.push(item.keyIds[i]);
              }
            }
          }
        });
      }
      /**
       * @param {Object} options
       * @param {string} url
       * @return {?}
       */
      function register(options, url) {
        try {
          var r = options.j.createSession("persistent-license");
        } catch (er) {
          var ex = new error(2, 6, 6005, er.message);
          return options.g(ex), Promise.reject(ex);
        }
        callback(options.f, r, "message", options.pc.bind(options));
        callback(options.f, r, "keystatuseschange", options.jc.bind(options));
        var expectedHashCode = {
          initData : null,
          da : r,
          loaded : false,
          Eb : 1 / 0,
          ma : null
        };
        return options.a.push(expectedHashCode), r.load(url).then(function(dataAndEvents) {
          if (!this.c) {
            if (dataAndEvents) {
              return expectedHashCode.loaded = true, this.a.every(function(element) {
                return element.loaded;
              }) && this.i.resolve(), r;
            }
            this.a.splice(this.a.indexOf(expectedHashCode), 1);
            this.g(new error(2, 6, 6013));
          }
        }.bind(options), function(m1) {
          if (!this.c) {
            this.a.splice(this.a.indexOf(expectedHashCode), 1);
            this.g(new error(2, 6, 6005, m1.message));
          }
        }.bind(options));
      }
      /**
       * @param {Object} options
       * @param {?} x
       * @param {Node} data
       * @return {?}
       */
      function cb(options, x, data) {
        try {
          var renderer = options.fa ? options.j.createSession("persistent-license") : options.j.createSession();
        } catch (ex) {
          return void options.g(new error(2, 6, 6005, ex.message));
        }
        callback(options.f, renderer, "message", options.pc.bind(options));
        callback(options.f, renderer, "keystatuseschange", options.jc.bind(options));
        options.a.push({
          initData : data,
          da : renderer,
          loaded : false,
          Eb : 1 / 0,
          ma : null
        });
        renderer.generateRequest(x, data.buffer).catch(function(m1) {
          if (!this.c) {
            /** @type {number} */
            var i = 0;
            for (;i < this.a.length;++i) {
              if (this.a[i].da == renderer) {
                this.a.splice(i, 1);
                break;
              }
            }
            this.g(new error(2, 6, 6006, m1.message));
          }
        }.bind(options));
      }
      /**
       * @param {Object} self
       * @param {?} e
       * @return {undefined}
       */
      function send(self, e) {
        var that;
        var t = e.target;
        /** @type {number} */
        var options = 0;
        for (;options < self.a.length;options++) {
          if (self.a[options].da == t) {
            that = self.a[options];
            break;
          }
        }
        (options = shift([self.b.licenseServerUri], self.h.retryParameters)).body = e.message;
        /** @type {string} */
        options.method = "POST";
        if (!("com.microsoft.playready" != self.b.keySystem && "com.chromecast.playready" != self.b.keySystem)) {
          sendRequest(options);
        }
        self.ga.request(2, options).then(function(change) {
          return this.c ? Promise.reject() : t.update(change.data).then(function() {
            if (that) {
              if (that.ma) {
                that.ma.resolve();
              }
              setTimeout(function() {
                /** @type {boolean} */
                that.loaded = true;
                if (this.a.every(function(element) {
                  return element.loaded;
                })) {
                  this.i.resolve();
                }
              }.bind(this), 5E3);
            }
          }.bind(this));
        }.bind(self), function(err) {
          if (this.c) {
            return Promise.resolve();
          }
          err = new error(2, 6, 6007, err);
          this.g(err);
          if (that) {
            if (that.ma) {
              that.ma.reject(err);
            }
          }
        }.bind(self)).catch(function(err) {
          if (this.c) {
            return Promise.resolve();
          }
          err = new error(2, 6, 6008, err.message);
          this.g(err);
          if (that) {
            if (that.ma) {
              that.ma.reject(err);
            }
          }
        }.bind(self));
      }
      /**
       * @param {Object} req
       * @return {undefined}
       */
      function sendRequest(req) {
        var body = decode(req.body, true, true);
        if (-1 == body.indexOf("PlayReadyKeyMessage")) {
          /** @type {string} */
          req.headers["Content-Type"] = "text/xml; charset=utf-8";
        } else {
          /** @type {NodeList} */
          var codeSegments = (body = (new DOMParser).parseFromString(body, "application/xml")).getElementsByTagName("HttpHeader");
          /** @type {number} */
          var i = 0;
          for (;i < codeSegments.length;++i) {
            req.headers[codeSegments[i].querySelector("name").textContent] = codeSegments[i].querySelector("value").textContent;
          }
          req.body = reset(body.querySelector("Challenge").textContent).buffer;
        }
      }
      /**
       * @return {?}
       */
      function fetch() {
        /** @type {Array} */
        var nodeArgs = [];
        /** @type {Array} */
        var videoCapabilities = [{
          contentType : 'video/mp4; codecs="avc1.42E01E"'
        }, {
          contentType : 'video/webm; codecs="vp8"'
        }];
        /** @type {Array} */
        var value = [{
          videoCapabilities : videoCapabilities,
          persistentState : "required",
          sessionTypes : ["persistent-license"]
        }, {
          videoCapabilities : videoCapabilities
        }];
        var attackOrderList = {};
        return "org.w3.clearkey com.widevine.alpha com.microsoft.playready com.apple.fps.2_0 com.apple.fps.1_0 com.apple.fps com.adobe.primetime".split(" ").forEach(function(ol) {
          var expectedHashCode = navigator.requestMediaKeySystemAccess(ol, value).then(function(dataAndEvents) {
            /** @type {boolean} */
            var excludes = !!(excludes = dataAndEvents.getConfiguration().sessionTypes) && 0 <= excludes.indexOf("persistent-license");
            return 0 <= navigator.userAgent.indexOf("Tizen 3") && (excludes = false), attackOrderList[ol] = {
              persistentState : excludes
            }, dataAndEvents.createMediaKeys();
          }).catch(function() {
            /** @type {null} */
            attackOrderList[ol] = null;
          });
          nodeArgs.push(expectedHashCode);
        }), Promise.all(nodeArgs).then(function() {
          return attackOrderList;
        });
      }
      /**
       * @param {?} type
       * @param {?} context
       * @return {?}
       */
      function attach(type, context) {
        var resize = type.keySystem();
        return!context.drmInfos.length || context.drmInfos.some(function(e) {
          return e.keySystem == resize;
        });
      }
      /**
       * @param {Array} row
       * @param {Array} items
       * @return {?}
       */
      function getItems(row, items) {
        if (!row.length) {
          return items;
        }
        if (!items.length) {
          return row;
        }
        /** @type {Array} */
        var children = [];
        /** @type {number} */
        var j = 0;
        for (;j < row.length;j++) {
          /** @type {number} */
          item = 0;
          for (;item < items.length;item++) {
            if (row[j].keySystem == items[item].keySystem) {
              var e = row[j];
              var item = items[item];
              /** @type {Array} */
              var _ref = (_ref = (_ref = []).concat(e.initData || [])).concat(item.initData || []);
              /** @type {Array} */
              var _ref2 = (_ref2 = (_ref2 = []).concat(e.keyIds)).concat(item.keyIds);
              children.push({
                keySystem : e.keySystem,
                licenseServerUri : e.licenseServerUri || item.licenseServerUri,
                distinctiveIdentifierRequired : e.distinctiveIdentifierRequired || item.distinctiveIdentifierRequired,
                persistentStateRequired : e.persistentStateRequired || item.persistentStateRequired,
                videoRobustness : e.videoRobustness || item.videoRobustness,
                audioRobustness : e.audioRobustness || item.audioRobustness,
                serverCertificate : e.serverCertificate || item.serverCertificate,
                initData : _ref,
                keyIds : _ref2
              });
              break;
            }
          }
        }
        return children;
      }
      /**
       * @param {Range} timeRange
       * @return {?}
       */
      function timerangeToArray(timeRange) {
        return!timeRange || 1 == timeRange.length && 1E-6 > timeRange.end(0) - timeRange.start(0) ? null : timeRange.length ? timeRange.end(timeRange.length - 1) : null;
      }
      /**
       * @param {Object} val
       * @param {?} i
       * @return {?}
       */
      function step(val, i) {
        return!(!val || (!val.length || 1 == val.length && 1E-6 > val.end(0) - val.start(0))) && (i >= val.start(0) && i <= val.end(val.length - 1));
      }
      /**
       * @param {Range} x
       * @param {?} n
       * @return {?}
       */
      function parent(x, n) {
        if (!x || (!x.length || 1 == x.length && 1E-6 > x.end(0) - x.start(0))) {
          return 0;
        }
        /** @type {number} */
        var self = 0;
        /** @type {number} */
        var expectedHashCode = x.length - 1;
        for (;0 <= expectedHashCode && x.end(expectedHashCode) > n;--expectedHashCode) {
          self += x.end(expectedHashCode) - Math.max(x.start(expectedHashCode), n);
        }
        return self;
      }
      /**
       * @param {?} compiler
       * @return {undefined}
       */
      function updateBarVisuals(compiler) {
        /** @type {null} */
        this.f = null;
        this.c = compiler;
        /** @type {number} */
        this.h = 0;
        /** @type {number} */
        this.g = 1 / 0;
        /** @type {null} */
        this.a = this.b = null;
      }
      /**
       * @param {string} event
       * @param {Function} value
       * @return {undefined}
       */
      function fix(event, value) {
        params[event] = value.length ? utils.bind(null, value) : value;
      }
      /**
       * @param {?} next
       * @param {string} selector
       * @param {number} v00
       * @param {number} value
       * @return {?}
       */
      function attachEvents(next, selector, v00, value) {
        return Promise.resolve().then(function() {
          if (this.f && this.c) {
            if (null == v00 || null == value) {
              this.f.parseInit(selector);
            } else {
              var result = this.f.parseMedia(selector, {
                periodStart : this.h,
                segmentStart : v00,
                segmentEnd : value
              }).filter(function(record) {
                return record.startTime < this.g;
              }.bind(this));
              this.c.append(result);
              if (null == this.b) {
                /** @type {number} */
                this.b = v00;
              }
              /** @type {number} */
              this.a = Math.min(value, this.g);
            }
          }
        }.bind(next));
      }
      /**
       * @param {?} _args
       * @return {undefined}
       */
      function utils(_args) {
        this.Ra = _args;
      }
      /**
       * @param {Object} index
       * @param {?} el
       * @param {?} j
       * @return {undefined}
       */
      function Element(index, el, j) {
        /** @type {Object} */
        this.g = index;
        this.f = el;
        this.j = j;
        this.c = {};
        /** @type {null} */
        this.a = null;
        this.b = {};
        this.h = new Image;
        /** @type {boolean} */
        this.i = false;
      }
      /**
       * @return {?}
       */
      function renderSection() {
        var record = {};
        return'video/mp4; codecs="avc1.42E01E",video/mp4; codecs="avc3.42E01E",video/mp4; codecs="hev1.1.6.L93.90",video/mp4; codecs="hvc1.1.6.L93.90",video/mp4; codecs="hev1.2.4.L153.B0"; eotf="smpte2084",video/mp4; codecs="hvc1.2.4.L153.B0"; eotf="smpte2084",video/mp4; codecs="vp9",video/mp4; codecs="vp09.00.10.08",audio/mp4; codecs="mp4a.40.2",audio/mp4; codecs="ac-3",audio/mp4; codecs="ec-3",audio/mp4; codecs="opus",audio/mp4; codecs="flac",video/webm; codecs="vp8",video/webm; codecs="vp9",video/webm; codecs="av1",audio/webm; codecs="vorbis",audio/webm; codecs="opus",video/mp2t; codecs="avc1.42E01E",video/mp2t; codecs="avc3.42E01E",video/mp2t; codecs="hvc1.1.6.L93.90",video/mp2t; codecs="mp4a.40.2",video/mp2t; codecs="ac-3",video/mp2t; codecs="ec-3",video/mp2t; codecs="mp4a.40.2",text/vtt,application/mp4; codecs="wvtt",application/ttml+xml,application/mp4; codecs="stpp"'.split(",").forEach(function(ol) {
          record[ol] = !!params[ol] || MediaSource.isTypeSupported(ol);
          /** @type {string} */
          var title = ol.split(";")[0];
          record[title] = record[title] || record[ol];
        }), record;
      }
      /**
       * @param {Object} item
       * @param {?} parent
       * @return {undefined}
       */
      function include(item, parent) {
        if (!item.a) {
          item.a = new updateBarVisuals(item.j);
        }
        item.a.f = new params[parent];
      }
      /**
       * @param {?} opts
       * @param {string} type
       * @return {?}
       */
      function finish(opts, type) {
        if ("text" == type) {
          var ret = opts.a.b
        } else {
          ret = expect(opts, type);
          ret = !ret || 1 == ret.length && 1E-6 > ret.end(0) - ret.start(0) ? null : 1 == ret.length && 0 > ret.start(0) ? 0 : ret.length ? ret.start(0) : null;
        }
        return ret;
      }
      /**
       * @param {?} a
       * @param {string} actual
       * @return {?}
       */
      function expect(a, actual) {
        try {
          return a.c[actual].buffered;
        } catch (t) {
          return null;
        }
      }
      /**
       * @param {Object} actual
       * @param {string} expected
       * @param {string} args
       * @param {number} x
       * @param {number} isXML
       * @return {?}
       */
      function deepEqual(actual, expected, args, x, isXML) {
        return "text" == expected ? attachEvents(actual.a, args, x, isXML) : fail(actual, expected, actual.ve.bind(actual, expected, args));
      }
      /**
       * @param {Object} e
       * @param {string} expected
       * @return {?}
       */
      function cleanup(e, expected) {
        return "text" == expected ? e.a.remove(0, 1 / 0) : fail(e, expected, e.vc.bind(e, expected, 0, e.f.duration));
      }
      /**
       * @param {Object} options
       * @param {string} expected
       * @param {number} callback
       * @param {number} cb
       * @return {?}
       */
      function startServer(options, expected, callback, cb) {
        return "text" == expected ? (options.a.h = callback, null != cb && (options.a.g = cb), Promise.resolve()) : (null == cb && (cb = 1 / 0), Promise.all([fail(options, expected, options.Kc.bind(options, expected)), fail(options, expected, options.ke.bind(options, expected, callback)), fail(options, expected, options.he.bind(options, expected, cb))]));
      }
      /**
       * @param {Object} a
       * @param {string} b
       * @param {?} expectedHashCode
       * @return {?}
       */
      function fail(a, b, expectedHashCode) {
        if (a.i) {
          return Promise.reject();
        }
        if (expectedHashCode = {
          start : expectedHashCode,
          p : new Point
        }, a.b[b].push(expectedHashCode), 1 == a.b[b].length) {
          try {
            expectedHashCode.start();
          } catch (symbol) {
            if ("QuotaExceededError" == symbol.name) {
              expectedHashCode.p.reject(new error(2, 3, 3017, b));
            } else {
              expectedHashCode.p.reject(new error(2, 3, 3015, symbol));
            }
            eq(a, b);
          }
        }
        return expectedHashCode.p;
      }
      /**
       * @param {Object} self
       * @param {Function} complete
       * @return {?}
       */
      function go(self, complete) {
        if (self.i) {
          return Promise.reject();
        }
        var x;
        /** @type {Array} */
        var nodeArgs = [];
        for (x in self.c) {
          var expectedHashCode = new Point;
          var selection = {
            start : function(dfd) {
              dfd.resolve();
            }.bind(null, expectedHashCode),
            p : expectedHashCode
          };
          self.b[x].push(selection);
          nodeArgs.push(expectedHashCode);
          if (1 == self.b[x].length) {
            selection.start();
          }
        }
        return Promise.all(nodeArgs).then(function() {
          var oldconfig;
          try {
            complete();
          } catch (t) {
            var ret = Promise.reject(new error(2, 3, 3015, t));
          }
          for (oldconfig in this.c) {
            eq(this, oldconfig);
          }
          return ret;
        }.bind(self), function() {
          return Promise.reject();
        }.bind(self));
      }
      /**
       * @param {Object} a
       * @param {?} b
       * @return {undefined}
       */
      function eq(a, b) {
        a.b[b].shift();
        var entry = a.b[b][0];
        if (entry) {
          try {
            entry.start();
          } catch (r) {
            entry.p.reject(new error(2, 3, 3015, r));
            eq(a, b);
          }
        }
      }
      /**
       * @param {number} n
       * @param {string} string
       * @param {string} word
       * @return {?}
       */
      function plural(n, string, word) {
        return word == string || (n >= requestFeedForFirstButton && word == string.split("-")[0] || n >= pkgConfig && word.split("-")[0] == string.split("-")[0]);
      }
      /**
       * @param {Array} val
       * @return {?}
       */
      function toString(val) {
        val = val.toLowerCase().split("-");
        var opt_left = iso[val[0]];
        return opt_left && (val[0] = opt_left), val.join("-");
      }
      /**
       * @param {?} self
       * @param {Object} b
       * @param {?} options
       * @return {?}
       */
      function adjust(self, b, options) {
        var a = self.video;
        return!(a && (a.width < b.minWidth || (a.width > b.maxWidth || (a.width > options.width || (a.height < b.minHeight || (a.height > b.maxHeight || (a.height > options.height || (a.width * a.height < b.minPixels || a.width * a.height > b.maxPixels))))))) || (self.bandwidth < b.minBandwidth || self.bandwidth > b.maxBandwidth));
      }
      /**
       * @param {?} self
       * @param {?} value
       * @param {?} options
       * @return {?}
       */
      function formatError(self, value, options) {
        /** @type {boolean} */
        var r = false;
        return self.variants.forEach(function(context) {
          var j = context.allowedByApplication;
          context.allowedByApplication = adjust(context, value, options);
          if (j != context.allowedByApplication) {
            /** @type {boolean} */
            r = true;
          }
        }), r;
      }
      /**
       * @param {?} item
       * @param {number} p
       * @param {?} self
       * @return {undefined}
       */
      function map(item, p, self) {
        var el = p.video;
        var size = p.audio;
        /** @type {number} */
        p = 0;
        for (;p < self.variants.length;++p) {
          var options = self.variants[p];
          var text = item;
          var width = size;
          var d = el;
          if (!(text && (text.D && !attach(text, options)) ? 0 : getValue(options.audio, text, width) && getValue(options.video, text, d))) {
            self.variants.splice(p, 1);
            --p;
          }
        }
        /** @type {number} */
        p = 0;
        for (;p < self.textStreams.length;++p) {
          item = self.textStreams[p];
          if (!params[isFunction(item.mimeType, item.codecs)]) {
            self.textStreams.splice(p, 1);
            --p;
          }
        }
      }
      /**
       * @param {Object} options
       * @param {Text} item
       * @param {string} format
       * @return {?}
       */
      function getValue(options, item, format) {
        if (!options) {
          return true;
        }
        /** @type {null} */
        var content = null;
        if (item) {
          if (item.D) {
            content = item.s;
          }
        }
        item = isFunction(options.mimeType, options.codecs);
        var i;
        var ol = options.mimeType;
        for (i in p) {
          var hc = options[i];
          var seg = p[i];
          if (hc) {
            ol += "; " + seg + '="' + hc + '"';
          }
        }
        return!(!params[isFunction(options.mimeType, options.codecs)] && !MediaSource.isTypeSupported(ol) || (content && (options.encrypted && 0 > content.indexOf(item)) || format && (options.mimeType != format.mimeType || options.codecs.split(".")[0] != format.codecs.split(".")[0])));
      }
      /**
       * @param {Object} base
       * @param {string} fn
       * @param {string} data
       * @return {?}
       */
      function message(base, fn, data) {
        /** @type {null} */
        var l = null;
        return unique(base.variants).map(function(options) {
          var isActive;
          isActive = options.video && options.audio ? data == options.video.id && fn == options.audio.id : options.video && data == options.video.id || options.audio && fn == options.audio.id;
          /** @type {string} */
          var val = "";
          if (options.video) {
            val += options.video.codecs;
          }
          if (options.audio) {
            if ("" != val) {
              val += ", ";
            }
            val += options.audio.codecs;
            l = options.audio.label;
          }
          var audioCodec = options.audio ? options.audio.codecs : null;
          var videoCodec = options.video ? options.video.codecs : null;
          /** @type {null} */
          var mimeType = null;
          if (options.video) {
            mimeType = options.video.mimeType;
          } else {
            if (options.audio) {
              mimeType = options.audio.mimeType;
            }
          }
          /** @type {null} */
          var kind = null;
          if (options.audio) {
            kind = options.audio.kind;
          } else {
            if (options.video) {
              kind = options.video.kind;
            }
          }
          var roles = nextTick((options.audio ? options.audio.roles : []).concat(options.video ? options.video.roles : []));
          return{
            id : options.id,
            active : isActive,
            type : "variant",
            bandwidth : options.bandwidth,
            language : options.language,
            label : l,
            kind : kind || null,
            width : options.video ? options.video.width : null,
            height : options.video ? options.video.height : null,
            frameRate : options.video ? options.video.frameRate : void 0,
            mimeType : mimeType,
            codecs : val,
            audioCodec : audioCodec,
            videoCodec : videoCodec,
            primary : options.primary,
            roles : roles,
            videoId : options.video ? options.video.id : null,
            audioId : options.audio ? options.audio.id : null,
            channelsCount : options.audio ? options.audio.channelsCount : null,
            audioBandwidth : options.audio && options.audio.bandwidth ? options.audio.bandwidth : null,
            videoBandwidth : options.video && options.video.bandwidth ? options.video.bandwidth : null
          };
        });
      }
      /**
       * @param {Object} c
       * @param {string} type
       * @return {?}
       */
      function print(c, type) {
        return c.textStreams.map(function(data) {
          return{
            id : data.id,
            active : type == data.id,
            type : "text",
            language : data.language,
            label : data.label,
            kind : data.kind,
            mimeType : data.mimeType,
            codecs : data.codecs || null,
            audioCodec : null,
            videoCodec : null,
            primary : data.primary,
            roles : data.roles,
            channelsCount : null,
            audioBandwidth : null,
            videoBandwidth : null
          };
        });
      }
      /**
       * @param {?} right
       * @param {Element} a
       * @return {?}
       */
      function cmp(right, a) {
        /** @type {number} */
        var i = 0;
        for (;i < right.variants.length;i++) {
          if (right.variants[i].id == a.id) {
            return right.variants[i];
          }
        }
        return null;
      }
      /**
       * @param {Object} object
       * @param {Element} obj
       * @return {?}
       */
      function serialize(object, obj) {
        /** @type {number} */
        var i = 0;
        for (;i < object.textStreams.length;i++) {
          if (object.textStreams[i].id == obj.id) {
            return object.textStreams[i];
          }
        }
        return null;
      }
      /**
       * @param {?} arr
       * @return {?}
       */
      function unique(arr) {
        return arr.filter(function(dataAndEvents) {
          return dataAndEvents.allowedByApplication && dataAndEvents.allowedByKeySystem;
        });
      }
      /**
       * @param {(Array|string)} res
       * @param {?} str
       * @param {?} e
       * @param {Object} opts
       * @return {?}
       */
      function loaded(res, str, e, opts) {
        var arr = unique(res.variants);
        if (!(data = arr.filter(function(servers) {
          return servers.primary;
        })).length) {
          data = arr;
        }
        var id = data.length ? data[0].language : "";
        var data = data.filter(function(element) {
          return element.language == id;
        });
        if (str) {
          var m = toString(str);
          [pkgConfig, requestFeedForFirstButton, 0].forEach(function(i) {
            /** @type {boolean} */
            var e = false;
            arr.forEach(function(expectedHashCode) {
              m = toString(m);
              var minute = toString(expectedHashCode.language);
              if (plural(i, m, minute)) {
                if (e) {
                  data.push(expectedHashCode);
                } else {
                  /** @type {Array} */
                  data = [expectedHashCode];
                  /** @type {boolean} */
                  e = true;
                }
                if (opts) {
                  /** @type {boolean} */
                  opts.audio = true;
                }
              }
            });
          });
        }
        return e && (res = intersection(data, e)).length ? res : (res = data.map(function($scope) {
          return($scope.audio ? $scope.audio.roles : []).concat($scope.video ? $scope.video.roles : []);
        }).reduce(options, [])).length ? intersection(data, res[0]) : data;
      }
      /**
       * @param {Array} result
       * @param {Object} obj
       * @param {?} value
       * @param {Object} target
       * @return {?}
       */
      function build(result, obj, value, target) {
        var type = result.textStreams;
        if (!(data = type.filter(function(servers) {
          return servers.primary;
        })).length) {
          data = type;
        }
        var id = data.length ? data[0].language : "";
        var data = data.filter(function(element) {
          return element.language == id;
        });
        if (obj) {
          var h = toString(obj);
          [pkgConfig, requestFeedForFirstButton, 0].forEach(function(i) {
            /** @type {boolean} */
            var e = false;
            type.forEach(function(expectedHashCode) {
              var minute = toString(expectedHashCode.language);
              if (plural(i, h, minute)) {
                if (e) {
                  data.push(expectedHashCode);
                } else {
                  /** @type {Array} */
                  data = [expectedHashCode];
                  /** @type {boolean} */
                  e = true;
                }
                if (target) {
                  /** @type {boolean} */
                  target.text = true;
                }
              }
            });
          });
        }
        return value && (result = evaluate(data, value)).length ? result : (result = data.map(function(roles) {
          return roles.roles;
        }).reduce(options, [])).length ? evaluate(data, result[0]) : data;
      }
      /**
       * @param {Array} array
       * @param {string} letter
       * @return {?}
       */
      function intersection(array, letter) {
        return array.filter(function($scope) {
          return $scope.audio && 0 <= $scope.audio.roles.indexOf(letter) || $scope.video && 0 <= $scope.video.roles.indexOf(letter);
        });
      }
      /**
       * @param {Array} event
       * @param {string} val
       * @return {?}
       */
      function evaluate(event, val) {
        return event.filter(function(userCtx) {
          return 0 <= userCtx.roles.indexOf(val);
        });
      }
      /**
       * @param {?} stream
       * @param {?} returnBack
       * @param {Array} codeSegments
       * @return {?}
       */
      function streaming(stream, returnBack, codeSegments) {
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          if (codeSegments[i].audio == stream && codeSegments[i].video == returnBack) {
            return codeSegments[i];
          }
        }
        return null;
      }
      /**
       * @param {number} a
       * @param {number} b
       * @param {Array} codeSegments
       * @return {?}
       */
      function objEquiv(a, b, codeSegments) {
        /**
         * @param {number} value
         * @param {Object} task
         * @return {?}
         */
        function isUndefinedOrNull(value, task) {
          return null == value ? null == task : task.id == value;
        }
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          if (isUndefinedOrNull(a, codeSegments[i].audio) && isUndefinedOrNull(b, codeSegments[i].video)) {
            return codeSegments[i];
          }
        }
        return null;
      }
      /**
       * @param {?} arr
       * @param {?} x
       * @return {?}
       */
      function isArray(arr, x) {
        /** @type {number} */
        var i = arr.periods.length - 1;
        for (;0 < i;--i) {
          if (x + delta >= arr.periods[i].startTime) {
            return i;
          }
        }
        return 0;
      }
      /**
       * @param {?} f
       * @param {Object} a
       * @return {?}
       */
      function bind(f, a) {
        /** @type {number} */
        var e = 0;
        for (;e < f.periods.length;++e) {
          var cmd = f.periods[e];
          if ("text" == a.type) {
            /** @type {number} */
            var i = 0;
            for (;i < cmd.textStreams.length;++i) {
              if (cmd.textStreams[i] == a) {
                return e;
              }
            }
          } else {
            /** @type {number} */
            i = 0;
            for (;i < cmd.variants.length;++i) {
              var data = cmd.variants[i];
              if (data.audio == a || (data.video == a || data.video && data.video.trickModeVideo == a)) {
                return e;
              }
            }
          }
        }
        return-1;
      }
      /**
       * @return {undefined}
       */
      function Plugin() {
        /** @type {null} */
        this.h = null;
        /** @type {boolean} */
        this.c = false;
        this.b = new abc;
        /** @type {Array} */
        this.g = [];
        /** @type {boolean} */
        this.i = false;
        /** @type {null} */
        this.a = this.f = null;
      }
      /**
       * @param {Object} _super
       * @param {Array} contextElem
       * @return {?}
       */
      function getPostCodes(_super, contextElem) {
        return contextElem.filter(function(value) {
          return adjust(value, _super, {
            width : 1 / 0,
            height : 1 / 0
          });
        }).sort(function(a, b) {
          return a.bandwidth - b.bandwidth;
        });
      }
      /**
       * @param {?} type
       * @param {Object} bubbles
       * @return {undefined}
       */
      function EventObject(type, bubbles) {
        var key;
        var iterable = bubbles || {};
        for (key in iterable) {
          this[key] = iterable[key];
        }
        /** @type {boolean} */
        this.defaultPrevented = this.cancelable = this.bubbles = false;
        this.timeStamp = global.performance && global.performance.now ? global.performance.now() : Date.now();
        this.type = type;
        /** @type {boolean} */
        this.isTrusted = false;
        /** @type {null} */
        this.target = this.currentTarget = null;
        /** @type {boolean} */
        this.a = false;
      }
      /**
       * @param {?} attributes
       * @return {?}
       */
      function compile(attributes) {
        return JSON.stringify(attributes, function(dataAndEvents, value) {
          if ("manager" != dataAndEvents && "function" != typeof value) {
            if (value instanceof Event || value instanceof EventObject) {
              var expectedHashCode;
              var token = {};
              for (expectedHashCode in value) {
                var arg = value[expectedHashCode];
                if (!(arg && "object" == typeof arg)) {
                  if (!(expectedHashCode in Event)) {
                    token[expectedHashCode] = arg;
                  }
                }
              }
              return token;
            }
            if (value instanceof TimeRanges) {
              token = {
                __type__ : "TimeRanges",
                length : value.length,
                start : [],
                end : []
              };
              /** @type {number} */
              expectedHashCode = 0;
              for (;expectedHashCode < value.length;++expectedHashCode) {
                token.start.push(value.start(expectedHashCode));
                token.end.push(value.end(expectedHashCode));
              }
            } else {
              /** @type {*} */
              token = "number" == typeof value ? isNaN(value) ? "NaN" : isFinite(value) ? value : 0 > value ? "-Infinity" : "Infinity" : value;
            }
            return token;
          }
        });
      }
      /**
       * @param {string} d
       * @return {?}
       */
      function isValid(d) {
        return JSON.parse(d, function(dataAndEvents, arg) {
          return "NaN" == arg ? NaN : "-Infinity" == arg ? -1 / 0 : "Infinity" == arg ? 1 / 0 : arg && ("object" == typeof arg && "TimeRanges" == arg.__type__) ? builder(arg) : arg;
        });
      }
      /**
       * @param {Object} args
       * @return {?}
       */
      function builder(args) {
        return{
          length : args.length,
          /**
           * @param {?} expectedHashCode
           * @return {?}
           */
          start : function(expectedHashCode) {
            return args.start[expectedHashCode];
          },
          /**
           * @param {?} expectedHashCode
           * @return {?}
           */
          end : function(expectedHashCode) {
            return args.end[expectedHashCode];
          }
        };
      }
      /**
       * @param {?} d
       * @param {?} h
       * @param {?} theCallback
       * @param {?} theOldPath
       * @param {Function} after
       * @param {?} theNewPath
       * @return {undefined}
       */
      function move(d, h, theCallback, theOldPath, after, theNewPath) {
        this.D = d;
        this.h = h;
        this.I = theCallback;
        /** @type {boolean} */
        this.l = false;
        this.B = theOldPath;
        /** @type {Function} */
        this.C = after;
        this.s = theNewPath;
        /** @type {boolean} */
        this.c = this.i = false;
        /** @type {string} */
        this.w = "";
        /** @type {null} */
        this.a = this.j = null;
        this.b = {
          video : {},
          player : {}
        };
        /** @type {number} */
        this.m = 0;
        this.f = {};
        /** @type {null} */
        this.g = null;
      }
      /**
       * @param {Object} args
       * @return {undefined}
       */
      function getPromise(args) {
        var i;
        for (i in args.f) {
          var b = args.f[i];
          delete args.f[i];
          b.reject(new error(1, 7, 7E3));
        }
      }
      /**
       * @param {Node} parent
       * @param {?} opt_attributes
       * @return {undefined}
       */
      function createElement(parent, opt_attributes) {
        var url = compile(opt_attributes);
        parent.a.sendMessage("urn:x-cast:com.google.shaka.v2", url, function() {
        }, suiteView);
      }
      /**
       * @return {undefined}
       */
      function EventDispatcher() {
        this.ub = new that;
        this.Za = this;
      }
      /**
       * @param {?} children
       * @param {?} b
       * @param {?} a
       * @return {undefined}
       */
      function Node(children, b, a) {
        EventDispatcher.call(this);
        this.c = children;
        this.b = b;
        /** @type {null} */
        this.i = this.g = this.f = this.j = this.h = null;
        this.a = new move(a, this.qe.bind(this), this.re.bind(this), this.se.bind(this), this.te.bind(this), this.bc.bind(this));
        setup(this);
      }
      /**
       * @param {Object} self
       * @return {undefined}
       */
      function setup(self) {
        self.a.init();
        self.i = new Image;
        middleware.forEach(function(arg) {
          callback(this.i, this.c, arg, this.He.bind(this));
        }.bind(self));
        array.forEach(function(arg) {
          callback(this.i, this.b, arg, this.Rd.bind(this));
        }.bind(self));
        self.h = {};
        var prop;
        for (prop in self.c) {
          Object.defineProperty(self.h, prop, {
            configurable : false,
            enumerable : true,
            get : self.Ge.bind(self, prop),
            set : self.Ie.bind(self, prop)
          });
        }
        self.j = {};
        for (prop in self.b) {
          Object.defineProperty(self.j, prop, {
            configurable : false,
            enumerable : true,
            get : self.Qd.bind(self, prop)
          });
        }
        self.f = new EventDispatcher;
        self.f.Za = self.h;
        self.g = new EventDispatcher;
        self.g.Za = self.j;
      }
      /**
       * @param {?} a
       * @param {?} b
       * @param {Function} server_mode
       * @param {Function} opt_options
       * @return {undefined}
       */
      function World(a, b, server_mode, opt_options) {
        EventDispatcher.call(this);
        this.a = a;
        this.b = b;
        this.j = {
          video : a,
          player : b
        };
        this.l = server_mode || function() {
        };
        this.m = opt_options || function(expectedHashCode) {
          return expectedHashCode;
        };
        /** @type {boolean} */
        this.i = false;
        /** @type {boolean} */
        this.f = true;
        /** @type {null} */
        this.h = this.g = this.c = null;
        initialize(this);
      }
      /**
       * @param {Object} self
       * @return {undefined}
       */
      function initialize(self) {
        var val = cast.receiver.CastReceiverManager.getInstance();
        val.onSenderConnected = self.oc.bind(self);
        val.onSenderDisconnected = self.oc.bind(self);
        val.onSystemVolumeChanged = self.Sc.bind(self);
        self.g = val.getCastMessageBus("urn:x-cast:com.google.cast.media");
        self.g.onMessage = self.rd.bind(self);
        self.c = val.getCastMessageBus("urn:x-cast:com.google.shaka.v2");
        self.c.onMessage = self.Ed.bind(self);
        val.start();
        middleware.forEach(function(fix) {
          this.a.addEventListener(fix, this.rc.bind(this, "video"));
        }.bind(self));
        array.forEach(function(fix) {
          this.b.addEventListener(fix, this.rc.bind(this, "player"));
        }.bind(self));
        if (cast.__platform__ && cast.__platform__.canDisplayType('video/mp4; codecs="avc1.640028"; width=3840; height=2160')) {
          self.b.Pb(3840, 2160);
        } else {
          self.b.Pb(1920, 1080);
        }
        self.b.addEventListener("loading", function() {
          /** @type {boolean} */
          this.f = false;
          focus(this);
        }.bind(self));
        self.a.addEventListener("playing", function() {
          /** @type {boolean} */
          this.f = false;
          focus(this);
        }.bind(self));
        self.a.addEventListener("pause", function() {
          focus(this);
        }.bind(self));
        self.b.addEventListener("unloading", function() {
          /** @type {boolean} */
          this.f = true;
          focus(this);
        }.bind(self));
        self.a.addEventListener("ended", function() {
          global.setTimeout(function() {
            if (this.a) {
              if (this.a.ended) {
                /** @type {boolean} */
                this.f = true;
                focus(this);
              }
            }
          }.bind(this), 5E3);
        }.bind(self));
      }
      /**
       * @param {?} callback
       * @return {undefined}
       */
      function focus(callback) {
        Promise.resolve().then(function() {
          this.dispatchEvent(new EventObject("caststatuschanged"));
          ctor(this, 0);
        }.bind(callback));
      }
      /**
       * @param {Node} self
       * @param {Object} params
       * @param {?} expectedHashCode
       * @return {undefined}
       */
      function main(self, params, expectedHashCode) {
        var i;
        for (i in params.player) {
          self.b[i](params.player[i]);
        }
        self.l(expectedHashCode);
        expectedHashCode = Promise.resolve();
        var val = self.a.autoplay;
        if (params.manifest) {
          /** @type {boolean} */
          self.a.autoplay = false;
          (expectedHashCode = self.b.load(params.manifest, params.startTime)).catch(function(err) {
            this.b.dispatchEvent(new EventObject("error", {
              detail : err
            }));
          }.bind(self));
        }
        expectedHashCode.then(function() {
          var i;
          for (i in params.video) {
            var obj = params.video[i];
            this.a[i] = obj;
          }
          for (i in params.playerAfterLoad) {
            obj = params.playerAfterLoad[i];
            this.b[i](obj);
          }
          this.a.autoplay = val;
          if (params.manifest) {
            this.a.play();
            ctor(this, 0);
          }
        }.bind(self));
      }
      /**
       * @param {Object} message
       * @param {?} opt_attributes
       * @param {?} element
       * @param {?} options
       * @return {undefined}
       */
      function func(message, opt_attributes, element, options) {
        if (message.i) {
          message = compile(opt_attributes);
          if (options) {
            element.getCastChannel(options).send(message);
          } else {
            element.broadcast(message);
          }
        }
      }
      /**
       * @param {Object} self
       * @param {number} mayParseLabeledStatementInstead
       * @param {?} url
       * @return {undefined}
       */
      function ctor(self, mayParseLabeledStatementInstead, url) {
        var data = response;
        data = {
          mediaSessionId : 0,
          playbackRate : self.a.playbackRate,
          playerState : self.f ? data.IDLE : self.b.Na ? data.Gc : self.a.paused ? data.Hc : data.Ic,
          currentTime : self.a.currentTime,
          supportedMediaCommands : 15,
          volume : {
            level : self.a.volume,
            muted : self.a.muted
          }
        };
        if (url) {
          data.media = url;
        }
        func(self, {
          requestId : mayParseLabeledStatementInstead,
          type : "MEDIA_STATUS",
          status : [data]
        }, self.g);
      }
      /**
       * @param {Node} data
       * @param {string} res
       * @return {?}
       */
      function errorHandler(data, res) {
        var results = filter(data, res);
        return 1 != results.length ? null : results[0];
      }
      /**
       * @param {Node} d
       * @param {string} name
       * @return {?}
       */
      function filter(d, name) {
        return Array.prototype.filter.call(d.childNodes, function(child) {
          return child.tagName == name;
        });
      }
      /**
       * @param {HTMLElement} node
       * @return {?}
       */
      function selector(node) {
        var child = node.firstChild;
        return child && child.nodeType == Node.TEXT_NODE ? node.textContent.trim() : null;
      }
      /**
       * @param {Node} data
       * @param {string} name
       * @param {Function} callback
       * @param {string} object
       * @return {?}
       */
      function debug(data, name, callback, object) {
        /** @type {null} */
        var value = null;
        return null != (data = data.getAttribute(name)) && (value = callback(data)), null == value ? void 0 != object ? object : null : value;
      }
      /**
       * @param {string} x
       * @return {?}
       */
      function stringify(x) {
        return x ? (/^\d+\-\d+\-\d+T\d+:\d+:\d+(\.\d+)?$/.test(x) && (x += "Z"), x = Date.parse(x), isNaN(x) ? null : Math.floor(x / 1E3)) : null;
      }
      /**
       * @param {(number|string)} value
       * @return {?}
       */
      function restoreScript(value) {
        return value && (value = /^P(?:([0-9]*)Y)?(?:([0-9]*)M)?(?:([0-9]*)D)?(?:T(?:([0-9]*)H)?(?:([0-9]*)M)?(?:([0-9.]*)S)?)?$/.exec(value)) ? (value = 31536E3 * Number(value[1] || null) + 2592E3 * Number(value[2] || null) + 86400 * Number(value[3] || null) + 3600 * Number(value[4] || null) + 60 * Number(value[5] || null) + Number(value[6] || null), isFinite(value) ? value : null) : null;
      }
      /**
       * @param {Object} value
       * @return {?}
       */
      function number(value) {
        /** @type {(Array.<string>|null)} */
        var v = /([0-9]+)-([0-9]+)/.exec(value);
        return v ? (value = Number(v[1]), isFinite(value) ? (v = Number(v[2]), isFinite(v) ? {
          start : value,
          end : v
        } : null) : null) : null;
      }
      /**
       * @param {Object} a
       * @return {?}
       */
      function str(a) {
        return(a = Number(a)) % 1 ? null : a;
      }
      /**
       * @param {number} val
       * @return {?}
       */
      function id(val) {
        return!((val = Number(val)) % 1) && 0 < val ? val : null;
      }
      /**
       * @param {number} arg
       * @return {?}
       */
      function insert(arg) {
        return!((arg = Number(arg)) % 1) && 0 <= arg ? arg : null;
      }
      /**
       * @param {Object} val
       * @return {?}
       */
      function attr(val) {
        var m;
        return val = (m = val.match(/^(\d+)\/(\d+)$/)) ? Number(m[1] / m[2]) : Number(val), isNaN(val) ? null : val;
      }
      /**
       * @param {Object} files
       * @param {boolean} callback
       * @param {?} to
       * @return {?}
       */
      function copy(files, callback, to) {
        /** @type {null} */
        var obj = null;
        /** @type {Array} */
        var result = [];
        /** @type {Array} */
        var c = [];
        var arr = (files = onSuccess(files)).map(function(result) {
          return result.keyId;
        }).filter(el);
        if (arr.length && 1 < arr.filter(src).length) {
          throw new error(2, 4, 4010);
        }
        if (!to) {
          if ((c = files.filter(function(settings) {
            return "urn:mpeg:dash:mp4protection:2011" != settings.yc || (obj = settings.init || obj, false);
          })).length) {
            if (!(result = getName(obj, callback, c)).length) {
              /** @type {Array} */
              result = [token("", obj)];
            }
          }
        }
        if (!!files.length) {
          if (!(!to && c.length)) {
            result = keys(properties).map(function(isXML) {
              return token(isXML, obj);
            });
          }
        }
        var keyId = arr[0] || null;
        return keyId && result.forEach(function(e) {
          e.initData.forEach(function(result) {
            result.keyId = keyId;
          });
        }), {
          Yb : keyId,
          Ye : obj,
          drmInfos : result,
          $b : true
        };
      }
      /**
       * @param {boolean} p
       * @param {boolean} callback
       * @param {?} options
       * @param {?} fn
       * @return {?}
       */
      function search(p, callback, options, fn) {
        var f = copy(p, callback, fn);
        if (options.$b) {
          /** @type {boolean} */
          p = 1 == options.drmInfos.length && !options.drmInfos[0].keySystem;
          /** @type {boolean} */
          callback = !f.drmInfos.length;
          if (!options.drmInfos.length || p && !callback) {
            options.drmInfos = f.drmInfos;
          }
          /** @type {boolean} */
          options.$b = false;
        } else {
          if (0 < f.drmInfos.length && (options.drmInfos = options.drmInfos.filter(function(keyCode) {
            return f.drmInfos.some(function(e) {
              return e.keySystem == keyCode.keySystem;
            });
          }), !options.drmInfos.length)) {
            throw new error(2, 4, 4008);
          }
        }
        return f.Yb || options.Yb;
      }
      /**
       * @param {Function} name
       * @param {boolean} callback
       * @param {Array} d
       * @return {?}
       */
      function getName(name, callback, d) {
        return d.map(function(item) {
          var udataCur = properties[item.yc];
          return udataCur ? [token(udataCur, item.init || name)] : callback(item.node) || [];
        }).reduce(options, []);
      }
      /**
       * @param {Array} files
       * @return {?}
       */
      function onSuccess(files) {
        return files.map(function(data) {
          var evt = data.getAttribute("schemeIdUri");
          var name = data.getAttribute("cenc:default_KID");
          var elem = filter(data, "cenc:pssh").map(selector);
          if (!evt) {
            return null;
          }
          if (evt = evt.toLowerCase(), name && 0 <= (name = name.replace(/-/g, "").toLowerCase()).indexOf(" ")) {
            throw new error(2, 4, 4009);
          }
          /** @type {Array} */
          var codeSegments = [];
          try {
            codeSegments = elem.map(function(isXML) {
              return{
                initDataType : "cenc",
                initData : reset(isXML),
                keyId : null
              };
            });
          } catch (t) {
            throw new error(2, 4, 4007);
          }
          return{
            node : data,
            yc : evt,
            keyId : name,
            init : 0 < codeSegments.length ? codeSegments : null
          };
        }).filter(el);
      }
      /**
       * @param {string} title
       * @param {?} version
       * @param {?} recurring
       * @param {?} async
       * @param {number} b
       * @return {?}
       */
      function test(title, version, recurring, async, b) {
        if (null != b) {
          /** @type {number} */
          b = Math.round(b);
        }
        var vals = {
          RepresentationID : version,
          Number : recurring,
          Bandwidth : async,
          Time : b
        };
        return title.replace(/\$(RepresentationID|Number|Bandwidth|Time)?(?:%0([0-9]+)d)?\$/g, function(str, i, width) {
          if ("$$" == str) {
            return "$";
          }
          var val = vals[i];
          return null == val ? str : ("RepresentationID" == i && (width && (width = void 0)), str = val.toString(), width = global.parseInt(width, 10) || 1, Array(Math.max(0, width - str.length) + 1).join("0") + str);
        });
      }
      /**
       * @param {Date} data
       * @param {Function} name
       * @return {?}
       */
      function done(data, name) {
        var result = join(data, name, "timescale");
        /** @type {number} */
        var timescale = 1;
        if (result) {
          timescale = id(result) || 1;
        }
        if (result = id((result = join(data, name, "duration")) || "")) {
          result /= timescale;
        }
        var precision = join(data, name, "startNumber");
        var d = join(data, name, "presentationTimeOffset");
        var fragment = insert(precision || "");
        if (!(null != precision && null != fragment)) {
          /** @type {number} */
          fragment = 1;
        }
        /** @type {null} */
        precision = null;
        if (options = merge(data, name, "SegmentTimeline")) {
          precision = timescale;
          /** @type {number} */
          var w = Number(d);
          var yValue = data.S.duration || 1 / 0;
          var options = filter(options, "S");
          /** @type {Array} */
          var nonBreakableBlocks = [];
          /** @type {number} */
          var number = 0;
          /** @type {number} */
          var i = 0;
          for (;i < options.length;++i) {
            var type = debug(xhr = options[i], "t", insert);
            var bs = debug(xhr, "d", insert);
            var xhr = debug(xhr, "r", str);
            if (null != type && (type -= w), !bs) {
              break;
            }
            if (type = null != type ? type : number, 0 > (xhr = xhr || 0)) {
              if (i + 1 < options.length) {
                if (null == (xhr = debug(options[i + 1], "t", insert))) {
                  break;
                }
                if (type >= xhr) {
                  break;
                }
                /** @type {number} */
                xhr = Math.ceil((xhr - type) / bs) - 1;
              } else {
                if (1 / 0 == yValue) {
                  break;
                }
                if (type / precision >= yValue) {
                  break;
                }
                /** @type {number} */
                xhr = Math.ceil((yValue * precision - type) / bs) - 1;
              }
            }
            if (0 < nonBreakableBlocks.length) {
              if (type != number) {
                /** @type {number} */
                nonBreakableBlocks[nonBreakableBlocks.length - 1].end = type / precision;
              }
            }
            /** @type {number} */
            var v = 0;
            for (;v <= xhr;++v) {
              number = type + bs;
              nonBreakableBlocks.push({
                start : type / precision,
                end : number / precision,
                Ee : type
              });
              type = number;
            }
          }
          /** @type {Array} */
          precision = nonBreakableBlocks;
        }
        return{
          timescale : timescale,
          P : result,
          za : fragment,
          presentationTimeOffset : Number(d) / timescale || 0,
          Ub : Number(d),
          H : precision
        };
      }
      /**
       * @param {Date} options
       * @param {Function} fn
       * @param {string} name
       * @return {?}
       */
      function join(options, fn, name) {
        return[fn(options.A), fn(options.U), fn(options.W)].filter(el).map(function(elem) {
          return elem.getAttribute(name);
        }).reduce(function(err, err2) {
          return err || err2;
        });
      }
      /**
       * @param {Date} q
       * @param {Function} compareFn
       * @param {string} first
       * @return {?}
       */
      function merge(q, compareFn, first) {
        return[compareFn(q.A), compareFn(q.U), compareFn(q.W)].filter(el).map(function(data) {
          return errorHandler(data, first);
        }).reduce(function(err, err2) {
          return err || err2;
        });
      }
      /**
       * @param {(Object|number)} node
       * @param {string} data
       * @return {?}
       */
      function parseXML(node, data) {
        /** @type {DOMParser} */
        var parser = new DOMParser;
        try {
          var contents = text(node);
          /** @type {(Document|null)} */
          var doc = parser.parseFromString(contents, "text/xml");
        } catch (t) {
        }
        if (doc && doc.documentElement.tagName == data) {
          /** @type {Element} */
          var d = doc.documentElement
        }
        return d && 0 < d.getElementsByTagName("parsererror").length ? null : d;
      }
      /**
       * @param {Element} root
       * @param {?} rejected
       * @param {?} deepDataAndEvents
       * @param {number} cb
       * @param {?} triggerRoute
       * @param {number} callbacks
       * @return {?}
       */
      function walk(root, rejected, deepDataAndEvents, cb, triggerRoute, callbacks) {
        var a = root.getAttribute("xlink:href");
        var onRequest = root.getAttribute("xlink:actuate") || "onRequest";
        /** @type {number} */
        var i = 0;
        for (;i < root.attributes.length;i++) {
          var tag = root.attributes[i].nodeName;
          if (-1 != tag.indexOf("xlink:")) {
            root.removeAttribute(tag);
            --i;
          }
        }
        if (5 <= callbacks) {
          return Promise.reject(new error(2, 4, 4028));
        }
        if ("onLoad" != onRequest) {
          return Promise.reject(new error(2, 4, 4027));
        }
        var typePattern = call([cb], [a]);
        return triggerRoute.request(0, shift(typePattern, rejected)).then(function(d) {
          if (!(d = parseXML(d.data, root.tagName))) {
            return Promise.reject(new error(2, 4, 4001, a));
          }
          for (;root.childNodes.length;) {
            root.removeChild(root.childNodes[0]);
          }
          for (;d.childNodes.length;) {
            var k = d.childNodes[0];
            d.removeChild(k);
            root.appendChild(k);
          }
          /** @type {number} */
          k = 0;
          for (;k < d.attributes.length;k++) {
            var name = d.attributes[k].nodeName;
            var value = d.getAttribute(name);
            root.setAttribute(name, value);
          }
          return then(root, rejected, deepDataAndEvents, typePattern[0], triggerRoute, callbacks + 1);
        }.bind(root));
      }
      /**
       * @param {Element} root
       * @param {?} rejected
       * @param {?} deepDataAndEvents
       * @param {number} cb
       * @param {?} triggerRoute
       * @param {number} callbacks
       * @return {?}
       */
      function then(root, rejected, deepDataAndEvents, cb, triggerRoute, callbacks) {
        if (callbacks = callbacks || 0, root.getAttribute("xlink:href")) {
          j = walk(root, rejected, deepDataAndEvents, cb, triggerRoute, callbacks);
          return deepDataAndEvents && (j = j.catch(function() {
            return then(root, rejected, deepDataAndEvents, cb, triggerRoute, callbacks);
          })), j;
        }
        /** @type {number} */
        j = 0;
        for (;j < root.childNodes.length;j++) {
          var expectedHashCode = root.childNodes[j];
          if (expectedHashCode instanceof Element) {
            if ("urn:mpeg:dash:resolve-to-zero:2013" == expectedHashCode.getAttribute("xlink:href")) {
              root.removeChild(expectedHashCode);
              --j;
            }
          }
        }
        /** @type {Array} */
        var nodeArgs = [];
        /** @type {number} */
        var j = 0;
        for (;j < root.childNodes.length;j++) {
          if ((expectedHashCode = root.childNodes[j]).nodeType == Node.ELEMENT_NODE) {
            expectedHashCode = then(expectedHashCode, rejected, deepDataAndEvents, cb, triggerRoute, callbacks);
            nodeArgs.push(expectedHashCode);
          }
        }
        return Promise.all(nodeArgs).then(function() {
          return root;
        });
      }
      /**
       * @param {?} a
       * @param {?} memo
       * @param {?} inCode
       * @return {undefined}
       */
      function inject(a, memo, inCode) {
        this.a = a;
        this.V = memo;
        this.K = inCode;
      }
      /**
       * @param {?} pos
       * @param {?} start
       * @param {?} textStatus
       * @param {?} a
       * @param {?} canceled
       * @param {?} status
       * @return {undefined}
       */
      function complete(pos, start, textStatus, a, canceled, status) {
        this.position = pos;
        this.startTime = start;
        this.endTime = textStatus;
        this.a = a;
        this.V = canceled;
        this.K = status;
      }
      /**
       * @param {Array} opt_y
       * @param {number} resultMat
       * @return {undefined}
       */
      function Vector(opt_y, resultMat) {
        /** @type {Array} */
        this.L = opt_y;
        /** @type {boolean} */
        this.a = resultMat == mat;
        /** @type {number} */
        this.v = 0;
      }
      /**
       * @return {?}
       */
      function charAt() {
        throw new error(2, 3, 3E3);
      }
      /**
       * @return {undefined}
       */
      function store() {
        /** @type {Array} */
        this.b = [];
        /** @type {Array} */
        this.a = [];
      }
      /**
       * @param {?} expectedHashCode
       * @return {undefined}
       */
      function results(expectedHashCode) {
        for (;expectedHashCode.u.ba();) {
          expectedHashCode.Ra.nb(expectedHashCode.start, expectedHashCode.u);
        }
      }
      /**
       * @param {?} b
       * @return {undefined}
       */
      function prefixed(b) {
        var e = b.u.F();
        for (;0 < e;--e) {
          b.Ra.nb(b.start, b.u);
        }
      }
      /**
       * @param {Function} callback
       * @return {?}
       */
      function close(callback) {
        return function(data) {
          callback(data.u.Ja(data.u.L.byteLength - data.u.v));
        };
      }
      /**
       * @param {string} key
       * @return {?}
       */
      function index(key) {
        /** @type {number} */
        var index = 0;
        /** @type {number} */
        var characterPosition = 0;
        for (;characterPosition < key.length;characterPosition++) {
          /** @type {number} */
          index = index << 8 | key.charCodeAt(characterPosition);
        }
        return index;
      }
      /**
       * @param {string} data
       * @param {number} a
       * @param {?} callback
       * @param {number} options
       * @return {?}
       */
      function parseString(data, a, callback, options) {
        var res;
        var fmt = (new store).aa("sidx", function(walkers) {
          res = open(a, options, callback, walkers);
        });
        if (data && fmt.parse(data), res) {
          return res;
        }
        throw new error(2, 3, 3004);
      }
      /**
       * @param {number} id
       * @param {number} x
       * @param {?} conn
       * @param {Object} obj
       * @return {?}
       */
      function open(id, x, conn, obj) {
        /** @type {Array} */
        var configList = [];
        obj.u.J(4);
        var tileWidth = obj.u.F();
        if (!tileWidth) {
          throw new error(2, 3, 3005);
        }
        if (obj.version) {
          var x3 = obj.u.Ta();
          var k = obj.u.Ta();
        } else {
          x3 = obj.u.F();
          k = obj.u.F();
        }
        obj.u.J(2);
        var kl = obj.u.tc();
        /** @type {number} */
        x = x3 - x;
        id = id + obj.size + k;
        /** @type {number} */
        k = 0;
        for (;k < kl;k++) {
          /** @type {number} */
          x3 = (2147483648 & (postfix = obj.u.F())) >>> 31;
          /** @type {number} */
          var postfix = 2147483647 & postfix;
          var dx = obj.u.F();
          if (obj.u.J(4), 1 == x3) {
            throw new error(2, 3, 3006);
          }
          configList.push(new complete(configList.length, x / tileWidth, (x + dx) / tileWidth, function() {
            return conn;
          }, id, id + postfix - 1));
          x += dx;
          id += postfix;
        }
        return configList;
      }
      /**
       * @param {?} array
       * @return {undefined}
       */
      function List(array) {
        this.a = array;
      }
      /**
       * @param {Object} el
       * @param {string} regex
       * @return {undefined}
       */
      function observable(el, regex) {
        if (el.a.length) {
          var value = el.a[el.a.length - 1];
          if (!(value.startTime > regex)) {
            el.a[el.a.length - 1] = new complete(value.position, value.startTime, regex, value.a, value.V, value.K);
          }
        }
      }
      /**
       * @param {number} value
       * @return {undefined}
       */
      function Uint8Array(value) {
        /** @type {number} */
        this.b = value;
        this.a = new Vector(value, 0);
        if (!resultItems) {
          /** @type {Array} */
          resultItems = [new Uint8Array([255]), new Uint8Array([127, 255]), new Uint8Array([63, 255, 255]), new Uint8Array([31, 255, 255, 255]), new Uint8Array([15, 255, 255, 255, 255]), new Uint8Array([7, 255, 255, 255, 255, 255]), new Uint8Array([3, 255, 255, 255, 255, 255, 255]), new Uint8Array([1, 255, 255, 255, 255, 255, 255, 255])];
        }
      }
      /**
       * @param {Object} options
       * @return {?}
       */
      function jQuery(options) {
        var codeSegments = getData(options);
        if (7 < codeSegments.length) {
          throw new error(2, 3, 3002);
        }
        /** @type {number} */
        var ret = 0;
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          ret = 256 * ret + codeSegments[i];
        }
        codeSegments = ret;
        ret = getData(options);
        t: {
          /** @type {number} */
          i = 0;
          for (;i < resultItems.length;i++) {
            if (drag(ret, resultItems[i])) {
              /** @type {boolean} */
              i = true;
              break t;
            }
          }
          /** @type {boolean} */
          i = false;
        }
        if (i) {
          /** @type {number} */
          ret = options.b.byteLength - options.a.v;
        } else {
          if (8 == ret.length && 224 & ret[1]) {
            throw new error(2, 3, 3001);
          }
          /** @type {number} */
          i = ret[0] & (1 << 8 - ret.length) - 1;
          /** @type {number} */
          var n = 1;
          for (;n < ret.length;n++) {
            i = 256 * i + ret[n];
          }
          ret = i;
        }
        return ret = options.a.v + ret <= options.b.byteLength ? ret : options.b.byteLength - options.a.v, i = new DataView(options.b.buffer, options.b.byteOffset + options.a.v, ret), options.a.J(ret), new Player(codeSegments, i);
      }
      /**
       * @param {Object} params
       * @return {?}
       */
      function getData(params) {
        var length;
        var n = params.a.Jb();
        /** @type {number} */
        length = 1;
        for (;8 >= length && !(n & 1 << 8 - length);length++) {
        }
        if (8 < length) {
          throw new error(2, 3, 3002);
        }
        /** @type {Uint8Array} */
        var ret = new Uint8Array(length);
        ret[0] = n;
        /** @type {number} */
        n = 1;
        for (;n < length;n++) {
          ret[n] = params.a.Jb();
        }
        return ret;
      }
      /**
       * @param {?} id
       * @param {?} a
       * @return {undefined}
       */
      function Player(id, a) {
        this.id = id;
        this.a = a;
      }
      /**
       * @param {?} data
       * @return {?}
       */
      function parseFloat(data) {
        if (8 < data.a.byteLength) {
          throw new error(2, 3, 3002);
        }
        if (8 == data.a.byteLength && 224 & data.a.getUint8(0)) {
          throw new error(2, 3, 3001);
        }
        /** @type {number} */
        var c = 0;
        /** @type {number} */
        var i = 0;
        for (;i < data.a.byteLength;i++) {
          var b = data.a.getUint8(i);
          c = 256 * c + b;
        }
        return c;
      }
      /**
       * @return {undefined}
       */
      function Transform() {
      }
      /**
       * @param {Object} input
       * @param {Object} first
       * @param {number} fn
       * @param {number} x
       * @param {?} node
       * @param {number} dataAndEvents
       * @return {?}
       */
      function highlight(input, first, fn, x, node, dataAndEvents) {
        /**
         * @return {?}
         */
        function tree() {
          return node;
        }
        /** @type {Array} */
        var commits = [];
        input = new Uint8Array(input.a);
        /** @type {number} */
        var ref = -1;
        /** @type {number} */
        var author = -1;
        for (;input.ba();) {
          var out = jQuery(input);
          if (187 == out.id) {
            var parsed = hover(out);
            if (parsed) {
              /** @type {number} */
              out = fn * (parsed.Fe - dataAndEvents);
              parsed = first + parsed.Wd;
              if (0 <= ref) {
                commits.push(new complete(commits.length, ref, out, tree, author, parsed - 1));
              }
              /** @type {number} */
              ref = out;
              author = parsed;
            }
          }
        }
        return 0 <= ref && commits.push(new complete(commits.length, ref, x, tree, author, null)), commits;
      }
      /**
       * @param {?} value
       * @return {?}
       */
      function hover(value) {
        if (179 != (value = jQuery(that = new Uint8Array(value.a))).id) {
          throw new error(2, 3, 3013);
        }
        if (value = parseFloat(value), 183 != (that = jQuery(that)).id) {
          throw new error(2, 3, 3012);
        }
        var that = new Uint8Array(that.a);
        /** @type {number} */
        var number = 0;
        for (;that.ba();) {
          var l = jQuery(that);
          if (241 == l.id) {
            number = parseFloat(l);
            break;
          }
        }
        return{
          Fe : value,
          Wd : number
        };
      }
      /**
       * @param {Date} options
       * @param {Function} key
       * @return {?}
       */
      function iterate(options, key) {
        var a = merge(options, key, "Initialization");
        if (!a) {
          return null;
        }
        var X = options.A.X;
        if (j = a.getAttribute("sourceURL")) {
          X = call(options.A.X, [j]);
        }
        /** @type {number} */
        var j = 0;
        /** @type {null} */
        var c = null;
        return(a = debug(a, "range", number)) && (j = a.start, c = a.end), new inject(function() {
          return X;
        }, j, c);
      }
      /**
       * @param {Date} options
       * @param {Function} args
       * @return {?}
       */
      function range(options, args) {
        var index = join(options, key, "presentationTimeOffset");
        var value = iterate(options, key);
        /** @type {number} */
        var result = Number(index);
        var data = options.A.contentType;
        var which = options.A.mimeType.split("/")[1];
        if ("text" != data && ("mp4" != which && "webm" != which)) {
          throw new error(2, 4, 4006);
        }
        if ("webm" == which && !value) {
          throw new error(2, 4, 4005);
        }
        data = merge(options, key, "RepresentationIndex");
        var b = join(options, key, "indexRange");
        var restoreScript = options.A.X;
        b = number(b || "");
        if (data) {
          var completeSourceMapURL = data.getAttribute("sourceURL");
          if (completeSourceMapURL) {
            restoreScript = call(options.A.X, [completeSourceMapURL]);
          }
          b = debug(data, "range", number, b);
        }
        if (!b) {
          throw new error(2, 4, 4002);
        }
        return result = defaults(options, args, value, restoreScript, b.start, b.end, which, result), {
          createSegmentIndex : result.createSegmentIndex,
          findSegmentPosition : result.findSegmentPosition,
          getSegmentReference : result.getSegmentReference,
          initSegmentReference : value,
          presentationTimeOffset : Number(index) || 0
        };
      }
      /**
       * @param {Date} opts
       * @param {Function} var_args
       * @param {?} obj
       * @param {?} callback
       * @param {number} args
       * @param {Array} def
       * @param {string} object
       * @param {number} options
       * @return {?}
       */
      function defaults(opts, var_args, obj, callback, args, def, object, options) {
        var data_priv = opts.presentationTimeline;
        /** @type {boolean} */
        var c = !opts.Ca || !opts.S.yb;
        var r20 = opts.S.duration;
        /** @type {Function} */
        var sendMessage = var_args;
        /** @type {null} */
        var val = null;
        return{
          /**
           * @return {?}
           */
          createSegmentIndex : function() {
            /** @type {Array} */
            var promises = [sendMessage(callback, args, def), "webm" == object ? sendMessage(obj.a(), obj.V, obj.K) : null];
            return sendMessage = null, Promise.all(promises).then(function(state) {
              var pdataCur = state[0];
              state = state[1] || null;
              pdataCur = "mp4" == object ? parseString(pdataCur, args, callback, options) : (new Transform).parse(pdataCur, state, callback, options);
              data_priv.Ga(0, pdataCur);
              val = new List(pdataCur);
              if (c) {
                observable(val, r20);
              }
            });
          },
          /**
           * @param {number} expr
           * @return {?}
           */
          findSegmentPosition : function(expr) {
            return val.find(expr);
          },
          /**
           * @param {?} expectedHashCode
           * @return {?}
           */
          getSegmentReference : function(expectedHashCode) {
            return val.get(expectedHashCode);
          }
        };
      }
      /**
       * @param {?} index
       * @return {?}
       */
      function key(index) {
        return index.Ua;
      }
      /**
       * @param {Date} data
       * @param {?} obj
       * @return {?}
       */
      function loop(data, obj) {
        var result = iterate(data, r);
        var d = tick(data);
        var val = done(data, r);
        var key = val.za;
        if (!key) {
          /** @type {number} */
          key = 1;
        }
        /** @type {number} */
        var a = 0;
        if (val.P ? a = val.P * (key - 1) : val.H && (0 < val.H.length && (a = val.H[0].start)), !(d = {
          P : val.P,
          startTime : a,
          za : key,
          presentationTimeOffset : val.presentationTimeOffset,
          H : val.H,
          Fa : d
        }).P && (!d.H && 1 < d.Fa.length)) {
          throw new error(2, 4, 4002);
        }
        if (!d.P && (!data.S.duration && (!d.H && 1 == d.Fa.length))) {
          throw new error(2, 4, 4002);
        }
        if (d.H && !d.H.length) {
          throw new error(2, 4, 4002);
        }
        return key = val = null, data.W.id && (data.A.id && (key = data.W.id + "," + data.A.id, val = obj[key])), a = expand(data.S.duration, d.za, data.A.X, d), val ? (val.lb(a), val.wb(data.presentationTimeline.ia() - data.S.start)) : (data.presentationTimeline.Ga(0, a), val = new List(a), key && (data.Ca && (obj[key] = val))), data.Ca && data.S.yb || observable(val, data.S.duration), {
          createSegmentIndex : Promise.resolve.bind(Promise),
          findSegmentPosition : val.find.bind(val),
          getSegmentReference : val.get.bind(val),
          initSegmentReference : result,
          presentationTimeOffset : d.presentationTimeOffset
        };
      }
      /**
       * @param {?} context
       * @return {?}
       */
      function r(context) {
        return context.pa;
      }
      /**
       * @param {?} r2
       * @param {number} offset
       * @param {?} key
       * @param {Object} node
       * @return {?}
       */
      function expand(r2, offset, key, node) {
        var valuesLen = node.Fa.length;
        if (node.H) {
          if (node.H.length != node.Fa.length) {
            /** @type {number} */
            valuesLen = Math.min(node.H.length, node.Fa.length);
          }
        }
        /** @type {Array} */
        var normals = [];
        var y = node.startTime;
        /** @type {number} */
        var i = 0;
        for (;i < valuesLen;i++) {
          var page = node.Fa[i];
          var camelKey = call(key, [page.md]);
          var z = null != node.P ? y + node.P : node.H ? node.H[i].end : y + r2;
          normals.push(new complete(i + offset, y, z, function(d) {
            return d;
          }.bind(null, camelKey), page.start, page.end));
          y = z;
        }
        return normals;
      }
      /**
       * @param {Date} value
       * @return {?}
       */
      function tick(value) {
        return[value.A.pa, value.U.pa, value.W.pa].filter(el).map(function(dep) {
          return filter(dep, "SegmentURL");
        }).reduce(function(newlines, dataAndEvents) {
          return 0 < newlines.length ? newlines : dataAndEvents;
        }).map(function(line) {
          if (line.getAttribute("indexRange")) {
            if (!value.ec) {
              /** @type {boolean} */
              value.ec = true;
            }
          }
          var media = line.getAttribute("media");
          return line = debug(line, "mediaRange", number, {
            start : 0,
            end : null
          }), {
            md : media,
            start : line.start,
            end : line.end
          };
        });
      }
      /**
       * @param {Date} options
       * @param {Object} val
       * @param {string} map
       * @param {Object} key
       * @return {?}
       */
      function Game(options, val, map, key) {
        var settings = list(options);
        var args = done(options, name);
        var p = join(options, name, "media");
        var result = join(options, name, "index");
        if (args = {
          P : args.P,
          timescale : args.timescale,
          za : args.za,
          presentationTimeOffset : args.presentationTimeOffset,
          Ub : args.Ub,
          H : args.H,
          Bb : p,
          Qa : result
        }, p = 0 + (args.Qa ? 1 : 0), p += args.H ? 1 : 0, !(p += args.P ? 1 : 0)) {
          throw new error(2, 4, 4002);
        }
        if (1 != p && (args.Qa && (args.H = null), args.P = null), !args.Qa && !args.Bb) {
          throw new error(2, 4, 4002);
        }
        if (args.Qa) {
          if ("mp4" != (map = options.A.mimeType.split("/")[1]) && "webm" != map) {
            throw new error(2, 4, 4006);
          }
          if ("webm" == map && !settings) {
            throw new error(2, 4, 4005);
          }
          key = test(args.Qa, options.A.id, null, options.bandwidth || null, null);
          options = defaults(options, val, settings, key = call(options.A.X, [key]), 0, null, map, args.presentationTimeOffset);
        } else {
          if (args.P) {
            if (!key) {
              options.presentationTimeline.Cb(args.P);
            }
            options = animate(options, args);
          } else {
            /** @type {null} */
            key = val = null;
            if (options.W.id) {
              if (options.A.id) {
                /** @type {string} */
                key = options.W.id + "," + options.A.id;
                val = map[key];
              }
            }
            p = create(options, args);
            if (val) {
              val.lb(p);
              val.wb(options.presentationTimeline.ia() - options.S.start);
            } else {
              options.presentationTimeline.Ga(0, p);
              val = new List(p);
              if (key) {
                if (options.Ca) {
                  /** @type {Object} */
                  map[key] = val;
                }
              }
            }
            if (!(options.Ca && options.S.yb)) {
              observable(val, options.S.duration);
            }
            options = {
              createSegmentIndex : Promise.resolve.bind(Promise),
              findSegmentPosition : val.find.bind(val),
              getSegmentReference : val.get.bind(val)
            };
          }
        }
        return{
          createSegmentIndex : options.createSegmentIndex,
          findSegmentPosition : options.findSegmentPosition,
          getSegmentReference : options.getSegmentReference,
          initSegmentReference : settings,
          presentationTimeOffset : args.presentationTimeOffset
        };
      }
      /**
       * @param {?} name
       * @return {?}
       */
      function name(name) {
        return name.Va;
      }
      /**
       * @param {Date} options
       * @param {?} item
       * @return {?}
       */
      function animate(options, item) {
        var timeout = options.S.duration;
        var duration = item.P;
        var value = item.za;
        var i = item.timescale;
        var title = item.Bb;
        var async = options.bandwidth || null;
        var id = options.A.id;
        var errStr = options.A.X;
        return{
          createSegmentIndex : Promise.resolve.bind(Promise),
          /**
           * @param {?} time
           * @return {?}
           */
          findSegmentPosition : function(time) {
            return 0 > time || timeout && time >= timeout ? null : Math.floor(time / duration);
          },
          /**
           * @param {number} wanted
           * @return {?}
           */
          getSegmentReference : function(wanted) {
            /** @type {number} */
            var time = wanted * duration;
            return 0 > time || timeout && time >= timeout ? null : new complete(wanted, time, time + duration, function() {
              var task = test(title, id, wanted + value, async, time * i);
              return call(errStr, [task]);
            }, 0, null);
          }
        };
      }
      /**
       * @param {Date} options
       * @param {Date} node
       * @return {?}
       */
      function create(options, node) {
        /** @type {Array} */
        var els = [];
        /** @type {number} */
        var j = 0;
        for (;j < node.H.length;j++) {
          var k = j + node.za;
          els.push(new complete(k, node.H[j].start, node.H[j].end, function(data, key, async, format, recurring, properties) {
            return data = test(data, key, recurring, async, properties), call(format, [data]).map(function(dstUri) {
              return dstUri.toString();
            });
          }.bind(null, node.Bb, options.A.id, options.bandwidth || null, options.A.X, k, node.H[j].Ee + node.Ub), 0, null));
        }
        return els;
      }
      /**
       * @param {Date} options
       * @return {?}
       */
      function list(options) {
        var filename = join(options, name, "initialization");
        if (!filename) {
          return null;
        }
        var id = options.A.id;
        var async = options.bandwidth || null;
        var errStr = options.A.X;
        return new inject(function() {
          var filepath = test(filename, id, null, async, null);
          return call(errStr, [filepath]);
        }, 0, null);
      }
      /**
       * @return {?}
       */
      function eachEvent() {
        var key;
        var $cookies = {};
        for (key in object) {
          /** @type {boolean} */
          $cookies[key] = true;
        }
        for (key in flags) {
          /** @type {boolean} */
          $cookies[key] = true;
        }
        return["application/dash+xml", "application/x-mpegurl", "application/vnd.apple.mpegurl", "application/vnd.ms-sstr+xml"].forEach(function(key) {
          /** @type {boolean} */
          $cookies[key] = !!object[key];
        }), ["mpd", "m3u8", "ism"].forEach(function(key) {
          /** @type {boolean} */
          $cookies[key] = !!flags[key];
        }), $cookies;
      }
      /**
       * @param {number} last
       * @param {?} res
       * @param {Object} options
       * @param {?} key
       * @return {?}
       */
      function process(last, res, options, key) {
        var val = key;
        return val || 1 < (key = (new anonymous(last)).$.split("/").pop().split(".")).length && (key = key.pop().toLowerCase(), val = flags[key]), val ? Promise.resolve(val) : (options = shift([last], options), options.method = "HEAD", res.request(0, options).then(function(part) {
          return(part = part.headers["content-type"]) && (part = part.toLowerCase()), (val = object[part]) ? val : Promise.reject(new error(2, 4, 4E3, last));
        }, function(error) {
          return error.severity = 2, Promise.reject(error);
        }));
      }
      /**
       * @param {?} row_id
       * @param {?} escape
       * @return {undefined}
       */
      function item(row_id, escape) {
        this.c = row_id;
        this.j = escape;
        /** @type {number} */
        this.f = this.a = 1 / 0;
        /** @type {number} */
        this.b = 1;
        /** @type {number} */
        this.i = 0;
        /** @type {boolean} */
        this.h = true;
        /** @type {number} */
        this.g = 0;
      }
      /**
       * @return {undefined}
       */
      function proxy() {
        /** @type {null} */
        this.a = this.b = null;
        /** @type {Array} */
        this.g = [];
        /** @type {null} */
        this.c = null;
        /** @type {Array} */
        this.i = [];
        /** @type {number} */
        this.h = 1;
        this.j = {};
        /** @type {number} */
        this.l = 0;
        /** @type {null} */
        this.f = null;
      }
      /**
       * @param {Node} d
       * @return {?}
       */
      function find(d) {
        return d.a.networkingEngine.request(0, shift(d.g, d.b.retryParameters)).then(function(evt) {
          if (this.a) {
            return initAndGet(this, evt.data, evt.uri);
          }
        }.bind(d));
      }
      /**
       * @param {Node} that
       * @param {Element} root
       * @param {number} cb
       * @return {?}
       */
      function initAndGet(that, root, cb) {
        if (!(root = parseXML(root, "MPD"))) {
          throw new error(2, 4, 4001, cb);
        }
        return then(root, that.b.retryParameters, that.b.dash.xlinkFailGracefully, cb, that.a.networkingEngine).then(function(dataName) {
          return get(this, dataName, cb);
        }.bind(that));
      }
      /**
       * @param {Object} self
       * @param {Node} data
       * @param {?} callback
       * @return {?}
       */
      function get(self, data, callback) {
        /** @type {Array} */
        callback = [callback];
        if (0 < (res = filter(data, "Location").map(selector).filter(el)).length) {
          callback = self.g = res;
        }
        callback = call(callback, res = filter(data, "BaseURL").map(selector));
        var bytes = debug(data, "minBufferTime", restoreScript);
        self.l = debug(data, "minimumUpdatePeriod", restoreScript, -1);
        var a = debug(data, "availabilityStartTime", stringify);
        var res = debug(data, "timeShiftBufferDepth", restoreScript);
        var info = debug(data, "suggestedPresentationDelay", restoreScript);
        var context = debug(data, "maxSegmentDuration", restoreScript);
        var workerPrefix = data.getAttribute("type") || "static";
        if (self.c) {
          var fn = self.c.presentationTimeline
        } else {
          /** @type {number} */
          var l = Math.max(10, 1.5 * bytes);
          fn = new item(a, null != info ? info : l);
        }
        info = (a = on(self, {
          Ca : "static" != workerPrefix,
          presentationTimeline : fn,
          W : null,
          S : null,
          U : null,
          A : null,
          bandwidth : 0,
          ec : false
        }, callback, data)).duration;
        var al = a.periods;
        return fn.ob("static" == workerPrefix), fn.ea(info || 1 / 0), fn.Dc(null != res ? res : 1 / 0), fn.Cb(context || 1), self.c ? Promise.resolve() : (data = filter(data, "UTCTiming"), update(self, callback, data, fn.R()).then(function(deepDataAndEvents) {
          if (this.a) {
            fn.Bc(deepDataAndEvents);
            this.c = {
              presentationTimeline : fn,
              periods : al,
              offlineSessionIds : [],
              minBufferTime : bytes || 0
            };
          }
        }.bind(self)));
      }
      /**
       * @param {Object} x
       * @param {Object} evt
       * @param {?} callback
       * @param {Node} data
       * @return {?}
       */
      function on(x, evt, callback, data) {
        var time = debug(data, "mediaPresentationDuration", restoreScript);
        /** @type {Array} */
        var queryString = [];
        /** @type {number} */
        var value = 0;
        data = filter(data, "Period");
        /** @type {number} */
        var i = 0;
        for (;i < data.length;i++) {
          var result = data[i];
          value = debug(result, "start", restoreScript, value);
          var expectedHashCode = debug(result, "duration", restoreScript);
          /** @type {null} */
          var speed = null;
          if (i != data.length - 1) {
            var next = debug(data[i + 1], "start", restoreScript);
            if (null != next) {
              /** @type {number} */
              speed = next - value;
            }
          } else {
            if (null != time) {
              /** @type {number} */
              speed = time - value;
            }
          }
          if (null == speed && (speed = expectedHashCode), result = handler(x, evt, callback, {
            start : value,
            duration : speed,
            node : result,
            yb : null == speed || i == data.length - 1
          }), queryString.push(result), expectedHashCode = evt.W.id, -1 == x.i.indexOf(expectedHashCode) && (x.i.push(expectedHashCode), x.c && (x.a.filterNewPeriod(result), x.c.periods.push(result))), null == speed) {
            /** @type {null} */
            value = null;
            break;
          }
          value += speed;
        }
        return x.c || x.a.filterAllPeriods(queryString), null != time ? {
          periods : queryString,
          duration : time
        } : {
          periods : queryString,
          duration : value
        };
      }
      /**
       * @param {Object} content
       * @param {Object} data
       * @param {?} n
       * @param {Object} event
       * @return {?}
       */
      function handler(content, data, n, event) {
        data.W = onload(event.node, null, n);
        /** @type {Object} */
        data.S = event;
        if (!data.W.id) {
          /** @type {string} */
          data.W.id = "__shaka_period_" + event.start;
        }
        filter(event.node, "EventStream").forEach(content.Od.bind(content, event.start, event.duration));
        var files = (n = filter(event.node, "AdaptationSet").map(content.Md.bind(content, data)).filter(el)).map(function(dataAndEvents) {
          return dataAndEvents.Yd;
        }).reduce(options, []);
        var source = files.filter(src);
        if (data.Ca && files.length != source.length) {
          throw new error(2, 4, 4018);
        }
        var path = n.filter(function(dataAndEvents) {
          return!dataAndEvents.Tb;
        });
        if (n.filter(function(dataAndEvents) {
          return dataAndEvents.Tb;
        }).forEach(function(probeData) {
          var elem = probeData.streams[0];
          var sessionUserId = probeData.Tb;
          path.forEach(function(user) {
            if (user.id == sessionUserId) {
              user.streams.forEach(function(eventHandle) {
                eventHandle.trickModeVideo = elem;
              });
            }
          });
        }), files = readFile(path, "video"), source = readFile(path, "audio"), !files.length && !source.length) {
          throw new error(2, 4, 4004);
        }
        if (!source.length) {
          /** @type {Array} */
          source = [null];
        }
        if (!files.length) {
          /** @type {Array} */
          files = [null];
        }
        /** @type {Array} */
        data = [];
        /** @type {number} */
        n = 0;
        for (;n < source.length;n++) {
          /** @type {number} */
          var f = 0;
          for (;f < files.length;f++) {
            reply(content, source[n], files[f], data);
          }
        }
        content = readFile(path, "text");
        /** @type {Array} */
        files = [];
        /** @type {number} */
        n = 0;
        for (;n < content.length;n++) {
          files.push.apply(files, content[n].streams);
        }
        return{
          startTime : event.start,
          textStreams : files,
          variants : data
        };
      }
      /**
       * @param {Array} path
       * @param {string} type
       * @return {?}
       */
      function readFile(path, type) {
        return path.filter(function(res) {
          return res.contentType == type;
        });
      }
      /**
       * @param {Object} s
       * @param {boolean} args
       * @param {boolean} self
       * @param {Array} data
       * @return {undefined}
       */
      function reply(s, args, self, data) {
        if (args || self) {
          if (args && self) {
            var i = args.drmInfos;
            var expectedHashCode = self.drmInfos;
            if (i.length && expectedHashCode.length ? 0 < getItems(i, expectedHashCode).length : 1) {
              var options = getItems(args.drmInfos, self.drmInfos);
              /** @type {number} */
              i = 0;
              for (;i < args.streams.length;i++) {
                /** @type {number} */
                var ii = 0;
                for (;ii < self.streams.length;ii++) {
                  expectedHashCode = (self.streams[ii].bandwidth || 0) + (args.streams[i].bandwidth || 0);
                  expectedHashCode = {
                    id : s.h++,
                    language : args.language,
                    primary : args.Ab || self.Ab,
                    audio : args.streams[i],
                    video : self.streams[ii],
                    bandwidth : expectedHashCode,
                    drmInfos : options,
                    allowedByApplication : true,
                    allowedByKeySystem : true
                  };
                  data.push(expectedHashCode);
                }
              }
            }
          } else {
            options = args || self;
            /** @type {number} */
            i = 0;
            for (;i < options.streams.length;i++) {
              expectedHashCode = options.streams[i].bandwidth || 0;
              expectedHashCode = {
                id : s.h++,
                language : options.language || "und",
                primary : options.Ab,
                audio : args ? options.streams[i] : null,
                video : self ? options.streams[i] : null,
                bandwidth : expectedHashCode,
                drmInfos : options.drmInfos,
                allowedByApplication : true,
                allowedByKeySystem : true
              };
              data.push(expectedHashCode);
            }
          }
        }
      }
      /**
       * @param {Object} me
       * @param {number} percent
       * @return {undefined}
       */
      function onChange(me, percent) {
        if (!(0 > me.l)) {
          me.f = global.setTimeout(me.ue.bind(me), 1E3 * Math.max(Math.max(3, me.l) - percent, 0));
        }
      }
      /**
       * @param {Node} data
       * @param {Object} self
       * @param {string} fn
       * @return {?}
       */
      function onload(data, self, fn) {
        self = self || {
          contentType : "",
          mimeType : "",
          codecs : "",
          containsEmsgBoxes : false,
          frameRate : void 0,
          Db : null
        };
        fn = fn || self.X;
        var progressValues = filter(data, "BaseURL").map(selector);
        var options = data.getAttribute("contentType") || self.contentType;
        var optgroup = data.getAttribute("mimeType") || self.mimeType;
        var restoreScript = data.getAttribute("codecs") || self.codecs;
        var frameRate = debug(data, "frameRate", attr) || self.frameRate;
        /** @type {boolean} */
        var containsEmsgBoxes = !!filter(data, "InbandEventStream").length;
        var result = parser(result = filter(data, "AudioChannelConfiguration")) || self.Db;
        return options || (options = off(optgroup, restoreScript)), {
          X : call(fn, progressValues),
          Ua : errorHandler(data, "SegmentBase") || self.Ua,
          pa : errorHandler(data, "SegmentList") || self.pa,
          Va : errorHandler(data, "SegmentTemplate") || self.Va,
          width : debug(data, "width", insert) || self.width,
          height : debug(data, "height", insert) || self.height,
          contentType : options,
          mimeType : optgroup,
          codecs : restoreScript,
          frameRate : frameRate,
          containsEmsgBoxes : containsEmsgBoxes || self.containsEmsgBoxes,
          id : data.getAttribute("id"),
          Db : result
        };
      }
      /**
       * @param {Array} ca
       * @return {?}
       */
      function parser(ca) {
        /** @type {number} */
        var i = 0;
        for (;i < ca.length;++i) {
          var c = ca[i];
          var ret = c.getAttribute("schemeIdUri");
          if (ret && (c = c.getAttribute("value"))) {
            switch(ret) {
              case "urn:mpeg:dash:outputChannelPositionList:2012":
                return c.trim().split(/ +/).length;
              case "urn:mpeg:dash:23003:3:audio_channel_configuration:2011":
              ;
              case "urn:dts:dash:audio_channel_configuration:2012":
                if (!(ret = parseInt(c, 10))) {
                  continue;
                }
                return ret;
              case "tag:dolby.com,2014:dash:audio_channel_configuration:2011":
              ;
              case "urn:dolby:dash:audio_channel_configuration:2011":
                if (ret = parseInt(c, 16)) {
                  /** @type {number} */
                  ca = 0;
                  for (;ret;) {
                    if (1 & ret) {
                      ++ca;
                    }
                    ret >>= 1;
                  }
                  return ca;
                }
              ;
            }
          }
        }
        return null;
      }
      /**
       * @param {(Node|string)} err
       * @return {?}
       */
      function _done(err) {
        /** @type {number} */
        var e = 0 + (err.Ua ? 1 : 0);
        return e += err.pa ? 1 : 0, (e += err.Va ? 1 : 0) ? (1 != e && (err.Ua && (err.pa = null), err.Va = null), true) : "text" == err.contentType || "application" == err.contentType;
      }
      /**
       * @param {Node} node
       * @param {Object} callback
       * @param {?} data
       * @param {string} method
       * @return {?}
       */
      function poll(node, callback, data, method) {
        return callback = call(callback, [data]), callback = shift(callback, node.b.retryParameters), callback.method = method, node.a.networkingEngine.request(0, callback).then(function(d) {
          if ("HEAD" == method) {
            if (!d.headers || !d.headers.date) {
              return 0;
            }
            d = d.headers.date;
          } else {
            d = text(d.data);
          }
          return d = Date.parse(d), isNaN(d) ? 0 : d - Date.now();
        });
      }
      /**
       * @param {Object} event
       * @param {?} callback
       * @param {Array} children
       * @param {?} allBindingsAccessor
       * @return {?}
       */
      function update(event, callback, children, allBindingsAccessor) {
        children = children.map(function(results) {
          return{
            scheme : results.getAttribute("schemeIdUri"),
            value : results.getAttribute("value")
          };
        });
        var origValue = event.b.dash.clockSyncUri;
        return allBindingsAccessor && (!children.length && (origValue && children.push({
          scheme : "urn:mpeg:dash:utc:http-head:2014",
          value : origValue
        }))), getLayout(children, function(e) {
          var d = e.value;
          switch(e.scheme) {
            case "urn:mpeg:dash:utc:http-head:2014":
            ;
            case "urn:mpeg:dash:utc:http-head:2012":
              return poll(this, callback, d, "HEAD");
            case "urn:mpeg:dash:utc:http-xsdate:2014":
            ;
            case "urn:mpeg:dash:utc:http-iso:2014":
            ;
            case "urn:mpeg:dash:utc:http-xsdate:2012":
            ;
            case "urn:mpeg:dash:utc:http-iso:2012":
              return poll(this, callback, d, "GET");
            case "urn:mpeg:dash:utc:direct:2014":
            ;
            case "urn:mpeg:dash:utc:direct:2012":
              return e = Date.parse(d), isNaN(e) ? 0 : e - Date.now();
            case "urn:mpeg:dash:utc:http-ntp:2014":
            ;
            case "urn:mpeg:dash:utc:ntp:2014":
            ;
            case "urn:mpeg:dash:utc:sntp:2014":
            ;
            default:
              return Promise.reject();
          }
        }.bind(event)).catch(function() {
          return 0;
        });
      }
      /**
       * @param {string} name
       * @param {?} callback
       * @return {?}
       */
      function off(name, callback) {
        return params[isFunction(name, callback)] ? "text" : name.split("/")[0];
      }
      /**
       * @param {number} uri
       * @param {?} type
       * @param {Array} tokenizer
       * @param {string} segments
       * @return {undefined}
       */
      function Context(uri, type, tokenizer, segments) {
        /** @type {number} */
        this.uri = uri;
        this.type = type;
        /** @type {Array} */
        this.T = tokenizer;
        this.segments = segments || null;
      }
      /**
       * @param {?} name
       * @param {string} tmplName
       * @param {?} opt_setup
       * @param {Node} content
       * @return {undefined}
       */
      function Benchmark(name, tmplName, opt_setup, content) {
        this.id = name;
        /** @type {string} */
        this.name = tmplName;
        this.a = opt_setup;
        this.value = content || null;
      }
      /**
       * @param {string} name
       * @param {?} value
       * @return {undefined}
       */
      function Param(name, value) {
        /** @type {string} */
        this.name = name;
        this.value = value;
      }
      /**
       * @param {Element} parent
       * @param {string} name
       * @param {Node} key
       * @return {?}
       */
      function promote(parent, name, key) {
        return key = key || null, (parent = parent.getAttribute(name)) ? parent.value : key;
      }
      /**
       * @param {number} uri
       * @param {Array} T
       * @return {undefined}
       */
      function Feature(uri, T) {
        /** @type {Array} */
        this.T = T;
        /** @type {number} */
        this.uri = uri;
      }
      /**
       * @param {?} style
       * @param {string} name
       * @return {?}
       */
      function normalize(style, name) {
        return style.filter(function(e) {
          return e.name == name;
        });
      }
      /**
       * @param {?} name
       * @param {string} obj
       * @return {?}
       */
      function String(name, obj) {
        var value = normalize(name, obj);
        return value.length ? value[0] : null;
      }
      /**
       * @param {Object} data
       * @param {string} name
       * @param {?} type
       * @return {?}
       */
      function scan(data, name, type) {
        return data.filter(function(node) {
          var x = node.getAttribute("TYPE");
          return node = node.getAttribute("GROUP-ID"), x.value == name && node.value == type;
        });
      }
      /**
       * @param {?} b
       * @return {undefined}
       */
      function _overlap_interval(b) {
        this.b = b;
        /** @type {number} */
        this.a = 0;
      }
      /**
       * @param {Object} obj
       * @param {RegExp} result
       * @return {?}
       */
      function encodeURIComponent(obj, result) {
        result.lastIndex = obj.a;
        /** @type {(null|{ae: ??, length: ?, position: ??})} */
        var a = (a = result.exec(obj.b)) ? {
          position : a.index,
          length : a[0].length,
          ae : a
        } : null;
        return obj.a != obj.b.length && (a && a.position == obj.a) ? (obj.a += a.length, a.ae) : null;
      }
      /**
       * @param {Object} value
       * @return {?}
       */
      function escape(value) {
        return value.a == value.b.length ? null : (value = encodeURIComponent(value, /[^ \t\n]*/gm)) ? value[0] : null;
      }
      /**
       * @return {undefined}
       */
      function e() {
        /** @type {number} */
        this.a = 0;
      }
      /**
       * @param {number} value
       * @param {number} c
       * @param {string} object
       * @return {?}
       */
      function css(value, c, object) {
        var s = (c = (c = text(c)).replace(/\r\n|\r(?=[^\n]|$)/gm, "\n").trim()).split(/\n+/m);
        if (!/^#EXTM3U($|[ \t\n])/m.test(s[0])) {
          throw new error(2, 4, 4015);
        }
        /** @type {number} */
        c = 0;
        /** @type {Array} */
        var caseSensitive = [];
        /** @type {number} */
        var i = 1;
        for (;i < s.length;) {
          if (/^#(?!EXT)/m.test(s[i])) {
            i += 1;
          } else {
            var expectedHashCode = s[i];
            if (expectedHashCode = toArray(value.a++, expectedHashCode), 0 <= names.indexOf(expectedHashCode.name)) {
              /** @type {number} */
              c = 1;
            } else {
              if (0 <= textOnly.indexOf(expectedHashCode.name)) {
                if (1 != c) {
                  throw new error(2, 4, 4017);
                }
                return s = s.splice(i, s.length - i), value = getProperties(value, s, caseSensitive), new Context(object, c, caseSensitive, value);
              }
            }
            caseSensitive.push(expectedHashCode);
            i += 1;
            if ("EXT-X-STREAM-INF" == expectedHashCode.name) {
              expectedHashCode.a.push(new Param("URI", s[i]));
              i += 1;
            }
          }
        }
        return new Context(object, c, caseSensitive);
      }
      /**
       * @param {number} obj
       * @param {Array} object
       * @param {Array} caseSensitive
       * @return {?}
       */
      function getProperties(obj, object, caseSensitive) {
        /** @type {Array} */
        var result = [];
        /** @type {Array} */
        var expression = [];
        return object.forEach(function(expectedHashCode) {
          if (/^(#EXT)/.test(expectedHashCode)) {
            expectedHashCode = toArray(this.a++, expectedHashCode);
            if (0 <= names.indexOf(expectedHashCode.name)) {
              caseSensitive.push(expectedHashCode);
            } else {
              expression.push(expectedHashCode);
            }
          } else {
            if (!/^#(?!EXT)/m.test(expectedHashCode)) {
              result.push(new Feature(expectedHashCode.trim(), expression));
              /** @type {Array} */
              expression = [];
            }
          }
        }.bind(obj)), result;
      }
      /**
       * @param {number} obj
       * @param {?} object
       * @return {?}
       */
      function toArray(obj, object) {
        if (!(next = object.match(/^#(EXT[^:]*)(?::(.*))?$/))) {
          throw new error(2, 4, 4016);
        }
        var fn = next[1];
        var key = next[2];
        /** @type {Array} */
        var next = [];
        if (key && 0 <= key.indexOf("=")) {
          var ret;
          key = new _overlap_interval(key);
          /** @type {RegExp} */
          var r20 = /([^=]+)=(?:"([^"]*)"|([^",]*))(?:,|$)/g;
          for (;ret = encodeURIComponent(key, r20);) {
            next.push(new Param(ret[1], ret[2] || ret[3]));
          }
        } else {
          if (key) {
            return new Benchmark(obj, fn, next, key);
          }
        }
        return new Benchmark(obj, fn, next);
      }
      /**
       * @param {?} expectedHashCode
       * @return {?}
       */
      function module(expectedHashCode) {
        return new Promise(function(request) {
          var params = module.parse(expectedHashCode);
          request({
            uri : expectedHashCode,
            data : params.data,
            headers : {
              "content-type" : params.contentType
            }
          });
        });
      }
      /**
       * @return {undefined}
       */
      function val() {
        /** @type {null} */
        this.h = this.b = null;
        /** @type {number} */
        this.D = 1;
        this.g = {};
        this.C = {};
        this.j = {};
        this.s = {};
        /** @type {null} */
        this.a = null;
        /** @type {string} */
        this.m = "";
        this.w = new e;
        /** @type {null} */
        this.i = this.c = null;
        /** @type {boolean} */
        this.f = false;
        /** @type {null} */
        this.B = null;
        /** @type {number} */
        this.l = 0;
      }
      /**
       * @param {Object} input
       * @param {?} element
       * @param {?} method
       * @return {undefined}
       */
      function push(input, element, method) {
        apply(input, method).then(function(o) {
          if (1 != (o = css(this.w, o.data, o.uri)).type) {
            throw new error(2, 4, 4017);
          }
          var data = postLink(this, o, (data = String(o.T, "EXT-X-MEDIA-SEQUENCE")) ? Number(data.value) : 0);
          var obj = element.zb;
          /** @type {Array} */
          var tmp = [];
          var length = obj.endTime;
          /** @type {number} */
          var i = 0;
          for (;i < data.length;i++) {
            var item = data[i];
            if (item.position > obj.position) {
              /** @type {number} */
              var len = item.endTime - item.startTime;
              var n = length;
              var end = length + len;
              length = length + len;
              tmp.push(new complete(item.position, n, end, item.a, item.V, item.K));
            }
          }
          /** @type {Array} */
          data = tmp;
          element.ce.lb(data);
          if (data.length) {
            element.zb = data[data.length - 1];
          }
          if (String(o.T, "EXT-X-ENDLIST")) {
            o = element.zb.endTime;
            stop(this, false);
            this.a.ea(o);
          }
        }.bind(input));
      }
      /**
       * @param {Object} self
       * @param {(number|string)} type
       * @param {string} s
       * @return {?}
       */
      function execute(self, type, s) {
        if (0 != (type = css(self.w, type, s)).type) {
          throw new error(2, 4, 4022);
        }
        return seedTags(self, type).then(function(b) {
          this.b.filterAllPeriods([b]);
          if (this.f) {
            this.a.Cc(3 * this.l);
          }
          this.B = {
            presentationTimeline : this.a,
            periods : [b],
            offlineSessionIds : [],
            minBufferTime : 0
          };
        }.bind(self));
      }
      /**
       * @param {Object} ctx
       * @param {string} a
       * @return {?}
       */
      function seedTags(ctx, a) {
        var name = a.T;
        var promises = normalize(a.T, "EXT-X-MEDIA").filter(function(el) {
          return "SUBTITLES" == getAttribute(el, "TYPE");
        }.bind(ctx)).map(function(e) {
          return onEnd(this, e, a);
        }.bind(ctx));
        return Promise.all(promises).then(function(dataAndEvents) {
          var promises = normalize(name, "EXT-X-STREAM-INF").map(function(parent) {
            return parse(this, parent, a);
          }.bind(this));
          return Promise.all(promises).then(function(params) {
            return params = params.reduce(options, []), this.f || install(this, params), {
              startTime : 0,
              variants : params,
              textStreams : dataAndEvents
            };
          }.bind(this));
        }.bind(ctx));
      }
      /**
       * @param {Node} options
       * @param {Element} node
       * @param {Object} a
       * @return {?}
       */
      function parse(options, node, a) {
        var args = promote(node, "CODECS", "avc1.42E01E,mp4a.40.2").split(",");
        var elem = node.getAttribute("RESOLUTION");
        /** @type {null} */
        var tmp = null;
        /** @type {null} */
        var udataCur = null;
        var style = promote(node, "FRAME-RATE");
        /** @type {number} */
        var suiteView = Number(getAttribute(node, "BANDWIDTH"));
        if (elem) {
          var fn = elem.value.split("x");
          tmp = fn[0];
          udataCur = fn[1];
        }
        var err = (0,eval)(options, a);
        a = normalize(a.T, "EXT-X-MEDIA");
        var c = promote(node, "AUDIO");
        var self = promote(node, "VIDEO");
        if (c ? a = scan(a, "AUDIO", c) : self && (a = scan(a, "VIDEO", self)), fn = trim("text", args)) {
          var result = promote(node, "SUBTITLES");
          if (result) {
            if ((result = scan(a, "SUBTITLES", result)).length) {
              options.g[result[0].id].stream.codecs = fn;
            }
          }
          args.splice(args.indexOf(fn), 1);
        }
        a = a.map(function(failures) {
          return end(this, failures, args, err);
        }.bind(options));
        /** @type {Array} */
        var data = [];
        /** @type {Array} */
        var msg = [];
        return Promise.all(a).then(function(type) {
          if (c ? data = type : self && (msg = type), data.length || msg.length) {
            if (data.length) {
              if (getAttribute(node, "URI") == data[0].Mb) {
                /** @type {string} */
                type = "audio";
                /** @type {boolean} */
                var im = true;
              } else {
                /** @type {string} */
                type = "video";
              }
            } else {
              /** @type {string} */
              type = "audio";
            }
          } else {
            /** @type {boolean} */
            im = false;
            if (1 == args.length) {
              type = trim("video", args);
              /** @type {string} */
              type = elem || (style || type) ? "video" : "audio";
            } else {
              /** @type {string} */
              type = "video";
              /** @type {Array} */
              args = [args.join(",")];
            }
          }
          return im ? Promise.resolve() : ready(this, node, args, type, err);
        }.bind(options)).then(function(event) {
          return event && ("audio" == event.stream.type ? data = [event] : msg = [event]), stream(this, data, msg, suiteView, tmp, udataCur, style);
        }.bind(options));
      }
      /**
       * @param {Object} self
       * @param {Array} data
       * @param {Array} args
       * @param {number} obj
       * @param {Array} arg
       * @param {Array} value
       * @param {?} options
       * @return {?}
       */
      function stream(self, data, args, obj, arg, value, options) {
        args.forEach(function(scope) {
          if (scope = scope.stream) {
            /** @type {(number|undefined)} */
            scope.width = Number(arg) || void 0;
            /** @type {(number|undefined)} */
            scope.height = Number(value) || void 0;
            /** @type {(number|undefined)} */
            scope.frameRate = Number(options) || void 0;
          }
        }.bind(self));
        if (!data.length) {
          /** @type {Array} */
          data = [null];
        }
        if (!args.length) {
          /** @type {Array} */
          args = [null];
        }
        /** @type {Array} */
        var out = [];
        /** @type {number} */
        var i = 0;
        for (;i < data.length;i++) {
          /** @type {number} */
          var ii = 0;
          for (;ii < args.length;ii++) {
            var expectedHashCode = data[i] ? data[i].stream : null;
            var udataCur = args[ii] ? args[ii].stream : null;
            var key = data[i] ? data[i].drmInfos : null;
            var val = args[ii] ? args[ii].drmInfos : null;
            if (expectedHashCode && udataCur) {
              if (!(key.length && val.length ? 0 < getItems(key, val).length : 1)) {
                continue;
              }
              var ret = getItems(key, val);
            } else {
              if (expectedHashCode) {
                ret = key;
              } else {
                if (udataCur) {
                  ret = val;
                }
              }
            }
            /** @type {string} */
            key = (args[i] ? args[i].Mb : "") + " - " + (data[i] ? data[i].Mb : "");
            if (!self.C[key]) {
              expectedHashCode = parseNumber(self, expectedHashCode, udataCur, obj, ret);
              out.push(expectedHashCode);
              self.C[key] = expectedHashCode;
            }
          }
        }
        return out;
      }
      /**
       * @param {Object} s
       * @param {boolean} options
       * @param {?} value
       * @param {number} source
       * @param {?} text
       * @return {?}
       */
      function parseNumber(s, options, value, source, text) {
        return{
          id : s.D++,
          language : options ? options.language : "und",
          primary : !!options && options.primary || !!value && value.primary,
          audio : options,
          video : value,
          bandwidth : source,
          drmInfos : text,
          allowedByApplication : true,
          allowedByKeySystem : true
        };
      }
      /**
       * @param {Object} p
       * @param {Element} target
       * @param {Object} data
       * @return {?}
       */
      function onEnd(p, target, data) {
        return getAttribute(target, "TYPE"), data = (0,eval)(p, data), end(p, target, [], data).then(function(transport) {
          return transport.stream;
        });
      }
      /**
       * @param {Object} options
       * @param {Element} el
       * @param {(Array|string)} data
       * @param {boolean} chunk
       * @return {?}
       */
      function end(options, el, data, chunk) {
        if (options.g[el.id]) {
          return Promise.resolve().then(function() {
            return this.g[el.id];
          }.bind(options));
        }
        var content = getAttribute(el, "TYPE").toLowerCase();
        if ("subtitles" == content) {
          /** @type {string} */
          content = "text";
        }
        var rvar = toString(promote(el, "LANGUAGE", "und"));
        var o = promote(el, "NAME");
        var DEFAULT = el.getAttribute("DEFAULT");
        var AUTOSELECT = el.getAttribute("AUTOSELECT");
        var res = promote(el, "CHANNELS");
        res = "audio" == content ? is(res) : null;
        var i = getAttribute(el, "URI");
        return check(options, i = call([options.m], [i])[0], data, content, chunk, rvar, !!DEFAULT || !!AUTOSELECT, o, res).then(function(offsetPosition) {
          return this.g[el.id] = offsetPosition, this.s[i] = offsetPosition;
        }.bind(options));
      }
      /**
       * @param {string} c
       * @return {?}
       */
      function is(c) {
        return c ? (c = c.split("/")[0], parseInt(c, 10)) : null;
      }
      /**
       * @param {Object} key
       * @param {Element} element
       * @param {string} args
       * @param {string} event
       * @param {boolean} req
       * @return {?}
       */
      function ready(key, element, args, event, req) {
        var i = getAttribute(element, "URI");
        return check(key, i = call([key.m], [i])[0], args, event, req, "und", false, null, null).then(function(offsetPosition) {
          return this.s[i] = offsetPosition;
        }.bind(key));
      }
      /**
       * @param {Object} input
       * @param {(Function|string)} instance
       * @param {string} object
       * @param {string} type
       * @param {boolean} str
       * @param {string} name
       * @param {boolean} silent
       * @param {Node} label
       * @param {?} socket
       * @return {?}
       */
      function check(input, instance, object, type, str, name, silent, label, socket) {
        /** @type {(Function|string)} */
        var returnValue = instance;
        return instance = call([input.m], [instance])[0], apply(input, instance).then(function(self) {
          if (1 != (self = css(this.w, self.data, self.uri)).type) {
            throw new error(2, 4, 4017);
          }
          var data = postLink(this, self, (o = String(self.T, "EXT-X-MEDIA-SEQUENCE")) ? Number(o.value) : 0);
          var view = new List(data);
          show(this, self);
          if (!this.a) {
            transColor(this, data[data.length - 1].endTime);
          }
          str = (0,eval)(this, self) || str;
          /** @type {null} */
          var to = null;
          if ("text" != type && (to = _find(self)), this.a.Ga(0, data), !this.f) {
            /** @type {number} */
            var o = data[data.length - 1].endTime - data[0].startTime;
            var j = this.a.Y();
            if (1 / 0 == j || j < o) {
              this.a.ea(o);
            }
          }
          var obj = equal(type, object);
          var kind = void 0;
          if ("text" == type) {
            /** @type {string} */
            kind = "subtitle";
          }
          /** @type {Array} */
          var names = [];
          self.segments.forEach(function(a) {
            a = normalize(a.T, "EXT-X-KEY");
            names.push.apply(names, a);
          });
          /** @type {boolean} */
          var encrypted = false;
          /** @type {Array} */
          var configList = [];
          /** @type {null} */
          var keyId = null;
          if (names.forEach(function(expectedHashCode) {
            if ("NONE" != getAttribute(expectedHashCode, "METHOD")) {
              /** @type {boolean} */
              encrypted = true;
              var method = getAttribute(expectedHashCode, "KEYFORMAT");
              if (expectedHashCode = (method = methods[method]) ? method(expectedHashCode) : null) {
                if (expectedHashCode.keyIds.length) {
                  keyId = expectedHashCode.keyIds[0];
                }
                configList.push(expectedHashCode);
              }
            }
          }), encrypted && !configList.length) {
            throw new error(2, 4, 4026);
          }
          return $http(this, type, obj, data[0].a()[0]).then(function(o) {
            return o = {
              id : this.D++,
              createSegmentIndex : Promise.resolve.bind(Promise),
              findSegmentPosition : view.find.bind(view),
              getSegmentReference : view.get.bind(view),
              initSegmentReference : to,
              presentationTimeOffset : str || 0,
              mimeType : o,
              codecs : obj,
              kind : kind,
              encrypted : encrypted,
              keyId : keyId,
              language : name,
              label : label || null,
              type : type,
              primary : silent,
              trickModeVideo : null,
              containsEmsgBoxes : false,
              frameRate : void 0,
              width : void 0,
              height : void 0,
              bandwidth : void 0,
              roles : [],
              channelsCount : socket
            }, this.j[o.id] = view, {
              stream : o,
              ce : view,
              drmInfos : configList,
              Mb : returnValue,
              zb : data[data.length - 1]
            };
          }.bind(this));
        }.bind(input));
      }
      /**
       * @param {Object} e
       * @param {Object} item
       * @return {undefined}
       */
      function show(e, item) {
        var v = String(item.T, "EXT-X-PLAYLIST-TYPE");
        if (String(item.T, "EXT-X-ENDLIST") || v && "VOD" == v.value) {
          stop(e, false);
        } else {
          if (!v) {
            throw new error(2, 4, 4029);
          }
          v = parseInt(item.T, "EXT-X-TARGETDURATION");
          /** @type {number} */
          v = Number(v.value);
          if (e.c) {
            if (e.c > v) {
              /** @type {number} */
              e.c = v;
            }
          } else {
            stop(e, true);
            /** @type {number} */
            e.c = v;
          }
          /** @type {number} */
          e.l = Math.max(v, e.l);
        }
      }
      /**
       * @param {Object} exports
       * @param {number} r
       * @return {undefined}
       */
      function transColor(exports, r) {
        /** @type {null} */
        var a = null;
        /** @type {number} */
        var result = 0;
        if (exports.f) {
          /** @type {number} */
          a = Date.now() / 1E3 - r;
          /** @type {number} */
          result = 3 * exports.l;
        }
        exports.a = new item(a, result);
        exports.a.ob(!exports.f);
      }
      /**
       * @param {Array} a
       * @return {?}
       */
      function _find(a) {
        var b = normalize(a.T, "EXT-X-MAP");
        if (!b.length) {
          return null;
        }
        if (1 < b.length) {
          throw new error(2, 4, 4020);
        }
        var encoding = getAttribute(b = b[0], "URI");
        var r = call([a.uri], [encoding])[0];
        return a = 0, encoding = null, (b = promote(b, "BYTERANGE")) && (a = b.split("@"), b = Number(a[0]), a = Number(a[1]), encoding = a + b - 1), new inject(function() {
          return[r];
        }, a, encoding);
      }
      /**
       * @param {?} element
       * @param {Object} attr
       * @param {number} scope
       * @return {?}
       */
      function postLink(element, attr, scope) {
        var parents = attr.segments;
        /** @type {Array} */
        var c = [];
        return parents.forEach(function(a) {
          var map1;
          var m = a.T;
          var s = call([attr.uri], [a.uri])[0];
          var pos = parseInt(m, "EXTINF").value.split(",");
          /** @type {number} */
          pos = Number(pos[0]);
          pos = (map1 = (a = parents.indexOf(a)) ? c[a - 1].endTime : 0) + pos;
          /** @type {number} */
          var type = 0;
          /** @type {null} */
          var z = null;
          if (m = String(m, "EXT-X-BYTERANGE")) {
            m = m.value.split("@");
            /** @type {number} */
            z = Number(m[0]);
            type = m[1] ? Number(m[1]) : c[a - 1].K + 1;
            /** @type {number} */
            z = type + z - 1;
            if (a == parents.length - 1) {
              /** @type {null} */
              z = null;
            }
          }
          c.push(new complete(scope + a, map1, pos, function() {
            return[s];
          }, type, z));
        }.bind(element)), c;
      }
      /**
       * @param {?} root
       * @param {Array} path
       * @return {undefined}
       */
      function install(root, path) {
        path.forEach(function(item) {
          var r20 = this.a.Y();
          var video = item.video;
          item = item.audio;
          if (video) {
            if (this.j[video.id]) {
              observable(this.j[video.id], r20);
            }
          }
          if (item) {
            if (this.j[item.id]) {
              observable(this.j[item.id], r20);
            }
          }
        }.bind(root));
      }
      /**
       * @param {string} type
       * @param {Array} str
       * @return {?}
       */
      function trim(type, str) {
        var c = types[type];
        /** @type {number} */
        var n = 0;
        for (;n < c.length;n++) {
          /** @type {number} */
          var i = 0;
          for (;i < str.length;i++) {
            if (c[n].test(str[i].trim())) {
              return str[i].trim();
            }
          }
        }
        return "text" == type ? "" : null;
      }
      /**
       * @param {string} message
       * @param {string} a
       * @return {?}
       */
      function equal(message, a) {
        if (1 == a.length) {
          return a[0];
        }
        var result = trim(message, a);
        if (null != result) {
          return result;
        }
        throw new error(2, 4, 4025, a);
      }
      /**
       * @param {Object} init
       * @param {string} options
       * @param {string} t
       * @param {string} settings
       * @return {?}
       */
      function $http(init, options, t, settings) {
        var val = settings.split(".");
        var key = val[val.length - 1];
        return(val = obj[options][key]) ? Promise.resolve(val) : "text" == options ? t && "vtt" != t ? Promise.resolve("application/mp4") : Promise.resolve("text/vtt") : (options = shift([settings], init.h.retryParameters), options.method = "HEAD", init.b.networkingEngine.request(1, options).then(function(part) {
          if (!(part = part.headers["content-type"])) {
            throw new error(2, 4, 4021, key);
          }
          return part.split(";")[0];
        }));
      }
      /**
       * @param {Node} s
       * @param {Object} data
       * @return {?}
       */
      function eval(s, data) {
        var v = String(data.T, "EXT-X-START");
        return v ? Number(getAttribute(v, "TIME-OFFSET")) : s.h.hls.defaultTimeOffset;
      }
      /**
       * @param {?} el
       * @param {string} name
       * @return {?}
       */
      function getAttribute(el, name) {
        var weight = el.getAttribute(name);
        if (!weight) {
          throw new error(2, 4, 4023, name);
        }
        return weight.value;
      }
      /**
       * @param {?} value
       * @param {string} walkers
       * @return {?}
       */
      function parseInt(value, walkers) {
        var v = String(value, walkers);
        if (!v) {
          throw new error(2, 4, 4024, walkers);
        }
        return v;
      }
      /**
       * @param {Object} input
       * @param {?} element
       * @return {?}
       */
      function apply(input, element) {
        return input.b.networkingEngine.request(0, shift([element], input.h.retryParameters));
      }
      /**
       * @param {Object} self
       * @param {number} delay
       * @return {undefined}
       */
      function after(self, delay) {
        if (null != self.c) {
          if (null != delay) {
            self.i = global.setTimeout(self.I.bind(self), 1E3 * delay);
          }
        }
      }
      /**
       * @param {Object} e
       * @param {boolean} recurring
       * @return {undefined}
       */
      function stop(e, recurring) {
        /** @type {boolean} */
        e.f = recurring;
        if (e.a) {
          e.a.ob(!recurring);
        }
        if (!recurring) {
          if (!(null == e.i)) {
            global.clearTimeout(e.i);
            /** @type {null} */
            e.i = null;
            /** @type {null} */
            e.c = null;
          }
        }
      }
      /**
       * @param {Object} r
       * @param {(Function|string)} c
       * @param {?} a
       * @param {?} b
       * @param {?} blue
       * @param {?} green
       * @return {undefined}
       */
      function Color(r, c, a, b, blue, green) {
        /** @type {Object} */
        this.a = r;
        /** @type {(Function|string)} */
        this.c = c;
        this.l = a;
        this.B = b;
        this.I = blue;
        this.D = green;
        this.b = new Image;
        /** @type {boolean} */
        this.h = false;
        /** @type {number} */
        this.g = 1;
        /** @type {null} */
        this.j = this.f = null;
        this.C = r.readyState;
        /** @type {boolean} */
        this.i = false;
        /** @type {number} */
        this.w = this.O = -1;
        /** @type {boolean} */
        this.m = this.s = false;
        if (0 < r.readyState) {
          this.kc();
        } else {
          match(this.b, r, "loadedmetadata", this.kc.bind(this));
        }
        c = this.mc.bind(this);
        callback(this.b, r, "ratechange", this.Ad.bind(this));
        callback(this.b, r, "waiting", c);
        /** @type {number} */
        this.j = setInterval(c, 250);
      }
      /**
       * @param {Object} obj
       * @param {?} value
       * @return {undefined}
       */
      function isPlainObject(obj, value) {
        if (0 < obj.a.readyState) {
          obj.a.currentTime = any(obj, value);
        } else {
          obj.B = value;
        }
      }
      /**
       * @param {?} obj
       * @return {?}
       */
      function hasOwnProperty(obj) {
        return 0 < obj.a.readyState ? any(obj, obj.a.currentTime) : detect(obj);
      }
      /**
       * @param {Object} obj
       * @return {?}
       */
      function detect(obj) {
        return obj.B ? any(obj, obj.B) : (obj = obj.c.presentationTimeline, 1 / 0 > obj.Y() ? obj.ia() : obj.kb());
      }
      /**
       * @param {Object} e
       * @param {number} deepDataAndEvents
       * @return {undefined}
       */
      function startDrag(e, deepDataAndEvents) {
        if (null != e.f) {
          global.clearInterval(e.f);
          /** @type {null} */
          e.f = null;
        }
        /** @type {number} */
        e.g = deepDataAndEvents;
        e.a.playbackRate = e.h || 0 > deepDataAndEvents ? 0 : deepDataAndEvents;
        if (!e.h) {
          if (0 > deepDataAndEvents) {
            e.f = global.setInterval(function() {
              this.a.currentTime += deepDataAndEvents / 4;
            }.bind(e), 250);
          }
        }
      }
      /**
       * @param {Object} obj
       * @param {number} x
       * @return {?}
       */
      function max(obj, x) {
        var isObject = step.bind(null, obj.a.buffered);
        /** @type {number} */
        var value = 1 * Math.max(obj.c.minBufferTime || 0, obj.l.rebufferingGoal);
        var ea = obj.c.presentationTimeline;
        var y = ea.va();
        var isFunction = ea.Da(value);
        var result = ea.Da(5);
        value = ea.Da(value + 5);
        return x > y ? y : x < ea.Da(0) ? isObject(result) ? result : value : x >= isFunction || isObject(x) ? x : value;
      }
      /**
       * @param {Node} self
       * @param {?} name
       * @param {?} value
       * @return {undefined}
       */
      function isReady(self, name, value) {
        self.a.currentTime = value;
        /** @type {number} */
        var r = 0;
        var fun = function() {
          if (!!this.a) {
            if (!(10 <= r++)) {
              if (!(this.a.currentTime != name)) {
                this.a.currentTime = value;
                setTimeout(fun, 100);
              }
            }
          }
        }.bind(self);
        setTimeout(fun, 100);
      }
      /**
       * @param {Object} obj
       * @param {(boolean|number)} a
       * @return {?}
       */
      function any(obj, a) {
        var b = obj.c.presentationTimeline.ia();
        return a < b ? b : (b = obj.c.presentationTimeline.va(), a > b ? b : a);
      }
      /**
       * @param {?} a
       * @param {?} b
       * @param {Object} g
       * @param {?} n
       * @param {?} l
       * @param {?} h
       * @param {Function} err
       * @return {undefined}
       */
      function B(a, b, g, n, l, h, err) {
        this.a = a;
        this.B = b;
        /** @type {Object} */
        this.g = g;
        this.w = n;
        this.l = l;
        this.h = h;
        /** @type {Function} */
        this.C = err;
        /** @type {Array} */
        this.c = [];
        this.j = new Image;
        /** @type {boolean} */
        this.b = false;
        /** @type {number} */
        this.i = -1;
        /** @type {null} */
        this.f = null;
        handleEvent(this);
      }
      /**
       * @param {?} callback
       * @return {?}
       */
      function unsubscribe(callback) {
        var cb = $(callback);
        return cb.eventElement = callback.eventElement, cb;
      }
      /**
       * @param {Object} e
       * @return {undefined}
       */
      function handleEvent(e) {
        onTouchMove(e);
        e.f = global.setTimeout(e.D.bind(e), 250);
      }
      /**
       * @param {Object} e
       * @return {undefined}
       */
      function onTouchMove(e) {
        if (e.f) {
          global.clearTimeout(e.f);
          /** @type {null} */
          e.f = null;
        }
      }
      /**
       * @param {?} b
       * @param {?} a
       * @return {undefined}
       */
      function valueRef(b, a) {
        this.a = a;
        this.b = b;
        /** @type {null} */
        this.h = null;
        /** @type {number} */
        this.i = 1;
        this.m = Promise.resolve();
        /** @type {Array} */
        this.g = [];
        this.j = {};
        this.c = {};
        /** @type {boolean} */
        this.s = false;
        /** @type {null} */
        this.w = null;
        /** @type {boolean} */
        this.f = this.l = false;
      }
      /**
       * @param {?} value
       * @return {?}
       */
      function Number(value) {
        return value.b.periods[isArray(value.b, hasOwnProperty(value.a.Sa))];
      }
      /**
       * @param {Object} self
       * @return {?}
       */
      function assetLoaded(self) {
        var periods = self.c.video || self.c.audio;
        return periods ? self.b.periods[periods.xa] : null;
      }
      /**
       * @param {?} o
       * @return {?}
       */
      function exists(o) {
        return isEmpty(o.c, function(results) {
          return results.oa || results.stream;
        });
      }
      /**
       * @param {Object} self
       * @param {boolean} recurring
       * @return {undefined}
       */
      function addStream(self, recurring) {
        var config = self.c.video;
        if (config) {
          var stream = config.stream;
          if (stream) {
            if (recurring) {
              var elements = stream.trickModeVideo;
              if (elements) {
                var action = config.oa;
                if (!action) {
                  each(self, elements, false);
                  config.oa = stream;
                }
              }
            } else {
              if (action = config.oa) {
                /** @type {null} */
                config.oa = null;
                each(self, action, true);
              }
            }
          }
        }
      }
      /**
       * @param {?} initial
       * @param {Object} obj
       * @param {?} recurring
       * @return {undefined}
       */
      function reduce(initial, obj, recurring) {
        if (obj.video) {
          each(initial, obj.video, recurring);
        }
        if (obj.audio) {
          each(initial, obj.audio, recurring);
        }
      }
      /**
       * @param {Object} obj
       * @param {Object} a
       * @param {boolean} recurring
       * @return {undefined}
       */
      function each(obj, a, recurring) {
        var e = obj.c[a.type];
        if (!e && ("text" == a.type && obj.h.ignoreTextStreamFailures)) {
          setOptions(obj, {
            text : a
          });
        } else {
          if (e) {
            var c = bind(obj.b, a);
            if (recurring && c != e.xa) {
              forOwn(obj);
            } else {
              if (e.oa) {
                if (a.trickModeVideo) {
                  /** @type {Object} */
                  e.oa = a;
                  a = a.trickModeVideo;
                } else {
                  /** @type {null} */
                  e.oa = null;
                }
              }
              if (c = obj.g[c]) {
                if (c.Ka) {
                  if (c = obj.j[a.id]) {
                    if (c.Ka) {
                      if (e.stream != a) {
                        if ("text" == a.type) {
                          include(obj.a.M, isFunction(a.mimeType, a.codecs));
                        }
                        /** @type {Object} */
                        e.stream = a;
                        /** @type {boolean} */
                        e.mb = true;
                        if (recurring) {
                          if (e.ta) {
                            /** @type {boolean} */
                            e.sb = true;
                          } else {
                            if (e.ya) {
                              /** @type {boolean} */
                              e.ra = true;
                              /** @type {boolean} */
                              e.sb = true;
                            } else {
                              isString(e);
                              ok(obj, e, true);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      /**
       * @param {Object} obj
       * @return {undefined}
       */
      function size(obj) {
        var i = hasOwnProperty(obj.a.Sa);
        if (!Object.keys(obj.c).every(function(value) {
          var target = this.a.M;
          return "text" == value ? (value = target.a, value = i >= value.b && i < value.a) : (value = expect(target, value), value = step(value, i)), value;
        }.bind(obj))) {
          forOwn(obj);
        }
      }
      /**
       * @param {Object} object
       * @return {undefined}
       */
      function forOwn(object) {
        var k;
        for (k in object.c) {
          var result = object.c[k];
          if (!result.ta) {
            if (!result.ra) {
              if (result.ya) {
                /** @type {boolean} */
                result.ra = true;
              } else {
                if (null == finish(object.a.M, k)) {
                  if (null == result.qa) {
                    valueOf(object, result, 0);
                  }
                } else {
                  isString(result);
                  ok(object, result, false);
                }
              }
            }
          }
        }
      }
      /**
       * @param {Object} options
       * @param {?} args
       * @param {number} opt
       * @return {?}
       */
      function setOptions(options, args, opt) {
        var wasArray = isArray(options.b, hasOwnProperty(options.a.Sa));
        var self = {};
        /** @type {Array} */
        var scope = [];
        return args.variant && (args.variant.audio && (self.audio = args.variant.audio, scope.push(args.variant.audio))), args.variant && (args.variant.video && (self.video = args.variant.video, scope.push(args.variant.video))), args.text && (self.text = args.text, scope.push(args.text)), options.a.M.init(self), toggle(options), result(options, scope).then(function() {
          if (!this.f) {
            var i;
            for (i in self) {
              var part = self[i];
              if (!this.c[i]) {
                this.c[i] = {
                  stream : part,
                  type : i,
                  Ea : null,
                  ja : null,
                  oa : null,
                  mb : true,
                  xa : wasArray,
                  endOfStream : false,
                  ya : false,
                  qa : null,
                  ra : false,
                  sb : false,
                  ta : false,
                  Lb : false,
                  Pa : false,
                  wc : opt || 0
                };
                valueOf(this, this.c[i], 0);
              }
            }
          }
        }.bind(options));
      }
      /**
       * @param {Object} d
       * @param {?} name
       * @return {?}
       */
      function all(d, name) {
        var ref = d.g[name];
        if (ref) {
          return ref.N;
        }
        ref = {
          N : new Point,
          Ka : false
        };
        d.g[name] = ref;
        var newArgs = d.b.periods[name].variants.map(function(item) {
          /** @type {Array} */
          var url = [];
          return item.audio && url.push(item.audio), item.video && url.push(item.video), item.video && (item.video.trickModeVideo && url.push(item.video.trickModeVideo)), url;
        }).reduce(options, []).filter(src);
        return newArgs.push.apply(newArgs, d.b.periods[name].textStreams), d.m = d.m.then(function() {
          if (!this.f) {
            return result(this, newArgs);
          }
        }.bind(d)).then(function() {
          if (!this.f) {
            this.g[name].N.resolve();
            /** @type {boolean} */
            this.g[name].Ka = true;
          }
        }.bind(d)).catch(function(env) {
          if (!this.f) {
            this.g[name].N.reject();
            delete this.g[name];
            this.a.onError(env);
          }
        }.bind(d)), ref.N;
      }
      /**
       * @param {Object} state
       * @param {Array} args
       * @return {?}
       */
      function result(state, args) {
        args.map(function(ignores) {
          return ignores.id;
        }).filter(src);
        /** @type {Array} */
        var nodeArgs = [];
        /** @type {number} */
        var i = 0;
        for (;i < args.length;++i) {
          var actual = args[i];
          var h = state.j[actual.id];
          if (h) {
            nodeArgs.push(h.N);
          } else {
            state.j[actual.id] = {
              N : new Point,
              Ka : false
            };
            nodeArgs.push(actual.createSegmentIndex());
          }
        }
        return Promise.all(nodeArgs).then(function() {
          if (!this.f) {
            /** @type {number} */
            var i = 0;
            for (;i < args.length;++i) {
              var obj = this.j[args[i].id];
              if (!obj.Ka) {
                obj.N.resolve();
                /** @type {boolean} */
                obj.Ka = true;
              }
            }
          }
        }.bind(state)).catch(function(error) {
          if (!this.f) {
            return this.j[actual.id].N.reject(), delete this.j[actual.id], Promise.reject(error);
          }
        }.bind(state));
      }
      /**
       * @param {Object} options
       * @return {undefined}
       */
      function toggle(options) {
        var cos = options.b.presentationTimeline.Y();
        if (1 / 0 > cos) {
          options.a.M.ea(cos);
        } else {
          options.a.M.ea(Math.pow(2, 32));
        }
      }
      /**
       * @param {Object} self
       * @param {Object} e
       * @return {?}
       */
      function action(self, e) {
        var h = hasOwnProperty(self.a.Sa);
        var c = e.Ea && e.ja ? self.b.periods[bind(self.b, e.Ea)].startTime + e.ja.endTime : Math.max(h, e.wc);
        var v = bind(self.b, e.stream);
        var a = isArray(self.b, c);
        var p = self.a.M;
        var type = e.type;
        return "text" == type ? (p = p.a, p = null == p.a || p.a < h ? 0 : p.a - Math.max(h, p.b)) : (p = expect(p, type), p = parent(p, h)), type = Math.max(self.i * Math.max(self.b.minBufferTime || 0, self.h.rebufferingGoal), self.i * self.h.bufferingGoal), c >= self.b.presentationTimeline.Y() ? (e.endOfStream = true, null) : (e.endOfStream = false, e.xa = a, a != v ? null : p >= type ? 0.5 : (c = self.a.M, a = e.type, c = "text" == a ? c.a.a : timerangeToArray(expect(c, a)), e.ja && e.stream ==
        e.Ea ? (a = e.ja.position + 1, c = fire(self, e, v, a)) : null == (a = e.ja ? e.stream.findSegmentPosition(Math.max(0, self.b.periods[bind(self.b, e.Ea)].startTime + e.ja.endTime - self.b.periods[v].startTime)) : e.stream.findSegmentPosition(Math.max(0, (c || h) - self.b.periods[v].startTime))) ? c = null : (p = null, null == c && (p = fire(self, e, v, Math.max(0, a - 1))), c = p || fire(self, e, v, a)), c ? (e.wc = 0, next(self, e, h, v, c), null) : 1));
      }
      /**
       * @param {Object} o
       * @param {Object} data
       * @param {Object} e
       * @param {number} string
       * @return {?}
       */
      function fire(o, data, e, string) {
        return e = o.b.periods[e], (data = data.stream.getSegmentReference(string)) ? (o = o.b.presentationTimeline, string = o.va(), e.startTime + data.endTime < o.ia() || e.startTime + data.startTime > string ? null : data) : null;
      }
      /**
       * @param {Object} d
       * @param {Object} e
       * @param {number} h
       * @param {number} result
       * @param {Object} name
       * @return {undefined}
       */
      function next(d, e, h, result, name) {
        var origContext = d.b.periods[result];
        var s = e.stream;
        var state = d.b.periods[result + 1];
        /** @type {null} */
        var suiteView = null;
        suiteView = state ? state.startTime : d.b.presentationTimeline.Y();
        result = reject(d, e, result, suiteView);
        /** @type {boolean} */
        e.ya = true;
        /** @type {boolean} */
        e.mb = false;
        state = post(d, name);
        Promise.all([result, state]).then(function(dataAndEvents) {
          if (!this.f && !this.l) {
            return delay(this, e, h, origContext, s, name, dataAndEvents[1]);
          }
        }.bind(d)).then(function() {
          if (!this.f) {
            if (!this.l) {
              /** @type {boolean} */
              e.ya = false;
              /** @type {boolean} */
              e.Lb = false;
              if (!e.ra) {
                this.a.Fb();
              }
              valueOf(this, e, 0);
              refresh(this, s);
            }
          }
        }.bind(d)).catch(function(error) {
          if (!this.f) {
            if (!this.l) {
              /** @type {boolean} */
              e.ya = false;
              if ("text" == e.type && this.h.ignoreTextStreamFailures) {
                delete this.c.text;
              } else {
                if (3017 == error.code) {
                  onError(this, e, error);
                } else {
                  /** @type {boolean} */
                  e.Pa = true;
                  /** @type {number} */
                  error.severity = 2;
                  runTest(this, error);
                }
              }
            }
          }
        }.bind(d));
      }
      /**
       * @param {Object} self
       * @param {Object} e
       * @param {Error} error
       * @return {?}
       */
      function onError(self, e, error) {
        if (!keys(self.c).some(function(l) {
          return l != e && l.Lb;
        })) {
          /** @type {number} */
          var r = Math.round(100 * self.i);
          if (20 < r) {
            self.i -= 0.2;
          } else {
            if (!(4 < r)) {
              return e.Pa = true, self.l = true, void self.a.onError(error);
            }
            self.i -= 0.04;
          }
          /** @type {boolean} */
          e.Lb = true;
        }
        valueOf(self, e, 4);
      }
      /**
       * @param {Object} d
       * @param {Object} e
       * @param {number} a
       * @param {number} obj
       * @return {?}
       */
      function reject(d, e, a, obj) {
        return e.mb ? (a = startServer(d.a.M, e.type, d.b.periods[a].startTime - e.stream.presentationTimeOffset, obj), e.stream.initSegmentReference ? (d = post(d, e.stream.initSegmentReference).then(function(message) {
          if (!this.f) {
            return deepEqual(this.a.M, e.type, message, null, null);
          }
        }.bind(d)).catch(function(error) {
          return e.mb = true, Promise.reject(error);
        }), Promise.all([a, d])) : a) : Promise.resolve();
      }
      /**
       * @param {Object} promise
       * @param {Object} func
       * @param {number} f
       * @param {Object} context
       * @param {string} type
       * @param {Object} event
       * @param {string} msg
       * @return {?}
       */
      function delay(promise, func, f, context, type, event, msg) {
        return type.containsEmsgBoxes && (new store).aa("emsg", promise.Nd.bind(promise, context, event)).parse(msg), when(promise, func, f).then(function() {
          if (!this.f) {
            return deepEqual(this.a.M, func.type, msg, event.startTime + context.startTime, event.endTime + context.startTime);
          }
        }.bind(promise)).then(function() {
          if (!this.f) {
            return func.Ea = type, func.ja = event, Promise.resolve();
          }
        }.bind(promise));
      }
      /**
       * @param {Object} value
       * @param {Object} func
       * @param {number} var_args
       * @return {?}
       */
      function when(value, func, var_args) {
        var camelKey = finish(value.a.M, func.type);
        return null == camelKey ? Promise.resolve() : 0 >= (var_args = var_args - camelKey - value.h.bufferBehind) ? Promise.resolve() : value.a.M.remove(func.type, camelKey, camelKey + var_args).then(function() {
        }.bind(value));
      }
      /**
       * @param {Object} self
       * @param {Object} obj
       * @return {undefined}
       */
      function refresh(self, obj) {
        if (!self.s && (self.s = keys(self.c).every(function(a) {
          return "text" == a.type || !a.ra && (!a.ta && a.ja);
        }), self.s)) {
          var i = bind(self.b, obj);
          if (!self.g[i]) {
            all(self, i).then(function() {
              this.a.fc();
            }.bind(self)).catch(paths);
          }
          /** @type {number} */
          i = 0;
          for (;i < self.b.periods.length;++i) {
            all(self, i).catch(paths);
          }
          if (self.a.Fd) {
            self.a.Fd();
          }
        }
      }
      /**
       * @param {Object} self
       * @param {Object} o
       * @return {undefined}
       */
      function addEventHandler(self, o) {
        if (o.xa != bind(self.b, o.stream)) {
          var label = o.xa;
          var properties = keys(self.c);
          if (properties.every(function(item) {
            return item.xa == label;
          })) {
            if (properties.every(type)) {
              all(self, label).then(function() {
                if (!this.f && properties.every(function(options) {
                  var v = bind(this.b, options.stream);
                  return type(options) && (options.xa == label && v != label);
                }.bind(this))) {
                  var value = this.b.periods[label];
                  var args = this.a.gc(value);
                  var self = {};
                  if (args.variant) {
                    if (args.variant.video) {
                      self.video = args.variant.video;
                    }
                  }
                  if (args.variant) {
                    if (args.variant.audio) {
                      self.audio = args.variant.audio;
                    }
                  }
                  if (args.text) {
                    self.text = args.text;
                  }
                  var k;
                  for (k in this.c) {
                    if (!self[k] && "text" != k) {
                      return void this.a.onError(new error(2, 5, 5005));
                    }
                  }
                  for (k in self) {
                    if (!this.c[k]) {
                      if ("text" != k) {
                        return void this.a.onError(new error(2, 5, 5005));
                      }
                      setOptions(this, {
                        text : self.text
                      }, value.startTime);
                      delete self[k];
                    }
                  }
                  for (k in this.c) {
                    if (value = self[k]) {
                      each(this, value, false);
                      valueOf(this, this.c[k], 0);
                    } else {
                      delete this.c[k];
                    }
                  }
                  this.a.fc();
                }
              }.bind(self)).catch(paths);
            }
          }
        }
      }
      /**
       * @param {Object} o
       * @return {?}
       */
      function type(o) {
        return!o.ya && (null == o.qa && (!o.ra && !o.ta));
      }
      /**
       * @param {Object} data
       * @param {Object} node
       * @return {?}
       */
      function post(data, node) {
        var args = shift(node.a(), data.h.retryParameters);
        if (node.V || null != node.K) {
          /** @type {string} */
          var name = "bytes=" + node.V + "-";
          if (null != node.K) {
            name += node.K;
          }
          /** @type {string} */
          args.headers.Range = name;
        }
        return data.a.nd.request(1, args).then(function(messageEvent) {
          return messageEvent.data;
        });
      }
      /**
       * @param {Object} value
       * @param {Object} msg
       * @param {boolean} recurring
       * @return {undefined}
       */
      function ok(value, msg, recurring) {
        /** @type {boolean} */
        msg.ra = false;
        /** @type {boolean} */
        msg.sb = false;
        /** @type {boolean} */
        msg.ta = true;
        cleanup(value.a.M, msg.type).then(function() {
          if (!this.f && recurring) {
            var actual = this.a.M;
            var expected = msg.type;
            return "text" == expected ? Promise.resolve() : fail(actual, expected, actual.Tc.bind(actual, expected));
          }
        }.bind(value)).then(function() {
          if (!this.f) {
            /** @type {null} */
            msg.Ea = null;
            /** @type {null} */
            msg.ja = null;
            /** @type {boolean} */
            msg.ta = false;
            /** @type {boolean} */
            msg.endOfStream = false;
            valueOf(this, msg, 0);
          }
        }.bind(value));
      }
      /**
       * @param {Object} self
       * @param {Object} el
       * @param {number} lab
       * @return {undefined}
       */
      function valueOf(self, el, lab) {
        el.qa = global.setTimeout(self.xe.bind(self, el), 1E3 * lab);
      }
      /**
       * @param {?} o
       * @return {undefined}
       */
      function isString(o) {
        if (null != o.qa) {
          global.clearTimeout(o.qa);
          /** @type {null} */
          o.qa = null;
        }
      }
      /**
       * @param {Object} key
       * @param {Object} e
       * @return {undefined}
       */
      function runTest(key, e) {
        pipe(key.w).then(function() {
          this.a.onError(e);
          if (!e.handled) {
            this.h.failureCallback(e);
          }
        }.bind(key));
      }
      /**
       * @param {string} pdataOld
       * @param {Object} opts
       * @return {?}
       */
      function apiMethod(pdataOld, opts) {
        return new Promise(function(request, completeCallback) {
          /** @type {XMLHttpRequest} */
          var xhr = new XMLHttpRequest;
          xhr.open(opts.method, pdataOld, true);
          /** @type {string} */
          xhr.responseType = "arraybuffer";
          xhr.timeout = opts.retryParameters.timeout;
          xhr.withCredentials = opts.allowCrossSiteCredentials;
          /**
           * @param {Object} e
           * @return {undefined}
           */
          xhr.onload = function(e) {
            var headers = (e = e.target).getAllResponseHeaders().split("\r\n").reduce(function(dataAndEvents, pair) {
              var tokens = pair.split(": ");
              return dataAndEvents[tokens[0].toLowerCase()] = tokens.slice(1).join(": "), dataAndEvents;
            }, {});
            if (200 <= e.status && (299 >= e.status && 202 != e.status)) {
              if (e.responseURL) {
                pdataOld = e.responseURL;
              }
              request({
                uri : pdataOld,
                data : e.response,
                headers : headers,
                fromCache : !!headers["x-shaka-from-cache"]
              });
            } else {
              /** @type {null} */
              var stream = null;
              try {
                stream = append(e.response);
              } catch (t) {
              }
              completeCallback(new error(401 == e.status || 403 == e.status ? 2 : 1, 1, 1001, pdataOld, e.status, stream, headers));
            }
          };
          /**
           * @return {undefined}
           */
          xhr.onerror = function() {
            completeCallback(new error(1, 1, 1002, pdataOld));
          };
          /**
           * @return {undefined}
           */
          xhr.ontimeout = function() {
            completeCallback(new error(1, 1, 1003, pdataOld));
          };
          var key;
          for (key in opts.headers) {
            xhr.setRequestHeader(key, opts.headers[key]);
          }
          xhr.send(opts.body);
        });
      }
      /**
       * @return {undefined}
       */
      function KlassA() {
        /** @type {null} */
        this.a = null;
        /** @type {Array} */
        this.b = [];
        this.c = {};
      }
      /**
       * @param {?} self
       * @param {string} name
       * @param {boolean} text
       * @return {?}
       */
      function del(self, name, text) {
        return remove(self, name, "readwrite", function(req) {
          req.put(text);
        });
      }
      /**
       * @param {Node} el
       * @param {Array} keys
       * @param {Function} callback
       * @return {?}
       */
      function unbind(el, keys, callback) {
        return remove(el, "segment", "readwrite", function(multi) {
          /** @type {number} */
          var i = 0;
          for (;i < keys.length;i++) {
            multi.delete(keys[i]).onsuccess = callback || function() {
            };
          }
        });
      }
      /**
       * @param {Node} item
       * @param {?} value
       * @return {?}
       */
      function save(item, value) {
        /** @type {number} */
        var o = 0;
        return remove(item, value, "readonly", function(index) {
          /**
           * @param {Object} data
           * @return {undefined}
           */
          index.openCursor(null, "prev").onsuccess = function(data) {
            if (data = data.target.result) {
              o = data.key + 1;
            }
          };
        }).then(function() {
          return o;
        });
      }
      /**
       * @param {Node} self
       * @param {?} value
       * @param {string} type
       * @param {Function} callback
       * @return {?}
       */
      function remove(self, value, type, callback) {
        var expectedHashCode = {
          transaction : self.a.transaction([value], type),
          N : new Point
        };
        return expectedHashCode.transaction.oncomplete = function() {
          this.b.splice(this.b.indexOf(expectedHashCode), 1);
          expectedHashCode.N.resolve();
        }.bind(self), expectedHashCode.transaction.onabort = function(deepDataAndEvents) {
          this.b.splice(this.b.indexOf(expectedHashCode), 1);
          errorCB(expectedHashCode.transaction, expectedHashCode.N, deepDataAndEvents);
        }.bind(self), expectedHashCode.transaction.onerror = function(types) {
          types.preventDefault();
        }.bind(self), value = expectedHashCode.transaction.objectStore(value), callback(value), self.b.push(expectedHashCode), expectedHashCode.N;
      }
      /**
       * @param {?} name
       * @param {Object} options
       * @param {boolean} t
       * @return {?}
       */
      function _init(name, options, t) {
        var self = global.indexedDB.open("shaka_offline_db", 1);
        /** @type {boolean} */
        var foundToken = false;
        var p = new Point;
        return self.onupgradeneeded = function(db) {
          /** @type {boolean} */
          foundToken = true;
          db = db.target.result;
          var name;
          for (name in options) {
            db.createObjectStore(name, {
              keyPath : options[name]
            });
          }
        }, self.onsuccess = function(ev) {
          if (t && !foundToken) {
            ev.target.result.close();
            setTimeout(function() {
              _init(this, options, t - 1).then(p.resolve, p.reject);
            }.bind(this), 1E3);
          } else {
            this.a = ev.target.result;
            p.resolve();
          }
        }.bind(name), self.onerror = errorCB.bind(null, self, p), p;
      }
      /**
       * @param {Object} evt
       * @param {?} msg
       * @param {Event} deepDataAndEvents
       * @return {undefined}
       */
      function errorCB(evt, msg, deepDataAndEvents) {
        if (evt.error) {
          msg.reject(new error(2, 9, 9001, evt.error));
        } else {
          msg.reject(new error(2, 9, 9002));
        }
        deepDataAndEvents.preventDefault();
      }
      /**
       * @param {Object} data
       * @return {?}
       */
      function listener(data) {
        var newArgs = message(l = onComplete(data.periods[0], [], new item(null, 0)), null, null);
        var l = print(l, null);
        return newArgs.push.apply(newArgs, l), {
          offlineUri : "offline:" + data.key,
          originalManifestUri : data.originalManifestUri,
          duration : data.duration,
          size : data.size,
          expiration : void 0 == data.expiration ? 1 / 0 : data.expiration,
          tracks : newArgs,
          appMetadata : data.appMetadata
        };
      }
      /**
       * @param {Object} event
       * @param {Object} callback
       * @param {?} pc
       * @return {?}
       */
      function onComplete(event, callback, pc) {
        var arr = event.streams.filter(function(a) {
          return "text" == a.contentType;
        });
        return callback = lookup(event.streams.filter(function(gridStore) {
          return "audio" == gridStore.contentType;
        }), event.streams.filter(function(gridStore) {
          return "video" == gridStore.contentType;
        }), callback), arr = arr.map(iterator), event.streams.forEach(function(queue) {
          queue = invoke(queue);
          pc.Ga(0, queue);
        }), {
          startTime : event.startTime,
          variants : callback,
          textStreams : arr
        };
      }
      /**
       * @param {Node} obj
       * @return {?}
       */
      function invoke(obj) {
        return obj.segments.map(function(record, dataAndEvents) {
          return new complete(dataAndEvents, record.startTime, record.endTime, function() {
            return[record.uri];
          }, 0, null);
        });
      }
      /**
       * @param {Array} arr
       * @param {Array} resultItems
       * @param {Object} event
       * @return {?}
       */
      function lookup(arr, resultItems, event) {
        /** @type {Array} */
        var matches = [];
        if (!arr.length && !resultItems.length) {
          return matches;
        }
        if (arr.length) {
          if (!resultItems.length) {
            /** @type {Array} */
            resultItems = [null];
          }
        } else {
          /** @type {Array} */
          arr = [null];
        }
        /** @type {number} */
        var equiv_class_id = 0;
        /** @type {number} */
        var j = 0;
        for (;j < arr.length;j++) {
          /** @type {number} */
          var i = 0;
          for (;i < resultItems.length;i++) {
            if (compare(arr[j], resultItems[i])) {
              var expectedHashCode = arr[j];
              var result = resultItems[i];
              /** @type {Object} */
              var originalEvent = event;
              expectedHashCode = {
                id : equiv_class_id++,
                language : expectedHashCode ? expectedHashCode.language : "",
                primary : !!expectedHashCode && expectedHashCode.primary || !!result && result.primary,
                audio : iterator(expectedHashCode),
                video : iterator(result),
                bandwidth : 0,
                drmInfos : originalEvent,
                allowedByApplication : true,
                allowedByKeySystem : true
              };
              matches.push(expectedHashCode);
            }
          }
        }
        return matches;
      }
      /**
       * @param {Object} left
       * @param {Object} right
       * @return {?}
       */
      function compare(left, right) {
        if (!(left && (right && (left.variantIds && right.variantIds)))) {
          return true;
        }
        /** @type {number} */
        var i = 0;
        for (;i < left.variantIds.length;i++) {
          if (right.variantIds.some(function(el) {
            return el == left.variantIds[i];
          })) {
            return true;
          }
        }
        return false;
      }
      /**
       * @param {Object} options
       * @return {?}
       */
      function iterator(options) {
        if (!options) {
          return null;
        }
        var view = new List(view = invoke(options));
        return{
          id : options.id,
          createSegmentIndex : Promise.resolve.bind(Promise),
          findSegmentPosition : view.find.bind(view),
          getSegmentReference : view.get.bind(view),
          initSegmentReference : options.initSegmentUri ? new inject(function() {
            return[options.initSegmentUri];
          }, 0, null) : null,
          presentationTimeOffset : options.presentationTimeOffset,
          mimeType : options.mimeType,
          codecs : options.codecs,
          width : options.width || void 0,
          height : options.height || void 0,
          frameRate : options.frameRate || void 0,
          kind : options.kind,
          encrypted : options.encrypted,
          keyId : options.keyId,
          language : options.language,
          label : options.label || null,
          type : options.contentType,
          primary : options.primary,
          trickModeVideo : null,
          containsEmsgBoxes : false,
          roles : [],
          channelsCount : null
        };
      }
      /**
       * @return {?}
       */
      function toObject() {
        return global.indexedDB ? new KlassA : null;
      }
      /**
       * @param {?} m44
       * @param {?} inS
       * @param {?} width
       * @param {?} m43
       * @return {undefined}
       */
      function Matrix(m44, inS, width, m43) {
        this.b = {};
        /** @type {Array} */
        this.l = [];
        this.m = m43;
        this.j = m44;
        this.s = inS;
        this.w = width;
        /** @type {null} */
        this.i = this.a = null;
        /** @type {number} */
        this.f = this.g = this.h = this.c = 0;
      }
      /**
       * @param {?} a
       * @param {?} b
       * @param {?} value
       * @param {number} vec0
       * @param {Node} opt_attributes
       * @return {undefined}
       */
      function equals(a, b, value, vec0, opt_attributes) {
        a.b[b] = a.b[b] || [];
        a.b[b].push({
          uris : value.a(),
          V : value.V,
          K : value.K,
          Xb : vec0,
          Nb : opt_attributes
        });
      }
      /**
       * @param {Object} options
       * @param {?} value
       * @return {?}
       */
      function one(options, value) {
        /** @type {number} */
        options.c = 0;
        /** @type {number} */
        options.h = 0;
        /** @type {number} */
        options.g = 0;
        /** @type {number} */
        options.f = 0;
        keys(options.b).forEach(function(failures) {
          failures.forEach(function(right) {
            if (null != right.K) {
              this.c += right.K - right.V + 1;
            } else {
              this.g += right.Xb;
            }
          }.bind(this));
        }.bind(options));
        options.a = value;
        /** @type {number} */
        options.a.size = options.c;
        var promises = keys(options.b).map(function(result) {
          /** @type {number} */
          var j = 0;
          var resolve = function() {
            return this.m ? j >= result.length ? Promise.resolve() : request(this, result[j++]).then(resolve) : Promise.reject(new error(2, 9, 9002));
          }.bind(this);
          return resolve();
        }.bind(options));
        return options.b = {}, options.i = Promise.all(promises).then(function() {
          return del(this.j, "manifest", value);
        }.bind(options)).then(function() {
          /** @type {Array} */
          this.l = [];
        }.bind(options)), options.i;
      }
      /**
       * @param {Object} self
       * @param {?} options
       * @return {?}
       */
      function request(self, options) {
        var args = shift(options.uris, self.w);
        if (options.V || null != options.K) {
          /** @type {string} */
          args.headers.Range = "bytes=" + options.V + "-" + (null == options.K ? "" : options.K);
        }
        var h;
        return self.s.request(1, args).then(function(r) {
          return this.a ? (h = r.data.byteLength, this.l.push(options.Nb.key), options.Nb.data = r.data, del(this.j, "segment", options.Nb)) : Promise.reject(new error(2, 9, 9002));
        }.bind(self)).then(function() {
          if (!this.a) {
            return Promise.reject(new error(2, 9, 9002));
          }
          if (null == options.K) {
            this.a.size += h;
            this.f += options.Xb;
          } else {
            this.h += h;
          }
          /** @type {number} */
          var udataCur = (this.h + this.f) / (this.c + this.g);
          var suiteView = listener(this.a);
          this.m.progressCallback(suiteView, udataCur);
        }.bind(self));
      }
      /**
       * @return {undefined}
       */
      function original() {
        /** @type {number} */
        this.a = -1;
      }
      /**
       * @param {Object} object
       * @return {?}
       */
      function traverse(object) {
        var self = new item(null, 0);
        self.ea(object.duration);
        /** @type {Array} */
        var restoreScript = object.drmInfo ? [object.drmInfo] : [];
        return{
          presentationTimeline : self,
          minBufferTime : 10,
          offlineSessionIds : object.sessionIds,
          periods : object.periods.map(function(qualifier) {
            return onComplete(qualifier, restoreScript, self);
          })
        };
      }
      /**
       * @param {number} filename
       * @return {?}
       */
      function success(filename) {
        if (/^offline:([0-9]+)$/.exec(filename)) {
          var ret = {
            uri : filename,
            data : new ArrayBuffer(0),
            headers : {
              "content-type" : "application/x-offline-manifest"
            }
          };
          return Promise.resolve(ret);
        }
        if (ret = /^offline:[0-9]+\/[0-9]+\/([0-9]+)$/.exec(filename)) {
          /** @type {number} */
          var camelKey = Number(ret[1]);
          var self = toObject();
          return self ? self.init(arg).then(function() {
            return self.get("segment", camelKey);
          }).then(function(e) {
            return self.o().then(function() {
              if (!e) {
                throw new error(2, 9, 9003, camelKey);
              }
              return{
                uri : filename,
                data : e.data,
                headers : {}
              };
            });
          }) : Promise.reject(new error(2, 9, 9E3));
        }
        return Promise.reject(new error(2, 1, 9004, filename));
      }
      /**
       * @param {?} video
       * @return {undefined}
       */
      function Item(video) {
        /** @type {null} */
        this.a = null;
        /** @type {number} */
        var i = 0;
        for (;i < video.textTracks.length;++i) {
          var node = video.textTracks[i];
          /** @type {string} */
          node.mode = "disabled";
          if ("Shaka Player TextTrack" == node.label) {
            this.a = node;
          }
        }
        if (!this.a) {
          this.a = video.addTextTrack("subtitles", "Shaka Player TextTrack");
        }
        /** @type {string} */
        this.a.mode = "hidden";
      }
      /**
       * @param {Object} data
       * @return {?}
       */
      function render(data) {
        if (data.startTime >= data.endTime) {
          return null;
        }
        var s = new VTTCue(data.startTime, data.endTime, data.l);
        s.lineAlign = data.h;
        s.positionAlign = data.i;
        s.size = data.size;
        try {
          s.align = data.f;
        } catch (t) {
        }
        return "center" == data.f && ("center" != s.align && (s.position = "auto", s.align = "middle")), data.b == m ? s.vertical = "lr" : data.b == y && (s.vertical = "rl"), data.g == g && (s.snapToLines = false), null != data.c && (s.line = data.c), null != data.position && (s.position = data.position), s;
      }
      /**
       * @param {Node} obj
       * @param {Function} predicate
       * @return {undefined}
       */
      function last(obj, predicate) {
        var codeSegments = obj.a.cues;
        /** @type {Array} */
        var haystack = [];
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;++i) {
          if (predicate(codeSegments[i])) {
            haystack.push(codeSegments[i]);
          }
        }
        /** @type {number} */
        i = 0;
        for (;i < haystack.length;++i) {
          obj.a.removeCue(haystack[i]);
        }
      }
      /**
       * @return {undefined}
       */
      function controller() {
        this.a = Promise.resolve();
        /** @type {boolean} */
        this.b = this.c = this.f = false;
        this.i = new Promise(function(g) {
          this.g = g;
        }.bind(this));
      }
      /**
       * @param {Object} d
       * @return {?}
       */
      function doRequest(d) {
        return d.f || (d.a = d.a.then(function(val) {
          return this.c = true, Promise.resolve(val);
        }.bind(d), function(error) {
          return this.c = true, this.b ? (this.g(), Promise.reject(this.h)) : Promise.reject(error);
        }.bind(d))), d.f = true, d.a;
      }
      /**
       * @param {?} f
       * @param {?} beforeExit
       * @return {undefined}
       */
      function constructor(f, beforeExit) {
        EventDispatcher.call(this);
        /** @type {boolean} */
        this.I = false;
        this.f = f;
        /** @type {boolean} */
        this.gb = false;
        /** @type {null} */
        this.w = null;
        this.m = new Image;
        /** @type {null} */
        this.g = this.fb = this.b = this.l = this.a = this.B = this.h = this.cb = this.Ma = this.O = this.j = this.s = null;
        /** @type {number} */
        this.Jc = 1E9;
        /** @type {Array} */
        this.ab = [];
        /** @type {boolean} */
        this.Na = false;
        /** @type {boolean} */
        this.ga = true;
        /** @type {null} */
        this.sa = this.Oa = this.D = null;
        /** @type {boolean} */
        this.Vb = false;
        /** @type {null} */
        this.fa = null;
        /** @type {Array} */
        this.eb = [];
        this.C = {};
        this.c = listen(this);
        this.bb = {
          width : 1 / 0,
          height : 1 / 0
        };
        this.i = element();
        /** @type {number} */
        this.$a = 0;
        this.na = this.c.preferredAudioLanguage;
        this.Xa = this.c.preferredTextLanguage;
        /** @type {string} */
        this.tb = this.Ya = "";
        /** @type {boolean} */
        this.Wb = true;
        if (beforeExit) {
          beforeExit(this);
        }
        this.s = new s(this.pe.bind(this));
        this.cb = receive(this);
        callback(this.m, this.f, "error", this.Hd.bind(this));
      }
      /**
       * @param {Node} original
       * @return {undefined}
       */
      function read(original) {
        /**
         * @param {?} $scope
         * @return {?}
         */
        function animation($scope) {
          return($scope.video ? $scope.video.codecs.split(".")[0] : "") + "-" + ($scope.audio ? $scope.audio.codecs.split(".")[0] : "");
        }
        var map = {};
        original.b.periods.forEach(function(self) {
          self.variants.forEach(function(expectedHashCode) {
            var c = animation(expectedHashCode);
            if (!(c in map)) {
              /** @type {Array} */
              map[c] = [];
            }
            map[c].push(expectedHashCode);
          });
        });
        /** @type {null} */
        var text = null;
        /** @type {number} */
        var endOffset = 1 / 0;
        exec(map, function(textAlt, failures) {
          /** @type {number} */
          var frame = 0;
          /** @type {number} */
          var framesMax = 0;
          failures.forEach(function(b) {
            frame += b.bandwidth || 0;
            ++framesMax;
          });
          /** @type {number} */
          var offset = frame / framesMax;
          if (offset < endOffset) {
            /** @type {null} */
            text = textAlt;
            /** @type {number} */
            endOffset = offset;
          }
        });
        original.b.periods.forEach(function(base) {
          base.variants = base.variants.filter(function($rootScope) {
            return animation($rootScope) == text;
          });
        });
      }
      /**
       * @param {Object} item
       * @return {?}
       */
      function receive(item) {
        item.O = new MediaSource;
        var m = new Point;
        return callback(item.m, item.O, "sourceopen", m.resolve), item.f.src = global.URL.createObjectURL(item.O), m;
      }
      /**
       * @param {Object} self
       * @return {undefined}
       */
      function parse_workbook(self) {
        if (self.l && self.l.configure(self.c.manifest), self.j && self.j.configure(self.c.drm), self.a) {
          self.a.configure(self.c.streaming);
          try {
            self.b.periods.forEach(self.hb.bind(self));
          } catch (ex) {
            self.La(ex);
          }
          getter(self, Number(self.a));
        }
        if (self.g) {
          prep(self);
          if (self.c.abr.enabled && !self.ga) {
            self.g.enable();
          } else {
            self.g.disable();
          }
        }
      }
      /**
       * @param {Object} obj
       * @return {undefined}
       */
      function prep(obj) {
        if (obj.g.configure) {
          obj.g.configure(obj.c.abr);
        } else {
          obj.g.setDefaultEstimate(obj.c.abr.defaultBandwidthEstimate);
          obj.g.setRestrictions(obj.c.abr.restrictions);
        }
      }
      /**
       * @param {Object} self
       * @param {Object} data
       * @param {boolean} recurring
       * @return {undefined}
       */
      function fn(self, data, recurring) {
        if (data.video) {
          _(self, data.video);
        }
        if (data.audio) {
          _(self, data.audio);
        }
        var base = assetLoaded(self.a);
        var media = exists(self.a);
        if (data != streaming(media.audio, media.video, base ? base.variants : [])) {
          self.i.switchHistory.push({
            timestamp : Date.now() / 1E3,
            id : data.id,
            type : "variant",
            fromAdaptation : recurring,
            bandwidth : data.bandwidth
          });
        }
      }
      /**
       * @param {Object} self
       * @param {Object} config
       * @param {boolean} recurring
       * @return {undefined}
       */
      function handle(self, config, recurring) {
        _(self, config);
        self.i.switchHistory.push({
          timestamp : Date.now() / 1E3,
          id : config.id,
          type : "text",
          fromAdaptation : recurring,
          bandwidth : null
        });
      }
      /**
       * @param {Object} self
       * @param {Object} object
       * @return {undefined}
       */
      function _(self, object) {
        var obj = bind(self.b, object);
        if (!self.C[obj]) {
          self.C[obj] = {};
        }
        self.C[obj][object.type] = object.id;
      }
      /**
       * @param {Object} item
       * @return {?}
       */
      function play(item) {
        if (item.m) {
          item.m.la(item.O, "sourceopen");
          item.m.la(item.f, "loadeddata");
          item.m.la(item.f, "playing");
          item.m.la(item.f, "pause");
          item.m.la(item.f, "ended");
        }
        if (item.f) {
          item.f.removeAttribute("src");
          item.f.load();
        }
        var e = Promise.all([item.g ? item.g.stop() : null, item.j ? item.j.o() : null, item.Ma ? item.Ma.o() : null, item.h ? item.h.o() : null, item.B ? item.B.o() : null, item.a ? item.a.o() : null, item.l ? item.l.stop() : null, item.w ? item.w.o() : null]);
        return item.j = null, item.Ma = null, item.h = null, item.B = null, item.a = null, item.l = null, item.w = null, item.b = null, item.fb = null, item.cb = null, item.O = null, item.eb = [], item.C = {}, item.i = element(), e;
      }
      /**
       * @param {Object} win
       * @return {?}
       */
      function promise(win) {
        return win.l ? play(win).then(function() {
          if (!this.I) {
            this.Ec(false);
            this.cb = receive(this);
          }
        }.bind(win)) : Promise.resolve();
      }
      /**
       * @return {?}
       */
      function configure() {
        return{
          ".drm.servers" : "",
          ".drm.clearKeys" : "",
          ".drm.advanced" : {
            distinctiveIdentifierRequired : false,
            persistentStateRequired : false,
            videoRobustness : "",
            audioRobustness : "",
            serverCertificate : new Uint8Array(0)
          }
        };
      }
      /**
       * @param {Object} fn
       * @return {?}
       */
      function listen(fn) {
        return{
          drm : {
            retryParameters : random(),
            servers : {},
            clearKeys : {},
            advanced : {},
            delayLicenseRequestUntilPlayed : false
          },
          manifest : {
            retryParameters : random(),
            dash : {
              /**
               * @param {?} dataAndEvents
               * @return {?}
               */
              customScheme : function(dataAndEvents) {
                if (dataAndEvents) {
                  return null;
                }
              },
              clockSyncUri : "",
              ignoreDrmInfo : false,
              xlinkFailGracefully : false
            },
            hls : {
              defaultTimeOffset : 0
            }
          },
          streaming : {
            retryParameters : random(),
            failureCallback : fn.Qc.bind(fn),
            rebufferingGoal : 2,
            bufferingGoal : 10,
            bufferBehind : 30,
            ignoreTextStreamFailures : false,
            startAtSegmentBoundary : false,
            smallGapLimit : 0.5,
            jumpLargeGaps : false
          },
          /** @type {function (): undefined} */
          abrFactory : Plugin,
          textDisplayFactory : function(dataAndEvents) {
            return new Item(dataAndEvents);
          }.bind(null, fn.f),
          abr : {
            enabled : true,
            defaultBandwidthEstimate : 5E5,
            switchInterval : 8,
            bandwidthUpgradeTarget : 0.85,
            bandwidthDowngradeTarget : 0.95,
            restrictions : {
              minWidth : 0,
              maxWidth : 1 / 0,
              minHeight : 0,
              maxHeight : 1 / 0,
              minPixels : 0,
              maxPixels : 1 / 0,
              minBandwidth : 0,
              maxBandwidth : 1 / 0
            }
          },
          preferredAudioLanguage : "",
          preferredTextLanguage : "",
          restrictions : {
            minWidth : 0,
            maxWidth : 1 / 0,
            minHeight : 0,
            maxHeight : 1 / 0,
            minPixels : 0,
            maxPixels : 1 / 0,
            minBandwidth : 0,
            maxBandwidth : 1 / 0
          },
          playRangeStart : 0,
          playRangeEnd : 1 / 0
        };
      }
      /**
       * @return {?}
       */
      function element() {
        return{
          width : NaN,
          height : NaN,
          streamBandwidth : NaN,
          decodedFrames : NaN,
          droppedFrames : NaN,
          estimatedBandwidth : NaN,
          loadLatency : NaN,
          playTime : 0,
          bufferingTime : 0,
          switchHistory : [],
          stateHistory : []
        };
      }
      /**
       * @param {Object} node
       * @param {Error} obj
       * @param {boolean} deepDataAndEvents
       * @return {undefined}
       */
      function cloneNode(node, obj, deepDataAndEvents) {
        if (node.ga) {
          /** @type {Error} */
          node.sa = obj;
          node.Vb = deepDataAndEvents || false;
        } else {
          reduce(node.a, obj, deepDataAndEvents || false);
        }
      }
      /**
       * @param {Object} a
       * @return {undefined}
       */
      function brighten(a) {
        if (a.b) {
          /** @type {number} */
          var b = Date.now() / 1E3;
          if (a.Na) {
            a.i.bufferingTime += b - a.$a;
          } else {
            a.i.playTime += b - a.$a;
          }
          /** @type {number} */
          a.$a = b;
        }
      }
      /**
       * @param {Node} object
       * @param {string} y
       * @return {?}
       */
      function slice(object, y) {
        /**
         * @param {?} f
         * @param {undefined} v11
         * @return {?}
         */
        function tryIt(f, v11) {
          if (!f) {
            return null;
          }
          var end = f.findSegmentPosition(v11 - b.startTime);
          return null == end ? null : (end = f.getSegmentReference(end)) ? end.startTime + b.startTime : null;
        }
        var item = exists(object.a);
        var b = Number(object.a);
        var z1 = tryIt(item.video, y);
        item = tryIt(item.audio, y);
        return null != z1 && null != item ? Math.max(z1, item) : null != z1 ? z1 : null != item ? item : y;
      }
      /**
       * @param {Object} spec
       * @param {string} data
       * @return {?}
       */
      function template(spec, data) {
        if (!data || !data.length) {
          return spec.La(new error(2, 4, 4012)), null;
        }
        if (spec.g.setVariants(data), spec.g.chooseStreams) {
          var media = spec.g.chooseStreams(["video", "audio"]);
          return streaming(media.audio, media.video, data);
        }
        return spec.g.chooseVariant();
      }
      /**
       * @param {Object} item
       * @param {(Array|string)} name
       * @return {undefined}
       */
      function getter(item, name) {
        var html = loaded(name, item.na, item.Ya);
        var type = build(name, item.Xa, item.tb);
        if (html = template(item, html)) {
          fn(item, html, true);
          cloneNode(item, html, true);
        }
        if (type = type[0]) {
          handle(item, type, true);
          if (item.ga) {
            item.fa = type;
          } else {
            each(item.a, type, true);
          }
        }
        change(item);
      }
      /**
       * @param {Object} self
       * @return {undefined}
       */
      function change(self) {
        Promise.resolve().then(function() {
          if (!this.I) {
            this.dispatchEvent(new EventObject("adaptation"));
          }
        }.bind(self));
      }
      /**
       * @param {?} next
       * @return {undefined}
       */
      function bootstrap(next) {
        Promise.resolve().then(function() {
          if (!this.I) {
            this.dispatchEvent(new EventObject("trackschanged"));
          }
        }.bind(next));
      }
      /**
       * @param {EventTarget} obj
       * @return {undefined}
       */
      function pause(obj) {
        obj.dispatchEvent(new EventObject("texttrackvisibility"));
      }
      /**
       * @param {Object} m
       * @return {undefined}
       */
      function t(m) {
        if (!m || m.constructor != constructor) {
          throw new error(2, 9, 9008);
        }
        this.a = toObject();
        /** @type {Object} */
        this.g = m;
        this.b = submit(this);
        /** @type {null} */
        this.c = null;
        /** @type {boolean} */
        this.s = false;
        /** @type {null} */
        this.j = null;
        /** @type {number} */
        this.h = -1;
        /** @type {number} */
        this.l = 0;
        /** @type {null} */
        this.f = null;
        this.i = new Matrix(this.a, m.s, m.getConfiguration().streaming.retryParameters, this.b);
      }
      /**
       * @return {?}
       */
      function support() {
        return!!global.indexedDB;
      }
      /**
       * @param {Node} options
       * @param {?} expectedHashCode
       * @param {Function} error
       * @param {?} args
       * @return {?}
       */
      function start(options, expectedHashCode, error, args) {
        /**
         * @return {undefined}
         */
        function doc() {
        }
        var data;
        var value;
        var _;
        var name = options.g.s;
        var settings = options.g.getConfiguration();
        return process(expectedHashCode, name, settings.manifest.retryParameters, args).then(function(dataAndEvents) {
          return forEach(this), (_ = new dataAndEvents).configure(settings.manifest), _.start(expectedHashCode, {
            networkingEngine : name,
            filterAllPeriods : this.m.bind(this),
            filterNewPeriod : this.w.bind(this),
            /**
             * @return {undefined}
             */
            onTimelineRegionAdded : function() {
            },
            /**
             * @return {undefined}
             */
            onEvent : function() {
            },
            /** @type {Function} */
            onError : error
          });
        }.bind(options)).then(function(transformed) {
          return forEach(this), data = transformed, (value = new load(name, error, doc, function() {
          })).configure(settings.drm), value.init(data, this.b.usePersistentLicense || false);
        }.bind(options)).then(function() {
          return forEach(this), flatten(data);
        }.bind(options)).then(function() {
          return forEach(this), dispatch(value);
        }.bind(options)).then(function() {
          return forEach(this), _.stop();
        }.bind(options)).then(function() {
          return forEach(this), {
            manifest : data,
            Rc : value
          };
        }.bind(options)).catch(function(dataAndEvents) {
          if (_) {
            return _.stop().then(function() {
              throw dataAndEvents;
            });
          }
          throw dataAndEvents;
        });
      }
      /**
       * @param {Object} target
       * @return {?}
       */
      function submit(target) {
        return{
          trackSelectionCallback : target.B.bind(target),
          /**
           * @param {string} obj
           * @param {number} value
           * @return {?}
           */
          progressCallback : function(obj, value) {
            if (obj || value) {
              return null;
            }
          },
          usePersistentLicense : true
        };
      }
      /**
       * @param {Node} c
       * @return {?}
       */
      function readdir(c) {
        return c.a ? c.a.a ? Promise.resolve() : c.a.init(arg) : Promise.reject(new error(2, 9, 9E3));
      }
      /**
       * @param {Object} item
       * @return {?}
       */
      function strictParse(item) {
        var e = item.c ? item.c.o() : Promise.resolve();
        return item.c = null, item.f = null, item.s = false, item.j = null, item.h = -1, e;
      }
      /**
       * @param {Text} data
       * @return {?}
       */
      function flatten(data) {
        var children = data.periods.map(function(c) {
          return c.variants;
        }).reduce(options, []).map(function(item) {
          /** @type {Array} */
          var url = [];
          return item.audio && url.push(item.audio), item.video && url.push(item.video), url;
        }).reduce(options, []).filter(src);
        return data = data.periods.map(function(dataAndEvents) {
          return dataAndEvents.textStreams;
        }).reduce(options, []), children.push.apply(children, data), Promise.all(children.map(function(dataAndEvents) {
          return dataAndEvents.createSegmentIndex();
        }));
      }
      /**
       * @param {Object} item
       * @param {?} value
       * @param {Object} options
       * @param {number} block
       * @param {?} expectedHashCode
       * @return {?}
       */
      function add(item, value, options, block, expectedHashCode) {
        /** @type {Array} */
        var segments = [];
        var start = item.f.presentationTimeline.ia();
        var i = start;
        var end = options.findSegmentPosition(start);
        var event = null != end ? options.getSegmentReference(end) : null;
        for (;event;) {
          /** @type {number} */
          i = item.a.c.segment++;
          equals(item.i, options.type, event, (event.endTime - event.startTime) * block / 8, {
            key : i,
            data : null,
            manifestKey : item.h,
            streamNumber : options.id,
            segmentNumber : i
          });
          segments.push({
            startTime : event.startTime,
            endTime : event.endTime,
            uri : "offline:" + item.h + "/" + options.id + "/" + i
          });
          i = event.endTime + value.startTime;
          event = options.getSegmentReference(++end);
        }
        return item.l = Math.max(item.l, i - start), value = null, options.initSegmentReference && (i = item.a.c.segment++, value = "offline:" + item.h + "/" + options.id + "/" + i, equals(item.i, options.contentType, options.initSegmentReference, 0, {
          key : i,
          data : null,
          manifestKey : item.h,
          streamNumber : options.id,
          segmentNumber : -1
        })), item = [], null != expectedHashCode && item.push(expectedHashCode), {
          id : options.id,
          primary : options.primary,
          presentationTimeOffset : options.presentationTimeOffset || 0,
          contentType : options.type,
          mimeType : options.mimeType,
          codecs : options.codecs,
          frameRate : options.frameRate,
          kind : options.kind,
          language : options.language,
          label : options.label,
          width : options.width || null,
          height : options.height || null,
          initSegmentUri : value,
          encrypted : options.encrypted,
          keyId : options.keyId,
          segments : segments,
          variantIds : item
        };
      }
      /**
       * @param {Node} scope
       * @return {undefined}
       */
      function forEach(scope) {
        if (!scope.g) {
          throw new error(2, 9, 9002);
        }
      }
      /**
       * @param {?} expectedHashCode
       * @return {undefined}
       */
      function expected(expectedHashCode) {
        codeSegments.push(expectedHashCode);
      }
      /**
       * @param {Object} e
       * @return {undefined}
       */
      function onTouchEnd(e) {
        var name = e.type.replace(/^(webkit|moz|MS)/, "").toLowerCase();
        if ("function" == typeof Event) {
          /** @type {Event} */
          var event = new Event(name, e)
        } else {
          (event = document.createEvent("Event")).initEvent(name, e.bubbles, e.cancelable);
        }
        e.target.dispatchEvent(event);
      }
      /**
       * @param {string} type
       * @param {Function} handler
       * @param {boolean} recurring
       * @return {undefined}
       */
      function eventHandler(type, handler, recurring) {
        if ("input" == type) {
          switch(this.type) {
            case "range":
              /** @type {string} */
              type = "change";
          }
        }
        addEventListener.call(this, type, handler, recurring);
      }
      /**
       * @param {Comment} opts
       * @return {undefined}
       */
      function d(opts) {
        /** @type {Array} */
        this.f = [];
        /** @type {Array} */
        this.b = [];
        /** @type {Array} */
        this.a = [];
        (new store).aa("pssh", this.c.bind(this)).parse(opts.buffer);
      }
      /**
       * @param {Function} elem
       * @param {Function} novisibility
       * @return {?}
       */
      function condition(elem, novisibility) {
        try {
          var val = new win(elem, novisibility);
          return Promise.resolve(val);
        } catch (ex) {
          return Promise.reject(ex);
        }
      }
      /**
       * @param {Function} elem
       * @param {Array} data
       * @return {?}
       */
      function win(elem, data) {
        /** @type {Function} */
        this.keySystem = elem;
        /** @type {boolean} */
        var _objectTemplate = false;
        /** @type {number} */
        var i = 0;
        for (;i < data.length;++i) {
          var item = data[i];
          var p1 = {
            audioCapabilities : [],
            videoCapabilities : [],
            persistentState : "optional",
            distinctiveIdentifier : "optional",
            initDataTypes : item.initDataTypes,
            sessionTypes : ["temporary"],
            label : item.label
          };
          /** @type {boolean} */
          var _objectTypeIsMetaData = false;
          if (item.audioCapabilities) {
            /** @type {number} */
            var sitemi = 0;
            for (;sitemi < item.audioCapabilities.length;++sitemi) {
              var expectedHashCode = item.audioCapabilities[sitemi];
              if (expectedHashCode.contentType) {
                /** @type {boolean} */
                _objectTypeIsMetaData = true;
                var value = expectedHashCode.contentType.split(";")[0];
                if (MSMediaKeys.isTypeSupported(this.keySystem, value)) {
                  p1.audioCapabilities.push(expectedHashCode);
                  /** @type {boolean} */
                  _objectTemplate = true;
                }
              }
            }
          }
          if (item.videoCapabilities) {
            /** @type {number} */
            sitemi = 0;
            for (;sitemi < item.videoCapabilities.length;++sitemi) {
              if ((expectedHashCode = item.videoCapabilities[sitemi]).contentType) {
                /** @type {boolean} */
                _objectTypeIsMetaData = true;
                value = expectedHashCode.contentType.split(";")[0];
                if (MSMediaKeys.isTypeSupported(this.keySystem, value)) {
                  p1.videoCapabilities.push(expectedHashCode);
                  /** @type {boolean} */
                  _objectTemplate = true;
                }
              }
            }
          }
          if (_objectTypeIsMetaData || (_objectTemplate = MSMediaKeys.isTypeSupported(this.keySystem, "video/mp4")), "required" == item.persistentState && (_objectTemplate = false), _objectTemplate) {
            return void(this.a = p1);
          }
        }
        throw item = Error("Unsupported keySystem"), item.name = "NotSupportedError", item.code = DOMException.NOT_SUPPORTED_ERR, item;
      }
      /**
       * @param {Error} isXML
       * @return {?}
       */
      function CLASS(isXML) {
        var udataCur = this.mediaKeys;
        return udataCur && (udataCur != isXML && edit(udataCur, null)), delete this.mediaKeys, (this.mediaKeys = isXML) ? edit(isXML, this) : Promise.resolve();
      }
      /**
       * @param {Function} elem
       * @return {undefined}
       */
      function Sprite(elem) {
        this.a = new MSMediaKeys(elem);
        this.b = new Image;
      }
      /**
       * @param {Object} value
       * @param {Object} self
       * @return {?}
       */
      function edit(value, self) {
        /**
         * @return {undefined}
         */
        function action() {
          self.msSetMediaKeys(ret.a);
          self.removeEventListener("loadedmetadata", action);
        }
        if (clean(value.b), !self) {
          return Promise.resolve();
        }
        callback(value.b, self, "msneedkey", trigger);
        /** @type {Object} */
        var ret = value;
        try {
          return 1 <= self.readyState ? self.msSetMediaKeys(value.a) : self.addEventListener("loadedmetadata", action), Promise.resolve();
        } catch (ex) {
          return Promise.reject(ex);
        }
      }
      /**
       * @param {Object} var_args
       * @return {undefined}
       */
      function Map(var_args) {
        EventDispatcher.call(this);
        /** @type {null} */
        this.c = null;
        /** @type {Object} */
        this.g = var_args;
        /** @type {null} */
        this.b = this.a = null;
        this.f = new Image;
        /** @type {string} */
        this.sessionId = "";
        /** @type {number} */
        this.expiration = NaN;
        this.closed = new Point;
        this.keyStatuses = new Anchor;
      }
      /**
       * @param {Array} i
       * @return {undefined}
       */
      function trigger(i) {
        /** @type {(Event|null)} */
        var event = document.createEvent("CustomEvent");
        event.initCustomEvent("encrypted", false, false, null);
        /** @type {string} */
        event.initDataType = "cenc";
        var codeSegments = i.initData;
        if (codeSegments) {
          var value = new d(codeSegments);
          if (1 >= value.a.length) {
            i = codeSegments;
          } else {
            /** @type {Array} */
            var pdataCur = [];
            /** @type {number} */
            i = 0;
            for (;i < value.a.length;i++) {
              pdataCur.push(codeSegments.subarray(value.a[i].start, value.a[i].end + 1));
            }
            codeSegments = nextTick(pdataCur, sort);
            /** @type {number} */
            i = value = 0;
            for (;i < codeSegments.length;i++) {
              value += codeSegments[i].length;
            }
            /** @type {Uint8Array} */
            value = new Uint8Array(value);
            /** @type {number} */
            i = pdataCur = 0;
            for (;i < codeSegments.length;i++) {
              value.set(codeSegments[i], pdataCur);
              pdataCur += codeSegments[i].length;
            }
            /** @type {Uint8Array} */
            i = value;
          }
        } else {
          i = codeSegments;
        }
        /** @type {Array} */
        event.initData = i;
        this.dispatchEvent(event);
      }
      /**
       * @param {Uint8Array} handle
       * @param {Uint8Array} dx
       * @return {?}
       */
      function sort(handle, dx) {
        return drag(handle, dx);
      }
      /**
       * @param {EventTarget} target
       * @param {string} a
       * @return {undefined}
       */
      function triggerEvent(target, a) {
        var node = target.keyStatuses;
        /** @type {number} */
        node.size = void 0 == a ? 0 : 1;
        /** @type {string} */
        node.a = a;
        target.dispatchEvent(new EventObject("keystatuseschange"));
      }
      /**
       * @return {undefined}
       */
      function Anchor() {
        /** @type {number} */
        this.size = 0;
        this.a = void 0;
      }
      /**
       * @return {?}
       */
      function fallback() {
        return Promise.reject(Error("The key system specified is not supported."));
      }
      /**
       * @param {Array} evt
       * @return {?}
       */
      function emit(evt) {
        return evt ? Promise.reject(Error("MediaKeys not supported.")) : Promise.resolve();
      }
      /**
       * @return {?}
       */
      function _URL() {
        throw new TypeError("Illegal constructor.");
      }
      /**
       * @return {?}
       */
      function fromUtf8() {
        throw new TypeError("Illegal constructor.");
      }
      /**
       * @param {string} prefix
       * @return {undefined}
       */
      function define(prefix) {
        /** @type {string} */
        fromIndex = prefix;
        /** @type {ArrayBuffer} */
        ber = (new Uint8Array([0])).buffer;
        /** @type {function (Function, Function): ?} */
        navigator.requestMediaKeySystemAccess = target;
        delete HTMLMediaElement.prototype.mediaKeys;
        /** @type {null} */
        HTMLMediaElement.prototype.mediaKeys = null;
        /** @type {function (Error): ?} */
        HTMLMediaElement.prototype.setMediaKeys = kill;
        /** @type {function (Function): undefined} */
        global.MediaKeys = matrixTransform;
        /** @type {function (Function, Array): ?} */
        global.MediaKeySystemAccess = log;
      }
      /**
       * @param {string} word
       * @return {?}
       */
      function capitalize(word) {
        var i = fromIndex;
        return i ? i + word.charAt(0).toUpperCase() + word.slice(1) : word;
      }
      /**
       * @param {Function} elem
       * @param {Function} novisibility
       * @return {?}
       */
      function target(elem, novisibility) {
        try {
          var val = new log(elem, novisibility);
          return Promise.resolve(val);
        } catch (ex) {
          return Promise.reject(ex);
        }
      }
      /**
       * @param {Error} id
       * @return {?}
       */
      function kill(id) {
        var attribute = this.mediaKeys;
        return attribute && (attribute != id && destroy(attribute, null)), delete this.mediaKeys, (this.mediaKeys = id) && destroy(id, this), Promise.resolve();
      }
      /**
       * @param {Function} elem
       * @param {Array} b
       * @return {?}
       */
      function log(elem, b) {
        this.a = this.keySystem = elem;
        /** @type {boolean} */
        var error = false;
        if ("org.w3.clearkey" == elem) {
          /** @type {string} */
          this.a = "webkit-org.w3.clearkey";
          /** @type {boolean} */
          error = false;
        }
        /** @type {boolean} */
        var thisObj = false;
        /** @type {NodeList} */
        var node = document.getElementsByTagName("video");
        var video = node.length ? node[0] : document.createElement("video");
        /** @type {number} */
        var j = 0;
        for (;j < b.length;++j) {
          var $scope = {
            audioCapabilities : [],
            videoCapabilities : [],
            persistentState : "optional",
            distinctiveIdentifier : "optional",
            initDataTypes : (node = b[j]).initDataTypes,
            sessionTypes : ["temporary"],
            label : node.label
          };
          /** @type {boolean} */
          var data = false;
          if (node.audioCapabilities) {
            /** @type {number} */
            var i = 0;
            for (;i < node.audioCapabilities.length;++i) {
              var expectedHashCode = node.audioCapabilities[i];
              if (expectedHashCode.contentType) {
                /** @type {boolean} */
                data = true;
                var f = expectedHashCode.contentType.split(";")[0];
                if (video.canPlayType(f, this.a)) {
                  $scope.audioCapabilities.push(expectedHashCode);
                  /** @type {boolean} */
                  thisObj = true;
                }
              }
            }
          }
          if (node.videoCapabilities) {
            /** @type {number} */
            i = 0;
            for (;i < node.videoCapabilities.length;++i) {
              if ((expectedHashCode = node.videoCapabilities[i]).contentType) {
                /** @type {boolean} */
                data = true;
                if (video.canPlayType(expectedHashCode.contentType, this.a)) {
                  $scope.videoCapabilities.push(expectedHashCode);
                  /** @type {boolean} */
                  thisObj = true;
                }
              }
            }
          }
          if (data || (thisObj = video.canPlayType("video/mp4", this.a) || video.canPlayType("video/webm", this.a)), "required" == node.persistentState && (error ? ($scope.persistentState = "required", $scope.sessionTypes = ["persistent-license"]) : thisObj = false), thisObj) {
            return void(this.b = $scope);
          }
        }
        throw error = "Unsupported keySystem", "org.w3.clearkey" != elem && "com.widevine.alpha" != elem || (error = "None of the requested configurations were supported."), error = Error(error), error.name = "NotSupportedError", error.code = DOMException.NOT_SUPPORTED_ERR, error;
      }
      /**
       * @param {Function} elem
       * @return {undefined}
       */
      function matrixTransform(elem) {
        /** @type {Function} */
        this.g = elem;
        /** @type {null} */
        this.b = null;
        this.a = new Image;
        /** @type {Array} */
        this.c = [];
        this.f = {};
      }
      /**
       * @param {Object} params
       * @param {number} c
       * @return {undefined}
       */
      function destroy(params, c) {
        /** @type {number} */
        params.b = c;
        clean(params.a);
        var i = fromIndex;
        if (c) {
          callback(params.a, c, i + "needkey", params.Ld.bind(params));
          callback(params.a, c, i + "keymessage", params.Kd.bind(params));
          callback(params.a, c, i + "keyadded", params.Id.bind(params));
          callback(params.a, c, i + "keyerror", params.Jd.bind(params));
        }
      }
      /**
       * @param {Object} node
       * @param {?} key
       * @return {?}
       */
      function cache(node, key) {
        var value = node.f[key];
        return value || ((value = node.c.shift()) ? (value.sessionId = key, node.f[key] = value) : null);
      }
      /**
       * @param {?} el
       * @param {?} container
       * @param {?} g
       * @return {undefined}
       */
      function draw(el, container, g) {
        EventDispatcher.call(this);
        this.f = el;
        /** @type {boolean} */
        this.h = false;
        /** @type {null} */
        this.a = this.b = null;
        this.c = container;
        this.g = g;
        /** @type {string} */
        this.sessionId = "";
        /** @type {number} */
        this.expiration = NaN;
        this.closed = new Point;
        this.keyStatuses = new Particle;
      }
      /**
       * @param {Object} e
       * @param {?} data
       * @param {string} idx
       * @return {?}
       */
      function set(e, data, idx) {
        if (e.h) {
          return Promise.reject(Error("The session is already initialized."));
        }
        /** @type {boolean} */
        e.h = true;
        try {
          if ("persistent-license" == e.g) {
            if (idx) {
              /** @type {Uint8Array} */
              var fn = new Uint8Array(encode("LOAD_SESSION|" + idx))
            } else {
              var payload = encode("PERSISTENT|");
              /** @type {Uint8Array} */
              var tmp = new Uint8Array(payload.byteLength + data.byteLength);
              tmp.set(new Uint8Array(payload), 0);
              tmp.set(new Uint8Array(data), payload.byteLength);
              /** @type {Uint8Array} */
              fn = tmp;
            }
          } else {
            /** @type {Uint8Array} */
            fn = new Uint8Array(data);
          }
        } catch (error) {
          return Promise.reject(error);
        }
        e.b = new Point;
        var i = capitalize("generateKeyRequest");
        try {
          e.f[i](e.c, fn);
        } catch (ex) {
          if ("InvalidStateError" != ex.name) {
            return e.b = null, Promise.reject(ex);
          }
          setTimeout(function() {
            try {
              this.f[i](this.c, fn);
            } catch (ex) {
              this.b.reject(ex);
              /** @type {null} */
              this.b = null;
            }
          }.bind(e), 10);
        }
        return e.b;
      }
      /**
       * @param {Object} d
       * @param {string} v
       * @return {undefined}
       */
      function radius(d, v) {
        var input = d.keyStatuses;
        /** @type {number} */
        input.size = void 0 == v ? 0 : 1;
        /** @type {string} */
        input.a = v;
        d.dispatchEvent(new EventObject("keystatuseschange"));
      }
      /**
       * @return {undefined}
       */
      function Particle() {
        /** @type {number} */
        this.size = 0;
        this.a = void 0;
      }
      /**
       * @return {undefined}
       */
      function objectToString() {
        /** @type {function (): ?} */
        var matcherFunction = MediaSource.prototype.addSourceBuffer;
        /**
         * @return {?}
         */
        MediaSource.prototype.addSourceBuffer = function() {
          var result = matcherFunction.apply(this, arguments);
          return result.abort = function() {
          }, result;
        };
      }
      /**
       * @return {undefined}
       */
      function addToWrapper() {
        /** @type {function (): ?} */
        var matcherFunction = MediaSource.prototype.endOfStream;
        /**
         * @return {?}
         */
        MediaSource.prototype.endOfStream = function() {
          var s;
          /** @type {number} */
          var closingAnimationTime = 0;
          /** @type {number} */
          var i = 0;
          for (;i < this.sourceBuffers.length;++i) {
            s = this.sourceBuffers[i];
            s = s.buffered.end(s.buffered.length - 1);
            /** @type {number} */
            closingAnimationTime = Math.max(closingAnimationTime, s);
          }
          if (!isNaN(this.duration) && closingAnimationTime < this.duration) {
            /** @type {boolean} */
            this.dc = true;
            /** @type {number} */
            i = 0;
            for (;i < this.sourceBuffers.length;++i) {
              s = this.sourceBuffers[i];
              /** @type {boolean} */
              s.Zb = false;
            }
          }
          return matcherFunction.apply(this, arguments);
        };
        /** @type {boolean} */
        var sourceclose = false;
        /** @type {function (): ?} */
        var __method = MediaSource.prototype.addSourceBuffer;
        /**
         * @return {?}
         */
        MediaSource.prototype.addSourceBuffer = function() {
          var m = __method.apply(this, arguments);
          return m.mediaSource_ = this, m.addEventListener("updateend", mousedown, false), sourceclose || (this.addEventListener("sourceclose", click, false), sourceclose = true), m;
        };
      }
      /**
       * @param {Object} ev
       * @return {undefined}
       */
      function mousedown(ev) {
        var context = ev.target;
        var j = context.mediaSource_;
        if (j.dc) {
          ev.preventDefault();
          ev.stopPropagation();
          ev.stopImmediatePropagation();
          /** @type {boolean} */
          context.Zb = true;
          /** @type {number} */
          ev = 0;
          for (;ev < j.sourceBuffers.length;++ev) {
            if (0 == j.sourceBuffers[ev].Zb) {
              return;
            }
          }
          /** @type {boolean} */
          j.dc = false;
        }
      }
      /**
       * @param {Object} el
       * @return {undefined}
       */
      function click(el) {
        el = el.target;
        /** @type {number} */
        var i = 0;
        for (;i < el.sourceBuffers.length;++i) {
          el.sourceBuffers[i].removeEventListener("updateend", mousedown, false);
        }
        el.removeEventListener("sourceclose", click, false);
      }
      /**
       * @return {undefined}
       */
      function throttledUpdate() {
        /** @type {function (Function): ?} */
        var getNodeIndex = MediaSource.isTypeSupported;
        /** @type {RegExp} */
        var isSimple = /^dv(?:he|av)\./;
        /**
         * @param {Function} elem
         * @return {?}
         */
        MediaSource.isTypeSupported = function(elem) {
          var value;
          var key;
          var codeSegments = elem.split(/ *; */);
          var udataCur = codeSegments[0];
          var object = {};
          /** @type {number} */
          var i = 1;
          for (;i < codeSegments.length;++i) {
            value = codeSegments[i].split("=");
            key = value[0];
            value = value[1].replace(/"(.*)"/, "$1");
            object[key] = value;
          }
          if (!(value = object.codecs)) {
            return getNodeIndex(elem);
          }
          /** @type {boolean} */
          var c = false;
          /** @type {boolean} */
          var l = false;
          elem = value.split(",").filter(function(qualifier) {
            return isSimple.test(qualifier) ? (l = true, false) : (/^(hev|hvc)1\.2/.test(qualifier) && (c = true), true);
          });
          if (l) {
            /** @type {boolean} */
            c = false;
          }
          object.codecs = elem.join(",");
          if (c) {
            /** @type {string} */
            object.eotf = "smpte2084";
          }
          for (key in object) {
            value = object[key];
            udataCur += "; " + key + '="' + value + '"';
          }
          return cast.__platform__.canDisplayType(udataCur);
        };
      }
      /**
       * @param {Function} elem
       * @return {undefined}
       */
      function Promise(elem) {
        if (this.c = [], this.b = [], this.Aa = opt_type, elem) {
          try {
            elem(this.ka.bind(this), this.a.bind(this));
          } catch (expectedHashCode) {
            this.a(expectedHashCode);
          }
        }
      }
      /**
       * @param {boolean} elems
       * @return {?}
       */
      function transport(elems) {
        var promise = new Promise;
        return promise.ka(void 0), promise.then(function() {
          return elems;
        });
      }
      /**
       * @param {?} expectedHashCode
       * @return {?}
       */
      function assertHashcodeEquals(expectedHashCode) {
        var source = new Promise;
        return source.a(expectedHashCode), source;
      }
      /**
       * @param {Array} promises
       * @return {?}
       */
      function chain(promises) {
        /**
         * @param {?} event
         * @param {number} k
         * @param {?} v
         * @return {undefined}
         */
        function fn(event, k, v) {
          if (event.Aa == opt_type) {
            args[k] = v;
            if (++done == args.length) {
              event.ka(args);
            }
          }
        }
        var self = new Promise;
        if (!promises.length) {
          return self.ka([]), self;
        }
        /** @type {number} */
        var done = 0;
        /** @type {Array} */
        var args = Array(promises.length);
        var rejectCallback = self.a.bind(self);
        /** @type {number} */
        var i = 0;
        for (;i < promises.length;++i) {
          if (promises[i] && promises[i].then) {
            promises[i].then(fn.bind(null, self, i), rejectCallback);
          } else {
            fn(self, i, promises[i]);
          }
        }
        return self;
      }
      /**
       * @param {Array} codeSegments
       * @return {?}
       */
      function sync(codeSegments) {
        var r = new Promise;
        var resolve = r.ka.bind(r);
        var rejectCallback = r.a.bind(r);
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;++i) {
          if (codeSegments[i] && codeSegments[i].then) {
            codeSegments[i].then(resolve, rejectCallback);
          } else {
            resolve(codeSegments[i]);
          }
        }
        return r;
      }
      /**
       * @param {?} e
       * @param {Node} self
       * @param {Function} fn
       * @return {undefined}
       */
      function notify(e, self, fn) {
        yels.push(function() {
          if (fn && "function" == typeof fn) {
            try {
              var value = fn(this.rb);
            } catch (expectedHashCode) {
              return void self.a(expectedHashCode);
            }
            try {
              var restoreScript = value && value.then;
            } catch (type) {
              return void self.a(type);
            }
            if (value instanceof Promise) {
              if (value == self) {
                self.a(new TypeError("Chaining cycle detected"));
              } else {
                value.then(self.ka.bind(self), self.a.bind(self));
              }
            } else {
              if (restoreScript) {
                select(value, restoreScript, self);
              } else {
                self.ka(value);
              }
            }
          } else {
            if (1 == this.Aa) {
              self.ka(this.rb);
            } else {
              self.a(this.rb);
            }
          }
        }.bind(e));
        if (null == modId) {
          modId = tryIt(w);
        }
      }
      /**
       * @param {Function} target
       * @param {Function} callback
       * @param {Node} e
       * @return {undefined}
       */
      function select(target, callback, e) {
        try {
          /** @type {boolean} */
          var r = false;
          callback.call(target, function(value) {
            if (!r) {
              /** @type {boolean} */
              r = true;
              try {
                var restoreScript = value && value.then;
              } catch (expectedHashCode) {
                return void e.a(expectedHashCode);
              }
              if (restoreScript) {
                select(value, restoreScript, e);
              } else {
                e.ka(value);
              }
            }
          }, e.a.bind(e));
        } catch (expectedHashCode) {
          e.a(expectedHashCode);
        }
      }
      /**
       * @return {undefined}
       */
      function w() {
        for (;yels.length;) {
          if (null != modId) {
            cancelAnimationFrame(modId);
            /** @type {null} */
            modId = null;
          }
          /** @type {Array} */
          var codeSegments = yels;
          /** @type {Array} */
          yels = [];
          /** @type {number} */
          var i = 0;
          for (;i < codeSegments.length;++i) {
            codeSegments[i]();
          }
        }
      }
      /**
       * @return {?}
       */
      function tryIt() {
        return 0;
      }
      /**
       * @return {undefined}
       */
      function cancelAnimationFrame() {
      }
      /**
       * @return {?}
       */
      function node() {
        return{
          droppedVideoFrames : this.webkitDroppedFrameCount,
          totalVideoFrames : this.webkitDecodedFrameCount,
          corruptedVideoFrames : 0,
          creationTime : NaN,
          totalFrameDelay : 0
        };
      }
      /**
       * @param {number} dataAndEvents
       * @param {number} opt_attributes
       * @param {string} childrenVarArgs
       * @return {?}
       */
      function createDom(dataAndEvents, opt_attributes, childrenVarArgs) {
        return new global.TextTrackCue(dataAndEvents, opt_attributes, childrenVarArgs);
      }
      /**
       * @param {string} d
       * @param {number} cell
       * @param {string} property
       * @return {?}
       */
      function value(d, cell, property) {
        return new global.TextTrackCue(d + "-" + cell + "-" + property, d, cell, property);
      }
      /**
       * @param {?} time
       * @param {?} end
       * @param {?} lang
       * @return {undefined}
       */
      function format(time, end, lang) {
        this.startTime = time;
        this.endTime = end;
        this.l = lang;
        /** @type {null} */
        this.position = null;
        /** @type {string} */
        this.i = AUTO;
        /** @type {number} */
        this.size = 100;
        /** @type {string} */
        this.f = CENTER;
        /** @type {number} */
        this.b = b;
        /** @type {number} */
        this.g = v;
        /** @type {null} */
        this.c = null;
        /** @type {string} */
        this.I = "";
        /** @type {string} */
        this.h = h;
        /** @type {string} */
        this.j = j;
        /** @type {string} */
        this.B = this.m = this.s = "";
        /** @type {number} */
        this.D = D;
        /** @type {string} */
        this.C = NORMAL;
        /** @type {string} */
        this.w = "";
        /** @type {Array} */
        this.a = [];
        /** @type {boolean} */
        this.O = true;
        /** @type {string} */
        this.id = "";
      }
      /**
       * @return {undefined}
       */
      function pdataCur() {
      }
      /**
       * @param {?} expectedHashCode
       * @return {?}
       */
      function parseNode(expectedHashCode) {
        /** @type {Array} */
        var ret = [];
        if (!expectedHashCode) {
          return ret;
        }
        var children = expectedHashCode.childNodes;
        /** @type {number} */
        var i = 0;
        for (;i < children.length;i++) {
          /** @type {boolean} */
          var elems = "span" == children[i].nodeName && "p" == expectedHashCode.nodeName;
          if (!(children[i].nodeType != Node.ELEMENT_NODE)) {
            if (!("br" == children[i].nodeName)) {
              if (!elems) {
                elems = parseNode(children[i]);
                /** @type {Array} */
                ret = ret.concat(elems);
              }
            }
          }
        }
        return ret.length || ret.push(expectedHashCode), ret;
      }
      /**
       * @param {Node} element
       * @param {boolean} func
       * @return {undefined}
       */
      function convert(element, func) {
        var nodes = element.childNodes;
        /** @type {number} */
        var i = 0;
        for (;i < nodes.length;i++) {
          if ("br" == nodes[i].nodeName && 0 < i) {
            nodes[i - 1].textContent += "\n";
          } else {
            if (0 < nodes[i].childNodes.length) {
              convert(nodes[i], func);
            } else {
              if (func) {
                var string = (string = nodes[i].textContent.trim()).replace(/\s+/g, " ");
                nodes[i].textContent = string;
              }
            }
          }
        }
      }
      /**
       * @param {Node} object
       * @param {string} s
       * @return {undefined}
       */
      function validator(object, s) {
        var codeSegments = s.split(" ");
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          switch(codeSegments[i]) {
            case "underline":
              if (0 > object.a.indexOf("underline")) {
                object.a.push("underline");
              }
              break;
            case "noUnderline":
              if (0 <= object.a.indexOf("underline")) {
                validate(object.a, "underline");
              }
              break;
            case "lineThrough":
              if (0 > object.a.indexOf("lineThrough")) {
                object.a.push("lineThrough");
              }
              break;
            case "noLineThrough":
              if (0 <= object.a.indexOf("lineThrough")) {
                validate(object.a, "lineThrough");
              }
              break;
            case "overline":
              if (0 > object.a.indexOf("overline")) {
                object.a.push("overline");
              }
              break;
            case "noOverline":
              if (0 <= object.a.indexOf("overline")) {
                validate(object.a, "overline");
              }
            ;
          }
        }
      }
      /**
       * @param {Element} node
       * @param {boolean} ret
       * @param {Object} data
       * @param {string} index
       * @return {?}
       */
      function transform(node, ret, data, index) {
        return(node = traverseNode(node, data, index)) ? node : xor(ret, data, index);
      }
      /**
       * @param {Object} node
       * @param {Object} data
       * @param {string} index
       * @return {?}
       */
      function xor(node, data, index) {
        var codeSegments = parseNode(node);
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          var res = codeSegments[i].getAttribute(index);
          if (res) {
            return res;
          }
        }
        return(node = put(node, "style", data)) ? node.getAttribute(index) : null;
      }
      /**
       * @param {Element} node
       * @param {Object} data
       * @param {string} property
       * @return {?}
       */
      function traverseNode(node, data, property) {
        return(node = put(node, "style", data)) ? node.getAttribute(property) : null;
      }
      /**
       * @param {Object} n
       * @param {string} name
       * @param {Object} data
       * @return {?}
       */
      function put(n, name, data) {
        if (!n || 1 > data.length) {
          return null;
        }
        /** @type {null} */
        var entry = null;
        /** @type {Object} */
        var p = n;
        /** @type {null} */
        n = null;
        for (;p && (!(n = p.getAttribute(name)) && (p = p.parentNode) instanceof Element);) {
        }
        if (name = n) {
          /** @type {number} */
          n = 0;
          for (;n < data.length;n++) {
            if (data[n].getAttribute("xml:id") == name) {
              entry = data[n];
              break;
            }
          }
        }
        return entry;
      }
      /**
       * @param {?} text
       * @param {Object} value
       * @return {?}
       */
      function parseTime(text, value) {
        /** @type {null} */
        result = null;
        if (spaceRe.test(text)) {
          /** @type {(Array.<string>|null)} */
          var result = spaceRe.exec(text);
          /** @type {number} */
          var b = Number(result[1]);
          /** @type {number} */
          var h = Number(result[2]);
          /** @type {number} */
          var w = Number(result[3]);
          /** @type {number} */
          var t = Number(result[4]);
          /** @type {number} */
          t = t + (Number(result[5]) || 0) / value.b;
          /** @type {number} */
          w = w + t / value.frameRate;
          /** @type {number} */
          result = w + 60 * h + 3600 * b;
        } else {
          if (re.test(text)) {
            result = isNumber(re, text);
          } else {
            if (cx.test(text)) {
              result = isNumber(cx, text);
            } else {
              if (reName.test(text)) {
                /** @type {(Array.<string>|null)} */
                result = reName.exec(text);
                /** @type {number} */
                result = Number(result[1]) / value.frameRate;
              } else {
                if (rsingleTag.test(text)) {
                  /** @type {(Array.<string>|null)} */
                  result = rsingleTag.exec(text);
                  /** @type {number} */
                  result = Number(result[1]) / value.a;
                } else {
                  if (args.test(text)) {
                    result = isNumber(args, text);
                  }
                }
              }
            }
          }
        }
        return result;
      }
      /**
       * @param {RegExp} o
       * @param {?} value
       * @return {?}
       */
      function isNumber(o, value) {
        var values = o.exec(value);
        return values && "" != values[0] ? (Number(values[4]) || 0) / 1E3 + (Number(values[3]) || 0) + 60 * (Number(values[2]) || 0) + 3600 * (Number(values[1]) || 0) : null;
      }
      /**
       * @param {Object} a
       * @param {?} type
       * @param {?} name
       * @param {?} i
       * @return {undefined}
       */
      function getParam(a, type, name, i) {
        /** @type {number} */
        this.frameRate = Number(a) || 30;
        /** @type {number} */
        this.b = Number(type) || 1;
        /** @type {number} */
        this.a = Number(i);
        if (!this.a) {
          /** @type {number} */
          this.a = a ? this.frameRate * this.b : 1;
        }
        if (name) {
          if (a = /^(\d+) (\d+)$/g.exec(name)) {
            this.frameRate *= a[1] / a[2];
          }
        }
      }
      /**
       * @return {undefined}
       */
      function className() {
        this.a = new pdataCur;
      }
      /**
       * @return {undefined}
       */
      function ctorA() {
      }
      /**
       * @param {Object} node
       * @param {?} value
       * @return {undefined}
       */
      function center(node, value) {
        var type;
        if (type = /^align:(start|middle|center|end|left|right)$/.exec(value)) {
          /** @type {string} */
          type = type[1];
          node.f = "middle" == type ? CENTER : KEY_NAMES[type.toUpperCase()];
        } else {
          if (type = /^vertical:(lr|rl)$/.exec(value)) {
            /** @type {number} */
            node.b = "lr" == type[1] ? m : y;
          } else {
            if (type = /^size:([\d\.]+)%$/.exec(value)) {
              /** @type {number} */
              node.size = Number(type[1]);
            } else {
              if (type = /^position:([\d\.]+)%(?:,(line-left|line-right|center|start|end))?$/.exec(value)) {
                /** @type {number} */
                node.position = Number(type[1]);
                if (type[2]) {
                  /** @type {string} */
                  type = type[2];
                  /** @type {string} */
                  node.i = "line-left" == type || "start" == type ? "line-left" : "line-right" == type || "end" == type ? "line-right" : "center";
                }
              } else {
                if (type = /^line:([\d\.]+)%(?:,(start|end|center))?$/.exec(value)) {
                  /** @type {number} */
                  node.g = g;
                  /** @type {number} */
                  node.c = Number(type[1]);
                  if (type[2]) {
                    node.h = textNodes[type[2].toUpperCase()];
                  }
                } else {
                  if (type = /^line:(-?\d+)(?:,(start|end|center))?$/.exec(value)) {
                    /** @type {number} */
                    node.g = v;
                    /** @type {number} */
                    node.c = Number(type[1]);
                    if (type[2]) {
                      node.h = textNodes[type[2].toUpperCase()];
                    }
                  }
                }
              }
            }
          }
        }
      }
      /**
       * @param {Array} value
       * @return {?}
       */
      function sign(value) {
        if (!(value = encodeURIComponent(value, /(?:(\d{1,}):)?(\d{2}):(\d{2})\.(\d{3})/g))) {
          return null;
        }
        /** @type {number} */
        var w = Number(value[2]);
        /** @type {number} */
        var h = Number(value[3]);
        return 59 < w || 59 < h ? null : Number(value[4]) / 1E3 + h + 60 * w + 3600 * (Number(value[1]) || 0);
      }
      /**
       * @return {undefined}
       */
      function udataCur() {
        /** @type {null} */
        this.a = null;
      }
      /**
       * @param {string} data
       * @param {string} deepDataAndEvents
       * @param {string} isXML
       * @return {?}
       */
      function fetchData(data, deepDataAndEvents, isXML) {
        var selector;
        var config;
        var ev;
        return(new store).G("payl", close(function(duration) {
          selector = text(duration);
        })).G("iden", close(function(duration) {
          config = text(duration);
        })).G("sttg", close(function(duration) {
          ev = text(duration);
        })).parse(data), selector ? formatter(selector, config, ev, deepDataAndEvents, isXML) : null;
      }
      /**
       * @param {Object} node
       * @param {Object} v
       * @param {?} d
       * @param {string} deepDataAndEvents
       * @param {string} value
       * @return {?}
       */
      function formatter(node, v, d, deepDataAndEvents, value) {
        if (node = new format(deepDataAndEvents, value, node), v && (node.id = v), d) {
          v = new _overlap_interval(d);
          d = escape(v);
          for (;d;) {
            center(node, d);
            encodeURIComponent(v, /[ \t]+/gm);
            d = escape(v);
          }
        }
        return node;
      }
      var self;
      var Le = this;
      /** @type {boolean} */
      Le.Le = true;
      /**
       * @param {number} a
       * @return {?}
       */
      abc.prototype.getBandwidthEstimate = function(a) {
        return 128E3 > this.a ? a : Math.min(round(this.b), round(this.c));
      };
      run("shaka.util.Error", error);
      /**
       * @return {?}
       */
      error.prototype.toString = function() {
        return "shaka.util.Error " + JSON.stringify(this, null, "  ");
      };
      error.Severity = {
        RECOVERABLE : 1,
        CRITICAL : 2
      };
      error.Category = {
        NETWORK : 1,
        TEXT : 2,
        MEDIA : 3,
        MANIFEST : 4,
        STREAMING : 5,
        DRM : 6,
        PLAYER : 7,
        CAST : 8,
        STORAGE : 9
      };
      error.Code = {
        UNSUPPORTED_SCHEME : 1E3,
        BAD_HTTP_STATUS : 1001,
        HTTP_ERROR : 1002,
        TIMEOUT : 1003,
        MALFORMED_DATA_URI : 1004,
        UNKNOWN_DATA_URI_ENCODING : 1005,
        REQUEST_FILTER_ERROR : 1006,
        RESPONSE_FILTER_ERROR : 1007,
        INVALID_TEXT_HEADER : 2E3,
        INVALID_TEXT_CUE : 2001,
        UNABLE_TO_DETECT_ENCODING : 2003,
        BAD_ENCODING : 2004,
        INVALID_XML : 2005,
        INVALID_MP4_TTML : 2007,
        INVALID_MP4_VTT : 2008,
        BUFFER_READ_OUT_OF_BOUNDS : 3E3,
        JS_INTEGER_OVERFLOW : 3001,
        EBML_OVERFLOW : 3002,
        EBML_BAD_FLOATING_POINT_SIZE : 3003,
        MP4_SIDX_WRONG_BOX_TYPE : 3004,
        MP4_SIDX_INVALID_TIMESCALE : 3005,
        MP4_SIDX_TYPE_NOT_SUPPORTED : 3006,
        WEBM_CUES_ELEMENT_MISSING : 3007,
        WEBM_EBML_HEADER_ELEMENT_MISSING : 3008,
        WEBM_SEGMENT_ELEMENT_MISSING : 3009,
        WEBM_INFO_ELEMENT_MISSING : 3010,
        WEBM_DURATION_ELEMENT_MISSING : 3011,
        WEBM_CUE_TRACK_POSITIONS_ELEMENT_MISSING : 3012,
        WEBM_CUE_TIME_ELEMENT_MISSING : 3013,
        MEDIA_SOURCE_OPERATION_FAILED : 3014,
        MEDIA_SOURCE_OPERATION_THREW : 3015,
        VIDEO_ERROR : 3016,
        QUOTA_EXCEEDED_ERROR : 3017,
        UNABLE_TO_GUESS_MANIFEST_TYPE : 4E3,
        DASH_INVALID_XML : 4001,
        DASH_NO_SEGMENT_INFO : 4002,
        DASH_EMPTY_ADAPTATION_SET : 4003,
        DASH_EMPTY_PERIOD : 4004,
        DASH_WEBM_MISSING_INIT : 4005,
        DASH_UNSUPPORTED_CONTAINER : 4006,
        DASH_PSSH_BAD_ENCODING : 4007,
        DASH_NO_COMMON_KEY_SYSTEM : 4008,
        DASH_MULTIPLE_KEY_IDS_NOT_SUPPORTED : 4009,
        DASH_CONFLICTING_KEY_IDS : 4010,
        UNPLAYABLE_PERIOD : 4011,
        RESTRICTIONS_CANNOT_BE_MET : 4012,
        NO_PERIODS : 4014,
        HLS_PLAYLIST_HEADER_MISSING : 4015,
        INVALID_HLS_TAG : 4016,
        HLS_INVALID_PLAYLIST_HIERARCHY : 4017,
        DASH_DUPLICATE_REPRESENTATION_ID : 4018,
        HLS_MULTIPLE_MEDIA_INIT_SECTIONS_FOUND : 4020,
        HLS_COULD_NOT_GUESS_MIME_TYPE : 4021,
        HLS_MASTER_PLAYLIST_NOT_PROVIDED : 4022,
        HLS_REQUIRED_ATTRIBUTE_MISSING : 4023,
        HLS_REQUIRED_TAG_MISSING : 4024,
        HLS_COULD_NOT_GUESS_CODECS : 4025,
        HLS_KEYFORMATS_NOT_SUPPORTED : 4026,
        DASH_UNSUPPORTED_XLINK_ACTUATE : 4027,
        DASH_XLINK_DEPTH_LIMIT : 4028,
        HLS_LIVE_CONTENT_NOT_SUPPORTED : 4029,
        INVALID_STREAMS_CHOSEN : 5005,
        NO_RECOGNIZED_KEY_SYSTEMS : 6E3,
        REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE : 6001,
        FAILED_TO_CREATE_CDM : 6002,
        FAILED_TO_ATTACH_TO_VIDEO : 6003,
        INVALID_SERVER_CERTIFICATE : 6004,
        FAILED_TO_CREATE_SESSION : 6005,
        FAILED_TO_GENERATE_LICENSE_REQUEST : 6006,
        LICENSE_REQUEST_FAILED : 6007,
        LICENSE_RESPONSE_REJECTED : 6008,
        ENCRYPTED_CONTENT_WITHOUT_DRM_INFO : 6010,
        NO_LICENSE_SERVER_GIVEN : 6012,
        OFFLINE_SESSION_REMOVED : 6013,
        EXPIRED : 6014,
        LOAD_INTERRUPTED : 7E3,
        CAST_API_UNAVAILABLE : 8E3,
        NO_CAST_RECEIVERS : 8001,
        ALREADY_CASTING : 8002,
        UNEXPECTED_CAST_ERROR : 8003,
        CAST_CANCELED_BY_USER : 8004,
        CAST_CONNECTION_TIMED_OUT : 8005,
        CAST_RECEIVER_APP_UNAVAILABLE : 8006,
        STORAGE_NOT_SUPPORTED : 9E3,
        INDEXED_DB_ERROR : 9001,
        OPERATION_ABORTED : 9002,
        REQUESTED_ITEM_NOT_FOUND : 9003,
        MALFORMED_OFFLINE_URI : 9004,
        CANNOT_STORE_LIVE_OFFLINE : 9005,
        STORE_ALREADY_IN_PROGRESS : 9006,
        NO_INIT_DATA_FOR_OFFLINE : 9007,
        LOCAL_PLAYER_INSTANCE_REQUIRED : 9008,
        CONTENT_UNSUPPORTED_BY_BROWSER : 9009
      };
      /** @type {RegExp} */
      var expectedHashCode = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#(.*))?$/;
      /** @type {string} */
      (self = anonymous.prototype).ca = "";
      /** @type {string} */
      self.Ba = "";
      /** @type {string} */
      self.ha = "";
      /** @type {null} */
      self.Ia = null;
      /** @type {string} */
      self.$ = "";
      /** @type {string} */
      self.ua = "";
      /**
       * @return {?}
       */
      self.toString = function() {
        /** @type {Array} */
        var html = [];
        var pdataOld = this.ca;
        if (pdataOld && html.push(escapeHTML(pdataOld, r20, true), ":"), pdataOld = this.ha) {
          html.push("//");
          var text = this.Ba;
          if (text) {
            html.push(escapeHTML(text, r20, true), "@");
          }
          html.push(encodeURIComponent(pdataOld).replace(/%25([0-9a-fA-F]{2})/g, "%$1"));
          if (null != (pdataOld = this.Ia)) {
            html.push(":", String(pdataOld));
          }
        }
        return(pdataOld = this.$) && (this.ha && ("/" != pdataOld.charAt(0) && html.push("/")), html.push(escapeHTML(pdataOld, "/" == pdataOld.charAt(0) ? newlineRe : badChars, true))), (pdataOld = this.a.toString()) && html.push("?", pdataOld), (pdataOld = this.ua) && html.push("#", escapeHTML(pdataOld, rreturn)), html.join("");
      };
      /**
       * @param {Object} obj
       * @return {?}
       */
      self.resolve = function(obj) {
        var options = new anonymous(this);
        if ("data" === options.ca) {
          options = new anonymous;
        }
        /** @type {boolean} */
        var dataItem = !!obj.ca;
        if (dataItem) {
          extend(options, obj.ca);
        } else {
          /** @type {boolean} */
          dataItem = !!obj.Ba;
        }
        if (dataItem) {
          options.Ba = obj.Ba;
        } else {
          /** @type {boolean} */
          dataItem = !!obj.ha;
        }
        if (dataItem) {
          options.ha = obj.ha;
        } else {
          /** @type {boolean} */
          dataItem = null != obj.Ia;
        }
        text = obj.$;
        if (dataItem) {
          indexOf(options, obj.Ia);
        } else {
          if (dataItem = !!obj.$) {
            if ("/" != text.charAt(0) && (this.ha && !this.$ ? text = "/" + text : -1 != (lastSlashIndex = options.$.lastIndexOf("/")) && (text = options.$.substr(0, lastSlashIndex + 1) + text)), ".." == text || "." == text) {
              /** @type {string} */
              text = "";
            } else {
              if (-1 != text.indexOf("./") || -1 != text.indexOf("/.")) {
                /** @type {boolean} */
                var lastSlashIndex = !text.lastIndexOf("/", 0);
                var text = text.split("/");
                /** @type {Array} */
                var handles = [];
                /** @type {number} */
                var i = 0;
                for (;i < text.length;) {
                  var expectedHashCode = text[i++];
                  if ("." == expectedHashCode) {
                    if (lastSlashIndex) {
                      if (i == text.length) {
                        handles.push("");
                      }
                    }
                  } else {
                    if (".." == expectedHashCode) {
                      if (1 < handles.length || 1 == handles.length && "" != handles[0]) {
                        handles.pop();
                      }
                      if (lastSlashIndex) {
                        if (i == text.length) {
                          handles.push("");
                        }
                      }
                    } else {
                      handles.push(expectedHashCode);
                      /** @type {boolean} */
                      lastSlashIndex = true;
                    }
                  }
                }
                /** @type {string} */
                text = handles.join("/");
              }
            }
          }
        }
        return dataItem ? options.$ = text : dataItem = "" !== obj.a.toString(), dataItem ? clone(options, setMatrix(obj.a)) : dataItem = !!obj.ua, dataItem && (options.ua = obj.ua), options;
      };
      /** @type {RegExp} */
      var r20 = /[#\/\?@]/g;
      /** @type {RegExp} */
      var badChars = /[\#\?:]/g;
      /** @type {RegExp} */
      var newlineRe = /[\#\?]/g;
      /** @type {RegExp} */
      var rclass = /[\#\?@]/g;
      /** @type {RegExp} */
      var rreturn = /#/g;
      /** @type {null} */
      A.prototype.a = null;
      /** @type {null} */
      A.prototype.c = null;
      /**
       * @return {?}
       */
      A.prototype.toString = function() {
        if (this.b) {
          return this.b;
        }
        if (!this.a) {
          return "";
        }
        var filename;
        /** @type {Array} */
        var tagNameArr = [];
        for (filename in this.a) {
          /** @type {string} */
          var name = encodeURIComponent(filename);
          var codeSegments = this.a[filename];
          /** @type {number} */
          var i = 0;
          for (;i < codeSegments.length;i++) {
            /** @type {string} */
            var expectedHashCode = name;
            if ("" !== codeSegments[i]) {
              expectedHashCode += "=" + encodeURIComponent(codeSegments[i]);
            }
            tagNameArr.push(expectedHashCode);
          }
        }
        return this.b = tagNameArr.join("&");
      };
      run("shaka.net.NetworkingEngine", s);
      s.RequestType = {
        MANIFEST : 0,
        SEGMENT : 1,
        LICENSE : 2,
        APP : 3
      };
      var settings = {};
      /**
       * @param {?} key
       * @param {?} value
       * @return {undefined}
       */
      s.registerScheme = function(key, value) {
        settings[key] = value;
      };
      /**
       * @param {?} key2
       * @return {undefined}
       */
      s.unregisterScheme = function(key2) {
        delete settings[key2];
      };
      /**
       * @param {?} expectedHashCode
       * @return {undefined}
       */
      s.prototype.Ud = function(expectedHashCode) {
        this.b.push(expectedHashCode);
      };
      /** @type {function (?): undefined} */
      s.prototype.registerRequestFilter = s.prototype.Ud;
      /**
       * @param {(number|string)} a
       * @return {undefined}
       */
      s.prototype.Ce = function(a) {
        var b = this.b;
        if (0 <= (a = b.indexOf(a))) {
          b.splice(a, 1);
        }
      };
      /** @type {function ((number|string)): undefined} */
      s.prototype.unregisterRequestFilter = s.prototype.Ce;
      /**
       * @return {undefined}
       */
      s.prototype.Oc = function() {
        /** @type {Array} */
        this.b = [];
      };
      /** @type {function (): undefined} */
      s.prototype.clearAllRequestFilters = s.prototype.Oc;
      /**
       * @param {?} expectedHashCode
       * @return {undefined}
       */
      s.prototype.Vd = function(expectedHashCode) {
        this.c.push(expectedHashCode);
      };
      /** @type {function (?): undefined} */
      s.prototype.registerResponseFilter = s.prototype.Vd;
      /**
       * @param {(number|string)} start
       * @return {undefined}
       */
      s.prototype.De = function(start) {
        var arr = this.c;
        if (0 <= (start = arr.indexOf(start))) {
          arr.splice(start, 1);
        }
      };
      /** @type {function ((number|string)): undefined} */
      s.prototype.unregisterResponseFilter = s.prototype.De;
      /**
       * @return {undefined}
       */
      s.prototype.Pc = function() {
        /** @type {Array} */
        this.c = [];
      };
      /** @type {function (): undefined} */
      s.prototype.clearAllResponseFilters = s.prototype.Pc;
      /**
       * @return {?}
       */
      s.prototype.o = function() {
        /** @type {boolean} */
        this.f = true;
        /** @type {Array} */
        this.b = [];
        /** @type {Array} */
        this.c = [];
        /** @type {Array} */
        var nodeArgs = [];
        /** @type {number} */
        var i = 0;
        for (;i < this.a.length;++i) {
          nodeArgs.push(this.a[i].catch(paths));
        }
        return Promise.all(nodeArgs);
      };
      /** @type {function (): ?} */
      s.prototype.destroy = s.prototype.o;
      /**
       * @param {number} recurring
       * @param {Object} options
       * @return {?}
       */
      s.prototype.request = function(recurring, options) {
        if (this.f) {
          return Promise.reject();
        }
        options.method = options.method || "GET";
        options.headers = options.headers || {};
        options.retryParameters = options.retryParameters ? $(options.retryParameters) : random();
        options.uris = $(options.uris);
        /** @type {number} */
        var n = Date.now();
        var expectedHashCode = Promise.resolve();
        return this.b.forEach(function(Events) {
          expectedHashCode = expectedHashCode.then(Events.bind(null, recurring, options));
        }), expectedHashCode = expectedHashCode.catch(function(dataAndEvents) {
          throw new error(2, 1, 1006, dataAndEvents);
        }), expectedHashCode = expectedHashCode.then(function() {
          /** @type {number} */
          var restoreScript = Date.now() - n;
          var message = new calcPoint(options.retryParameters);
          return pipe(message).then(function() {
            return write(this, recurring, options, message, 0, restoreScript);
          }.bind(this));
        }.bind(this)), this.a.push(expectedHashCode), expectedHashCode.then(function(event) {
          return 0 <= this.a.indexOf(expectedHashCode) && this.a.splice(this.a.indexOf(expectedHashCode), 1), this.g && (!event.fromCache && (1 == recurring && this.g(event.timeMs, event.data.byteLength))), event;
        }.bind(this)).catch(function(error) {
          return error && (error.severity = 2), 0 <= this.a.indexOf(expectedHashCode) && this.a.splice(this.a.indexOf(expectedHashCode), 1), Promise.reject(error);
        }.bind(this));
      };
      /** @type {function (number, Object): ?} */
      s.prototype.request = s.prototype.request;
      /**
       * @param {?} expectedHashCode
       * @param {?} value
       * @return {undefined}
       */
      that.prototype.push = function(expectedHashCode, value) {
        if (this.a.hasOwnProperty(expectedHashCode)) {
          this.a[expectedHashCode].push(value);
        } else {
          /** @type {Array} */
          this.a[expectedHashCode] = [value];
        }
      };
      /**
       * @param {?} expectedHashCode
       * @return {?}
       */
      that.prototype.get = function(expectedHashCode) {
        return(expectedHashCode = this.a[expectedHashCode]) ? expectedHashCode.slice() : null;
      };
      /**
       * @param {?} keepData
       * @param {?} key
       * @return {undefined}
       */
      that.prototype.remove = function(keepData, key) {
        var drop = this.a[keepData];
        if (drop) {
          /** @type {number} */
          var i = 0;
          for (;i < drop.length;++i) {
            if (drop[i] == key) {
              drop.splice(i, 1);
              --i;
            }
          }
        }
      };
      /**
       * @return {?}
       */
      Image.prototype.o = function() {
        return clean(this), this.a = null, Promise.resolve();
      };
      /**
       * @param {?} keepData
       * @param {?} expectedHashCode
       * @return {undefined}
       */
      Image.prototype.la = function(keepData, expectedHashCode) {
        if (this.a) {
          var codeSegments = this.a.get(expectedHashCode) || [];
          /** @type {number} */
          var i = 0;
          for (;i < codeSegments.length;++i) {
            var camelKey = codeSegments[i];
            if (camelKey.target == keepData) {
              camelKey.la();
              this.a.remove(expectedHashCode, camelKey);
            }
          }
        }
      };
      /**
       * @return {undefined}
       */
      Buffer.prototype.la = function() {
        this.target.removeEventListener(this.type, this.a, false);
        /** @type {null} */
        this.a = this.target = null;
      };
      /** @type {number} */
      var delta = 1 / 15;
      var p = {
        codecs : "codecs",
        frameRate : "framerate",
        bandwidth : "bitrate",
        width : "width",
        height : "height",
        channelsCount : "channels"
      };
      run("shaka.util.StringUtils.fromUTF8", text);
      run("shaka.util.StringUtils.fromUTF16", decode);
      run("shaka.util.StringUtils.fromBytesAutoDetect", append);
      run("shaka.util.StringUtils.toUTF8", encode);
      /**
       * @return {undefined}
       */
      group.prototype.cancel = function() {
        if (null != this.a) {
          clearTimeout(this.a);
          /** @type {null} */
          this.a = null;
        }
      };
      run("shaka.util.Uint8ArrayUtils.toBase64", require);
      run("shaka.util.Uint8ArrayUtils.fromBase64", reset);
      run("shaka.util.Uint8ArrayUtils.fromHex", c);
      run("shaka.util.Uint8ArrayUtils.toHex", cycle);
      run("shaka.util.Uint8ArrayUtils.equal", drag);
      run("shaka.util.Uint8ArrayUtils.concat", function(dataAndEvents) {
        /** @type {number} */
        var array = 0;
        /** @type {number} */
        var i = 0;
        for (;i < arguments.length;++i) {
          array += arguments[i].length;
        }
        /** @type {Uint8Array} */
        array = new Uint8Array(array);
        /** @type {number} */
        var pdataCur = 0;
        /** @type {number} */
        i = 0;
        for (;i < arguments.length;++i) {
          array.set(arguments[i], pdataCur);
          pdataCur += arguments[i].length;
        }
        return array;
      });
      /**
       * @return {?}
       */
      (self = load.prototype).o = function() {
        /** @type {boolean} */
        this.c = true;
        var nodeArgs = this.a.map(function(that) {
          return(that.da.close() || Promise.resolve()).catch(paths);
        });
        return this.i.reject(), this.f && nodeArgs.push(this.f.o()), this.l && nodeArgs.push(this.l.setMediaKeys(null).catch(paths)), this.I && (clearInterval(this.I), this.I = null), this.B && this.B.cancel(), this.f = this.l = this.j = this.s = this.b = this.B = null, this.a = [], this.m = [], this.na = this.g = this.h = this.ga = null, Promise.all(nodeArgs);
      };
      /**
       * @param {?} value
       * @return {undefined}
       */
      self.configure = function(value) {
        this.h = value;
      };
      /**
       * @param {?} url
       * @param {boolean} depMaps
       * @return {?}
       */
      self.init = function(url, depMaps) {
        var options = {};
        /** @type {Array} */
        var selector = [];
        return this.fa = depMaps, this.m = url.offlineSessionIds, subscribe(this, url, depMaps || 0 < url.offlineSessionIds.length, options, selector), selector.length ? init(this, options, selector) : (this.D = true, Promise.resolve());
      };
      /**
       * @return {?}
       */
      self.keySystem = function() {
        return this.b ? this.b.keySystem : "";
      };
      /**
       * @return {?}
       */
      self.jb = function() {
        var applyArgs = this.a.map(function(state) {
          return state = state.da.expiration, isNaN(state) ? 1 / 0 : state;
        });
        return Math.min.apply(Math, applyArgs);
      };
      /**
       * @param {?} obj
       * @return {undefined}
       */
      self.pd = function(obj) {
        /** @type {Uint8Array} */
        var files = new Uint8Array(obj.initData);
        /** @type {number} */
        var i = 0;
        for (;i < this.a.length;++i) {
          if (drag(files, this.a[i].initData)) {
            return;
          }
        }
        cb(this, obj.initDataType, files);
      };
      /**
       * @param {?} expectedHashCode
       * @return {undefined}
       */
      self.pc = function(expectedHashCode) {
        if (this.h.delayLicenseRequestUntilPlayed && (this.l.paused && !this.O)) {
          this.C.push(expectedHashCode);
        } else {
          send(this, expectedHashCode);
        }
      };
      /**
       * @param {Object} result
       * @return {undefined}
       */
      self.jc = function(result) {
        result = result.target;
        var i;
        /** @type {number} */
        i = 0;
        for (;i < this.a.length && this.a[i].da != result;++i) {
        }
        if (i != this.a.length) {
          /** @type {boolean} */
          var fourDigitImageWidth = false;
          result.keyStatuses.forEach(function(prev, data) {
            if ("string" == typeof data) {
              /** @type {string} */
              var view = data;
              /** @type {string} */
              data = prev;
              /** @type {string} */
              prev = view;
            }
            if ("com.microsoft.playready" == this.b.keySystem && 16 == data.byteLength) {
              /** @type {number} */
              var value = (view = new DataView(data)).getUint32(0, true);
              /** @type {number} */
              var block_align = view.getUint16(4, true);
              /** @type {number} */
              var udataCur = view.getUint16(6, true);
              view.setUint32(0, value, false);
              view.setUint16(4, block_align, false);
              view.setUint16(6, udataCur, false);
            }
            if ("com.microsoft.playready" == this.b.keySystem) {
              if ("status-pending" == prev) {
                /** @type {string} */
                prev = "usable";
              }
            }
            if ("status-pending" != prev) {
              /** @type {boolean} */
              this.a[i].loaded = true;
              if (this.a.every(function(element) {
                return element.loaded;
              })) {
                this.i.resolve();
              }
            }
            if ("expired" == prev) {
              /** @type {boolean} */
              fourDigitImageWidth = true;
            }
            view = cycle(new Uint8Array(data));
            /** @type {string} */
            this.w[view] = prev;
          }.bind(this));
          /** @type {number} */
          var windowWidth = result.expiration - Date.now();
          if (0 > windowWidth || fourDigitImageWidth && 1E3 > windowWidth) {
            if (!this.a[i].ma) {
              this.a.splice(i, 1);
              result.close();
            }
          }
          throttled(this.B);
        }
      };
      /**
       * @return {undefined}
       */
      self.Td = function() {
        if (!echo(this.w)) {
          if (sameOptions(this.w, function(deepDataAndEvents, dataAndEvents) {
            return "expired" == dataAndEvents;
          })) {
            this.g(new error(2, 6, 6014));
          }
        }
        this.sa(this.w);
      };
      /**
       * @return {undefined}
       */
      self.zd = function() {
        /** @type {number} */
        var i = 0;
        for (;i < this.C.length;i++) {
          send(this, this.C[i]);
        }
        /** @type {boolean} */
        this.O = true;
        /** @type {Array} */
        this.C = [];
      };
      /**
       * @return {undefined}
       */
      self.Sd = function() {
        this.a.forEach(function(event) {
          var related = event.Eb;
          var pdataOld = event.da.expiration;
          if (isNaN(pdataOld)) {
            /** @type {number} */
            pdataOld = 1 / 0;
          }
          if (pdataOld != related) {
            this.na(event.da.sessionId, pdataOld);
            event.Eb = pdataOld;
          }
        }.bind(this));
      };
      var params = {};
      run("shaka.text.TextEngine.registerParser", fix);
      run("shaka.text.TextEngine.unregisterParser", function(urlParam) {
        delete params[urlParam];
      });
      /**
       * @return {?}
       */
      updateBarVisuals.prototype.o = function() {
        return this.c = this.f = null, Promise.resolve();
      };
      /**
       * @param {?} compiler
       * @return {undefined}
       */
      updateBarVisuals.prototype.ie = function(compiler) {
        this.c = compiler;
      };
      /** @type {function (?): undefined} */
      updateBarVisuals.prototype.setDisplayer = updateBarVisuals.prototype.ie;
      /**
       * @param {?} name
       * @param {?} key
       * @return {?}
       */
      updateBarVisuals.prototype.remove = function(name, key) {
        return Promise.resolve().then(function() {
          if (!!this.c) {
            if (!!this.c.remove(name, key)) {
              if (!(null == this.b)) {
                if (!(key <= this.b)) {
                  if (!(name >= this.a)) {
                    if (name <= this.b && key >= this.a) {
                      /** @type {null} */
                      this.b = this.a = null;
                    } else {
                      if (name <= this.b && key < this.a) {
                        this.b = key;
                      } else {
                        if (name > this.b) {
                          if (key >= this.a) {
                            this.a = name;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }.bind(this));
      };
      /**
       * @param {?} expectedHashCode
       * @return {undefined}
       */
      utils.prototype.parseInit = function(expectedHashCode) {
        this.Ra(expectedHashCode, 0, null, null);
      };
      /**
       * @param {?} expectedHashCode
       * @param {?} opt_attributes
       * @return {?}
       */
      utils.prototype.parseMedia = function(expectedHashCode, opt_attributes) {
        return this.Ra(expectedHashCode, opt_attributes.periodStart, opt_attributes.segmentStart, opt_attributes.segmentEnd);
      };
      /**
       * @return {?}
       */
      (self = Element.prototype).o = function() {
        /** @type {boolean} */
        this.i = true;
        var unlock;
        /** @type {Array} */
        var nodeArgs = [];
        for (unlock in this.b) {
          var codeSegments = this.b[unlock];
          var i = codeSegments[0];
          this.b[unlock] = codeSegments.slice(0, 1);
          if (i) {
            nodeArgs.push(i.p.catch(paths));
          }
          /** @type {number} */
          i = 1;
          for (;i < codeSegments.length;++i) {
            codeSegments[i].p.catch(paths);
            codeSegments[i].p.reject();
          }
        }
        return this.a && nodeArgs.push(this.a.o()), Promise.all(nodeArgs).then(function() {
          this.h.o();
          /** @type {null} */
          this.j = this.a = this.f = this.g = this.h = null;
          this.c = {};
          this.b = {};
        }.bind(this));
      };
      /**
       * @param {?} obj
       * @return {undefined}
       */
      self.init = function(obj) {
        var prop;
        for (prop in obj) {
          var val = isFunction((val = obj[prop]).mimeType, val.codecs);
          if ("text" == prop) {
            include(this, val);
          } else {
            val = this.f.addSourceBuffer(val);
            callback(this.h, val, "error", this.we.bind(this, prop));
            callback(this.h, val, "updateend", this.Ha.bind(this, prop));
            this.c[prop] = val;
            /** @type {Array} */
            this.b[prop] = [];
          }
        }
      };
      /**
       * @param {?} keepData
       * @param {?} key
       * @param {?} storageKey
       * @return {?}
       */
      self.remove = function(keepData, key, storageKey) {
        return "text" == keepData ? this.a.remove(key, storageKey) : fail(this, keepData, this.vc.bind(this, keepData, key, storageKey));
      };
      /**
       * @param {?} deepDataAndEvents
       * @return {?}
       */
      self.endOfStream = function(deepDataAndEvents) {
        return go(this, function() {
          if (deepDataAndEvents) {
            this.f.endOfStream(deepDataAndEvents);
          } else {
            this.f.endOfStream();
          }
        }.bind(this));
      };
      /**
       * @param {?} d
       * @return {?}
       */
      self.ea = function(d) {
        return go(this, function() {
          this.f.duration = d;
        }.bind(this));
      };
      /**
       * @return {?}
       */
      self.Y = function() {
        return this.f.duration;
      };
      /**
       * @param {?} k
       * @param {?} bytes
       * @return {undefined}
       */
      self.ve = function(k, bytes) {
        this.c[k].appendBuffer(bytes);
      };
      /**
       * @param {number} k
       * @param {?} key
       * @param {?} storageKey
       * @return {undefined}
       */
      self.vc = function(k, key, storageKey) {
        if (storageKey <= key) {
          this.Ha(k);
        } else {
          this.c[k].remove(key, storageKey);
        }
      };
      /**
       * @param {number} key
       * @return {undefined}
       */
      self.Kc = function(key) {
        var appendWindowEnd = this.c[key].appendWindowEnd;
        this.c[key].abort();
        this.c[key].appendWindowEnd = appendWindowEnd;
        this.Ha(key);
      };
      /**
       * @param {number} _super
       * @return {undefined}
       */
      self.Tc = function(_super) {
        this.g.currentTime -= 0.001;
        this.Ha(_super);
      };
      /**
       * @param {number} k
       * @param {?} dataAndEvents
       * @return {undefined}
       */
      self.ke = function(k, dataAndEvents) {
        this.c[k].timestampOffset = dataAndEvents;
        this.Ha(k);
      };
      /**
       * @param {number} k
       * @param {number} i
       * @return {undefined}
       */
      self.he = function(k, i) {
        this.c[k].appendWindowEnd = i + 0.04;
        this.Ha(k);
      };
      /**
       * @param {?} i
       * @return {undefined}
       */
      self.we = function(i) {
        this.b[i][0].p.reject(new error(2, 3, 3014, this.g.error ? this.g.error.code : 0));
      };
      /**
       * @param {number} b
       * @return {undefined}
       */
      self.Ha = function(b) {
        var obj = this.b[b][0];
        if (obj) {
          obj.p.resolve();
          eq(this, b);
        }
      };
      /** @type {number} */
      var requestFeedForFirstButton = 1;
      /** @type {number} */
      var pkgConfig = 2;
      var iso = {
        aar : "aa",
        abk : "ab",
        afr : "af",
        aka : "ak",
        alb : "sq",
        amh : "am",
        ara : "ar",
        arg : "an",
        arm : "hy",
        asm : "as",
        ava : "av",
        ave : "ae",
        aym : "ay",
        aze : "az",
        bak : "ba",
        bam : "bm",
        baq : "eu",
        bel : "be",
        ben : "bn",
        bih : "bh",
        bis : "bi",
        bod : "bo",
        bos : "bs",
        bre : "br",
        bul : "bg",
        bur : "my",
        cat : "ca",
        ces : "cs",
        cha : "ch",
        che : "ce",
        chi : "zh",
        chu : "cu",
        chv : "cv",
        cor : "kw",
        cos : "co",
        cre : "cr",
        cym : "cy",
        cze : "cs",
        dan : "da",
        deu : "de",
        div : "dv",
        dut : "nl",
        dzo : "dz",
        ell : "el",
        eng : "en",
        epo : "eo",
        est : "et",
        eus : "eu",
        ewe : "ee",
        fao : "fo",
        fas : "fa",
        fij : "fj",
        fin : "fi",
        fra : "fr",
        fre : "fr",
        fry : "fy",
        ful : "ff",
        geo : "ka",
        ger : "de",
        gla : "gd",
        gle : "ga",
        glg : "gl",
        glv : "gv",
        gre : "el",
        grn : "gn",
        guj : "gu",
        hat : "ht",
        hau : "ha",
        heb : "he",
        her : "hz",
        hin : "hi",
        hmo : "ho",
        hrv : "hr",
        hun : "hu",
        hye : "hy",
        ibo : "ig",
        ice : "is",
        ido : "io",
        iii : "ii",
        iku : "iu",
        ile : "ie",
        ina : "ia",
        ind : "id",
        ipk : "ik",
        isl : "is",
        ita : "it",
        jav : "jv",
        jpn : "ja",
        kal : "kl",
        kan : "kn",
        kas : "ks",
        kat : "ka",
        kau : "kr",
        kaz : "kk",
        khm : "km",
        kik : "ki",
        kin : "rw",
        kir : "ky",
        kom : "kv",
        kon : "kg",
        kor : "ko",
        kua : "kj",
        kur : "ku",
        lao : "lo",
        lat : "la",
        lav : "lv",
        lim : "li",
        lin : "ln",
        lit : "lt",
        ltz : "lb",
        lub : "lu",
        lug : "lg",
        mac : "mk",
        mah : "mh",
        mal : "ml",
        mao : "mi",
        mar : "mr",
        may : "ms",
        mkd : "mk",
        mlg : "mg",
        mlt : "mt",
        mon : "mn",
        mri : "mi",
        msa : "ms",
        mya : "my",
        nau : "na",
        nav : "nv",
        nbl : "nr",
        nde : "nd",
        ndo : "ng",
        nep : "ne",
        nld : "nl",
        nno : "nn",
        nob : "nb",
        nor : "no",
        nya : "ny",
        oci : "oc",
        oji : "oj",
        ori : "or",
        orm : "om",
        oss : "os",
        pan : "pa",
        per : "fa",
        pli : "pi",
        pol : "pl",
        por : "pt",
        pus : "ps",
        que : "qu",
        roh : "rm",
        ron : "ro",
        rum : "ro",
        run : "rn",
        rus : "ru",
        sag : "sg",
        san : "sa",
        sin : "si",
        slk : "sk",
        slo : "sk",
        slv : "sl",
        sme : "se",
        smo : "sm",
        sna : "sn",
        snd : "sd",
        som : "so",
        sot : "st",
        spa : "es",
        sqi : "sq",
        srd : "sc",
        srp : "sr",
        ssw : "ss",
        sun : "su",
        swa : "sw",
        swe : "sv",
        tah : "ty",
        tam : "ta",
        tat : "tt",
        tel : "te",
        tgk : "tg",
        tgl : "tl",
        tha : "th",
        tib : "bo",
        tir : "ti",
        ton : "to",
        tsn : "tn",
        tso : "ts",
        tuk : "tk",
        tur : "tr",
        twi : "tw",
        uig : "ug",
        ukr : "uk",
        urd : "ur",
        uzb : "uz",
        ven : "ve",
        vie : "vi",
        vol : "vo",
        wel : "cy",
        wln : "wa",
        wol : "wo",
        xho : "xh",
        yid : "yi",
        yor : "yo",
        zha : "za",
        zho : "zh",
        zul : "zu"
      };
      run("shaka.abr.SimpleAbrManager", Plugin);
      /**
       * @return {undefined}
       */
      Plugin.prototype.stop = function() {
        /** @type {null} */
        this.h = null;
        /** @type {boolean} */
        this.c = false;
        /** @type {Array} */
        this.g = [];
        /** @type {null} */
        this.f = null;
      };
      /** @type {function (): undefined} */
      Plugin.prototype.stop = Plugin.prototype.stop;
      /**
       * @param {?} value
       * @return {undefined}
       */
      Plugin.prototype.init = function(value) {
        this.h = value;
      };
      /** @type {function (?): undefined} */
      Plugin.prototype.init = Plugin.prototype.init;
      /**
       * @return {?}
       */
      Plugin.prototype.chooseVariant = function() {
        var codeSegments = getPostCodes(this.a.restrictions, this.g);
        var index = this.b.getBandwidthEstimate(this.a.defaultBandwidthEstimate);
        if (this.g.length && !codeSegments.length) {
          throw new error(2, 4, 4012);
        }
        var waitMsg = codeSegments[0] || null;
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;++i) {
          var a = codeSegments[i];
          /** @type {number} */
          var firingIndex = (codeSegments[i + 1] || {
            bandwidth : 1 / 0
          }).bandwidth / this.a.bandwidthUpgradeTarget;
          if (index >= a.bandwidth / this.a.bandwidthDowngradeTarget) {
            if (index <= firingIndex) {
              waitMsg = a;
            }
          }
        }
        return this.f = Date.now(), waitMsg;
      };
      /** @type {function (): ?} */
      Plugin.prototype.chooseVariant = Plugin.prototype.chooseVariant;
      /**
       * @return {undefined}
       */
      Plugin.prototype.enable = function() {
        /** @type {boolean} */
        this.c = true;
      };
      /** @type {function (): undefined} */
      Plugin.prototype.enable = Plugin.prototype.enable;
      /**
       * @return {undefined}
       */
      Plugin.prototype.disable = function() {
        /** @type {boolean} */
        this.c = false;
      };
      /** @type {function (): undefined} */
      Plugin.prototype.disable = Plugin.prototype.disable;
      /**
       * @param {number} deepDataAndEvents
       * @param {number} dataAndEvents
       * @return {undefined}
       */
      Plugin.prototype.segmentDownloaded = function(deepDataAndEvents, dataAndEvents) {
        var expectedHashCode = this.b;
        if (!(16E3 > dataAndEvents)) {
          /** @type {number} */
          var attempted = 8E3 * dataAndEvents / deepDataAndEvents;
          /** @type {number} */
          var classNames = deepDataAndEvents / 1E3;
          expectedHashCode.a += dataAndEvents;
          getColor(expectedHashCode.b, classNames, attempted);
          getColor(expectedHashCode.c, classNames, attempted);
        }
        if (null != this.f && this.c) {
          t: {
            if (this.i) {
              if (Date.now() - this.f < 1E3 * this.a.switchInterval) {
                break t;
              }
            } else {
              if (!(128E3 <= this.b.a)) {
                break t;
              }
              /** @type {boolean} */
              this.i = true;
            }
            expectedHashCode = this.chooseVariant();
            this.b.getBandwidthEstimate(this.a.defaultBandwidthEstimate);
            this.h(expectedHashCode);
          }
        }
      };
      /** @type {function (number, number): undefined} */
      Plugin.prototype.segmentDownloaded = Plugin.prototype.segmentDownloaded;
      /**
       * @return {?}
       */
      Plugin.prototype.getBandwidthEstimate = function() {
        return this.b.getBandwidthEstimate(this.a.defaultBandwidthEstimate);
      };
      /** @type {function (): ?} */
      Plugin.prototype.getBandwidthEstimate = Plugin.prototype.getBandwidthEstimate;
      /**
       * @param {Object} data
       * @return {undefined}
       */
      Plugin.prototype.setVariants = function(data) {
        /** @type {Object} */
        this.g = data;
      };
      /** @type {function (Object): undefined} */
      Plugin.prototype.setVariants = Plugin.prototype.setVariants;
      /**
       * @param {?} options
       * @return {undefined}
       */
      Plugin.prototype.configure = function(options) {
        this.a = options;
      };
      /** @type {function (?): undefined} */
      Plugin.prototype.configure = Plugin.prototype.configure;
      /**
       * @return {undefined}
       */
      EventObject.prototype.preventDefault = function() {
        if (this.cancelable) {
          /** @type {boolean} */
          this.defaultPrevented = true;
        }
      };
      /**
       * @return {undefined}
       */
      EventObject.prototype.stopImmediatePropagation = function() {
        /** @type {boolean} */
        this.a = true;
      };
      /**
       * @return {undefined}
       */
      EventObject.prototype.stopPropagation = function() {
      };
      /** @type {Array.<string>} */
      var middleware = "ended play playing pause pausing ratechange seeked seeking timeupdate volumechange".split(" ");
      /** @type {Array.<string>} */
      var failures = "buffered currentTime duration ended loop muted paused playbackRate seeking videoHeight videoWidth volume".split(" ");
      /** @type {Array} */
      var asserterNames = ["loop", "playbackRate"];
      /** @type {Array} */
      var ea = ["pause", "play"];
      /** @type {Array.<string>} */
      var array = "adaptation buffering emsg error loading unloading texttrackvisibility timelineregionadded timelineregionenter timelineregionexit trackschanged".split(" ");
      /** @type {Array.<string>} */
      var seen = "drmInfo getAudioLanguages getConfiguration getExpiration getManifestUri getPlaybackRate getTextLanguages getTextTracks getStats getVariantTracks isAudioOnly isBuffering isInProgress isLive isTextTrackVisible keySystem seekRange".split(" ");
      /** @type {Array} */
      var data = ["getPlayheadTimeAsDate", "getPresentationStartTimeAsDate"];
      /** @type {Array} */
      var assertions = [["getConfiguration", "configure"]];
      /** @type {Array} */
      var xs = [["isTextTrackVisible", "setTextTrackVisibility"]];
      /** @type {Array.<string>} */
      var excludes = "addTextTrack cancelTrickPlay configure resetConfiguration retryStreaming selectAudioLanguage selectTextLanguage selectTextTrack selectVariantTrack setTextTrackVisibility trickPlay".split(" ");
      /** @type {Array} */
      var unsupported = ["load", "unload"];
      /** @type {boolean} */
      var i = false;
      /**
       * @return {?}
       */
      (self = move.prototype).o = function() {
        return getPromise(this), this.a && (this.a.leave(function() {
        }, function() {
        }), this.a = null), this.C = this.B = this.h = null, this.c = this.i = false, this.g = this.f = this.b = this.j = null, Promise.resolve();
      };
      /**
       * @return {?}
       */
      self.Z = function() {
        return this.c;
      };
      /**
       * @return {?}
       */
      self.Kb = function() {
        return this.w;
      };
      /**
       * @return {undefined}
       */
      self.init = function() {
        if (global.chrome && (chrome.cast && chrome.cast.isAvailable)) {
          delete global.__onGCastApiAvailable;
          /** @type {boolean} */
          this.i = true;
          this.h();
          var first = new chrome.cast.SessionRequest(this.D);
          first = new chrome.cast.ApiConfig(first, this.qd.bind(this), this.Bd.bind(this), "origin_scoped");
          chrome.cast.initialize(first, function() {
          }, function() {
          });
          if (i) {
            setTimeout(this.h.bind(this), 20);
          }
        } else {
          global.__onGCastApiAvailable = function(dataAndEvents) {
            if (dataAndEvents) {
              this.init();
            }
          }.bind(this);
        }
      };
      /**
       * @param {?} deepDataAndEvents
       * @return {undefined}
       */
      self.Ob = function(deepDataAndEvents) {
        this.j = deepDataAndEvents;
        if (this.c) {
          createElement(this, {
            type : "appData",
            appData : this.j
          });
        }
      };
      /**
       * @param {string} value
       * @return {?}
       */
      self.cast = function(value) {
        return this.i ? i ? this.c ? Promise.reject(new error(1, 8, 8002)) : (this.g = new Point, chrome.cast.requestSession(this.Gb.bind(this, value), this.hc.bind(this)), this.g) : Promise.reject(new error(1, 8, 8001)) : Promise.reject(new error(1, 8, 8E3));
      };
      /**
       * @return {undefined}
       */
      self.ib = function() {
        if (this.c) {
          getPromise(this);
          if (this.a) {
            this.a.stop(function() {
            }, function() {
            });
            /** @type {null} */
            this.a = null;
          }
        }
      };
      /**
       * @param {?} expectedHashCode
       * @param {string} value
       * @return {?}
       */
      self.get = function(expectedHashCode, value) {
        if ("video" == expectedHashCode) {
          if (0 <= ea.indexOf(value)) {
            return this.uc.bind(this, expectedHashCode, value);
          }
        } else {
          if ("player" == expectedHashCode) {
            if (0 <= data.indexOf(value) && !this.get("player", "isLive")()) {
              return function() {
              };
            }
            if (0 <= excludes.indexOf(value)) {
              return this.uc.bind(this, expectedHashCode, value);
            }
            if (0 <= unsupported.indexOf(value)) {
              return this.Xd.bind(this, expectedHashCode, value);
            }
            if (0 <= seen.indexOf(value)) {
              return this.qc.bind(this, expectedHashCode, value);
            }
          }
        }
        return this.qc(expectedHashCode, value);
      };
      /**
       * @param {?} keepData
       * @param {Object} data
       * @param {?} value
       * @return {undefined}
       */
      self.set = function(keepData, data, value) {
        this.b[keepData][data] = value;
        createElement(this, {
          type : "set",
          targetName : keepData,
          property : data,
          value : value
        });
      };
      /**
       * @param {?} value
       * @param {?} deepDataAndEvents
       * @return {undefined}
       */
      self.Gb = function(value, deepDataAndEvents) {
        this.a = deepDataAndEvents;
        this.a.addUpdateListener(this.ic.bind(this));
        this.a.addMessageListener("urn:x-cast:com.google.shaka.v2", this.vd.bind(this));
        this.ic();
        createElement(this, {
          type : "init",
          initState : value,
          appData : this.j
        });
        this.g.resolve();
      };
      /**
       * @param {number} c
       * @return {undefined}
       */
      self.hc = function(c) {
        /** @type {number} */
        var msg = 8003;
        switch(c.code) {
          case "cancel":
            /** @type {number} */
            msg = 8004;
            break;
          case "timeout":
            /** @type {number} */
            msg = 8005;
            break;
          case "receiver_unavailable":
            /** @type {number} */
            msg = 8006;
        }
        this.g.reject(new error(2, 8, msg, c));
      };
      /**
       * @param {?} prop
       * @param {string} name
       * @return {?}
       */
      self.qc = function(prop, name) {
        return this.b[prop][name];
      };
      /**
       * @param {?} dataAndEvents
       * @param {string} action
       * @return {undefined}
       */
      self.uc = function(dataAndEvents, action) {
        createElement(this, {
          type : "call",
          targetName : dataAndEvents,
          methodName : action,
          args : Array.prototype.slice.call(arguments, 2)
        });
      };
      /**
       * @param {?} dataAndEvents
       * @param {string} action
       * @return {?}
       */
      self.Xd = function(dataAndEvents, action) {
        /** @type {Array.<?>} */
        var args = Array.prototype.slice.call(arguments, 2);
        var origin = new Point;
        var i = this.m.toString();
        return this.m++, this.f[i] = origin, createElement(this, {
          type : "asyncCall",
          targetName : dataAndEvents,
          methodName : action,
          args : args,
          id : i
        }), origin;
      };
      /**
       * @param {?} deepDataAndEvents
       * @return {undefined}
       */
      self.qd = function(deepDataAndEvents) {
        var udataCur = this.s();
        this.g = new Point;
        /** @type {boolean} */
        this.l = true;
        this.Gb(udataCur, deepDataAndEvents);
      };
      /**
       * @param {string} dataAndEvents
       * @return {undefined}
       */
      self.Bd = function(dataAndEvents) {
        /** @type {boolean} */
        i = "available" == dataAndEvents;
        this.h();
      };
      /**
       * @return {undefined}
       */
      self.ic = function() {
        /** @type {boolean} */
        var c = !!this.a && "connected" == this.a.status;
        if (this.c && !c) {
          this.C();
          var i;
          for (i in this.b) {
            this.b[i] = {};
          }
          getPromise(this);
        }
        this.w = (this.c = c) ? this.a.receiver.friendlyName : "";
        this.h();
      };
      /**
       * @param {?} dataAndEvents
       * @param {string} v
       * @return {undefined}
       */
      self.vd = function(dataAndEvents, v) {
        switch((d = isValid(v)).type) {
          case "event":
            var expectedHashCode = d.targetName;
            var s = d.event;
            this.B(expectedHashCode, new EventObject(s.type, s));
            break;
          case "update":
            s = d.update;
            for (expectedHashCode in s) {
              var d = this.b[expectedHashCode] || {};
              for (p in s[expectedHashCode]) {
                d[p] = s[expectedHashCode][p];
              }
            }
            if (this.l) {
              this.I();
              /** @type {boolean} */
              this.l = false;
            }
            break;
          case "asyncComplete":
            expectedHashCode = d.id;
            var p = d.error;
            if (d = this.f[expectedHashCode], delete this.f[expectedHashCode], d) {
              if (p) {
                expectedHashCode = new error(p.severity, p.category, p.code);
                for (s in p) {
                  expectedHashCode[s] = p[s];
                }
                d.reject(expectedHashCode);
              } else {
                d.resolve();
              }
            }
          ;
        }
      };
      /**
       * @param {?} expectedHashCode
       * @param {string} pdataOld
       * @return {undefined}
       */
      EventDispatcher.prototype.addEventListener = function(expectedHashCode, pdataOld) {
        this.ub.push(expectedHashCode, pdataOld);
      };
      /**
       * @param {?} events
       * @param {Object} type
       * @return {undefined}
       */
      EventDispatcher.prototype.removeEventListener = function(events, type) {
        this.ub.remove(events, type);
      };
      /**
       * @param {Object} event
       * @return {?}
       */
      EventDispatcher.prototype.dispatchEvent = function(event) {
        var codeSegments = this.ub.get(event.type) || [];
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;++i) {
          event.target = this.Za;
          event.currentTarget = this.Za;
          var listener = codeSegments[i];
          try {
            if (listener.handleEvent) {
              listener.handleEvent(event);
            } else {
              listener.call(this, event);
            }
          } catch (t) {
          }
          if (event.a) {
            break;
          }
        }
        return event.defaultPrevented;
      };
      __extends(Node);
      run("shaka.cast.CastProxy", Node);
      /**
       * @param {Object} value
       * @return {?}
       */
      Node.prototype.o = function(value) {
        return value && (this.a && this.a.ib()), value = [this.i ? this.i.o() : null, this.b ? this.b.o() : null, this.a ? this.a.o() : null], this.a = this.i = this.j = this.h = this.b = this.c = null, Promise.all(value);
      };
      /** @type {function (Object): ?} */
      Node.prototype.destroy = Node.prototype.o;
      /**
       * @return {?}
       */
      Node.prototype.gd = function() {
        return this.h;
      };
      /** @type {function (): ?} */
      Node.prototype.getVideo = Node.prototype.gd;
      /**
       * @return {?}
       */
      Node.prototype.Yc = function() {
        return this.j;
      };
      /** @type {function (): ?} */
      Node.prototype.getPlayer = Node.prototype.Yc;
      /**
       * @return {?}
       */
      Node.prototype.Lc = function() {
        return!!this.a && (this.a.i && i);
      };
      /** @type {function (): ?} */
      Node.prototype.canCast = Node.prototype.Lc;
      /**
       * @return {?}
       */
      Node.prototype.Z = function() {
        return!!this.a && this.a.Z();
      };
      /** @type {function (): ?} */
      Node.prototype.isCasting = Node.prototype.Z;
      /**
       * @return {?}
       */
      Node.prototype.Kb = function() {
        return this.a ? this.a.Kb() : "";
      };
      /** @type {function (): ?} */
      Node.prototype.receiverName = Node.prototype.Kb;
      /**
       * @return {?}
       */
      Node.prototype.cast = function() {
        var v = this.bc();
        return this.a.cast(v).then(function() {
          return this.b.qb();
        }.bind(this));
      };
      /** @type {function (): ?} */
      Node.prototype.cast = Node.prototype.cast;
      /**
       * @param {?} deepDataAndEvents
       * @return {undefined}
       */
      Node.prototype.Ob = function(deepDataAndEvents) {
        this.a.Ob(deepDataAndEvents);
      };
      /** @type {function (?): undefined} */
      Node.prototype.setAppData = Node.prototype.Ob;
      /**
       * @return {undefined}
       */
      Node.prototype.ze = function() {
        var that = this.a;
        if (that.c) {
          var copies = that.s();
          chrome.cast.requestSession(that.Gb.bind(that, copies), that.hc.bind(that));
        }
      };
      /** @type {function (): undefined} */
      Node.prototype.suggestDisconnect = Node.prototype.ze;
      /**
       * @return {undefined}
       */
      Node.prototype.ib = function() {
        this.a.ib();
      };
      /** @type {function (): undefined} */
      Node.prototype.forceDisconnect = Node.prototype.ib;
      /**
       * @return {?}
       */
      (self = Node.prototype).bc = function() {
        var self = {
          video : {},
          player : {},
          playerAfterLoad : {},
          manifest : this.b.fb,
          startTime : null
        };
        return this.c.pause(), asserterNames.forEach(function(k) {
          self.video[k] = this.c[k];
        }.bind(this)), this.c.ended || (self.startTime = this.c.currentTime), assertions.forEach(function(def) {
          var name = def[1];
          def = this.b[def[0]]();
          /** @type {(Object|number|string)} */
          self.player[name] = def;
        }.bind(this)), xs.forEach(function(def) {
          var name = def[1];
          def = this.b[def[0]]();
          /** @type {(Object|number|string)} */
          self.playerAfterLoad[name] = def;
        }.bind(this)), self;
      };
      /**
       * @return {undefined}
       */
      self.qe = function() {
        this.dispatchEvent(new EventObject("caststatuschanged"));
      };
      /**
       * @return {undefined}
       */
      self.re = function() {
        this.f.dispatchEvent(new EventObject(this.h.paused ? "pause" : "play"));
      };
      /**
       * @return {undefined}
       */
      self.te = function() {
        assertions.forEach(function(items) {
          var name = items[1];
          items = this.a.get("player", items[0])();
          this.b[name](items);
        }.bind(this));
        var url = this.a.get("player", "getManifestUri")();
        var elem = this.a.get("video", "ended");
        var n = Promise.resolve();
        var h = this.c.autoplay;
        /** @type {null} */
        var el = null;
        if (!elem) {
          el = this.a.get("video", "currentTime");
        }
        if (url) {
          /** @type {boolean} */
          this.c.autoplay = false;
          (n = this.b.load(url, el)).catch(function(err) {
            this.b.dispatchEvent(new EventObject("error", {
              detail : err
            }));
          }.bind(this));
        }
        var originalEvent = {};
        asserterNames.forEach(function(camelKey) {
          originalEvent[camelKey] = this.a.get("video", camelKey);
        }.bind(this));
        n.then(function() {
          asserterNames.forEach(function(prop) {
            this.c[prop] = originalEvent[prop];
          }.bind(this));
          xs.forEach(function(items) {
            var name = items[1];
            items = this.a.get("player", items[0])();
            this.b[name](items);
          }.bind(this));
          this.c.autoplay = h;
          if (url) {
            this.c.play();
          }
        }.bind(this));
      };
      /**
       * @param {string} camelKey
       * @return {?}
       */
      self.Ge = function(camelKey) {
        if ("addEventListener" == camelKey) {
          return this.f.addEventListener.bind(this.f);
        }
        if ("removeEventListener" == camelKey) {
          return this.f.removeEventListener.bind(this.f);
        }
        if (this.a.Z() && !Object.keys(this.a.b.video).length) {
          var fn = this.c[camelKey];
          if ("function" != typeof fn) {
            return fn;
          }
        }
        return this.a.Z() ? this.a.get("video", camelKey) : ("function" == typeof(fn = this.c[camelKey]) && (fn = fn.bind(this.c)), fn);
      };
      /**
       * @param {?} pdataCur
       * @param {?} value
       * @return {undefined}
       */
      self.Ie = function(pdataCur, value) {
        if (this.a.Z()) {
          this.a.set("video", pdataCur, value);
        } else {
          this.c[pdataCur] = value;
        }
      };
      /**
       * @param {Event} stat
       * @return {undefined}
       */
      self.He = function(stat) {
        if (!this.a.Z()) {
          this.f.dispatchEvent(new EventObject(stat.type, stat));
        }
      };
      /**
       * @param {string} camelKey
       * @return {?}
       */
      self.Qd = function(camelKey) {
        return "addEventListener" == camelKey ? this.g.addEventListener.bind(this.g) : "removeEventListener" == camelKey ? this.g.removeEventListener.bind(this.g) : "getMediaElement" == camelKey ? function() {
          return this.h;
        }.bind(this) : "getNetworkingEngine" == camelKey ? this.b.cc.bind(this.b) : this.a.Z() && (!Object.keys(this.a.b.video).length && 0 <= seen.indexOf(camelKey)) || !this.a.Z() ? (camelKey = this.b[camelKey]).bind(this.b) : this.a.get("player", camelKey);
      };
      /**
       * @param {string} endEvent
       * @return {undefined}
       */
      self.Rd = function(endEvent) {
        if (!this.a.Z()) {
          this.g.dispatchEvent(endEvent);
        }
      };
      /**
       * @param {string} dx
       * @param {string} event
       * @return {undefined}
       */
      self.se = function(dx, event) {
        if (this.a.Z()) {
          if ("video" == dx) {
            this.f.dispatchEvent(event);
          } else {
            if ("player" == dx) {
              this.g.dispatchEvent(event);
            }
          }
        }
      };
      __extends(World);
      run("shaka.cast.CastReceiver", World);
      /**
       * @return {?}
       */
      World.prototype.isConnected = function() {
        return this.i;
      };
      /** @type {function (): ?} */
      World.prototype.isConnected = World.prototype.isConnected;
      /**
       * @return {?}
       */
      World.prototype.kd = function() {
        return this.f;
      };
      /** @type {function (): ?} */
      World.prototype.isIdle = World.prototype.kd;
      /**
       * @return {?}
       */
      World.prototype.o = function() {
        var promise = this.b ? this.b.o() : Promise.resolve();
        return null != this.h && global.clearTimeout(this.h), this.l = this.j = this.b = this.a = null, this.i = false, this.f = true, this.h = this.g = this.c = null, promise.then(function() {
          cast.receiver.CastReceiverManager.getInstance().stop();
        });
      };
      /** @type {function (): ?} */
      World.prototype.destroy = World.prototype.o;
      /**
       * @return {undefined}
       */
      (self = World.prototype).oc = function() {
        /** @type {boolean} */
        this.i = !!cast.receiver.CastReceiverManager.getInstance().getSenders().length;
        focus(this);
      };
      /**
       * @param {?} n
       * @param {(RegExp|string)} name
       * @return {undefined}
       */
      self.rc = function(n, name) {
        this.Hb();
        func(this, {
          type : "event",
          targetName : n,
          event : name
        }, this.c);
      };
      /**
       * @return {undefined}
       */
      self.Hb = function() {
        if (null != this.h) {
          global.clearTimeout(this.h);
        }
        this.h = global.setTimeout(this.Hb.bind(this), 500);
        var self = {
          video : {},
          player : {}
        };
        failures.forEach(function(format) {
          self.video[format] = this.a[format];
        }.bind(this));
        /** @type {Array.<string>} */
        var message = seen;
        if (this.b.R()) {
          /** @type {Array} */
          message = message.concat(data);
        }
        message.forEach(function(i) {
          self.player[i] = this.b[i]();
        }.bind(this));
        if (message = cast.receiver.CastReceiverManager.getInstance().getSystemVolume()) {
          self.video.volume = message.level;
          self.video.muted = message.muted;
        }
        func(this, {
          type : "update",
          update : self
        }, this.c);
      };
      /**
       * @return {undefined}
       */
      self.Sc = function() {
        var message = cast.receiver.CastReceiverManager.getInstance().getSystemVolume();
        if (message) {
          func(this, {
            type : "update",
            update : {
              video : {
                volume : message.level,
                muted : message.muted
              }
            }
          }, this.c);
        }
        func(this, {
          type : "event",
          targetName : "video",
          event : {
            type : "volumechange"
          }
        }, this.c);
      };
      /**
       * @param {Element} entry
       * @return {undefined}
       */
      self.Ed = function(entry) {
        var data = isValid(entry.data);
        switch(data.type) {
          case "init":
            main(this, data.initState, data.appData);
            this.Hb();
            break;
          case "appData":
            this.l(data.appData);
            break;
          case "set":
            var t = data.targetName;
            var i = data.property;
            var args = data.value;
            if ("video" == t) {
              if (data = cast.receiver.CastReceiverManager.getInstance(), "volume" == i) {
                data.setSystemVolumeLevel(args);
                break;
              }
              if ("muted" == i) {
                data.setSystemVolumeMuted(args);
                break;
              }
            }
            this.j[t][i] = args;
            break;
          case "call":
            t = data.targetName;
            i = data.methodName;
            args = data.args;
            (t = this.j[t])[i].apply(t, args);
            break;
          case "asyncCall":
            t = data.targetName;
            i = data.methodName;
            args = data.args;
            data = data.id;
            entry = entry.senderId;
            (t = this.j[t])[i].apply(t, args).then(this.zc.bind(this, entry, data, null), this.zc.bind(this, entry, data));
        }
      };
      /**
       * @param {Object} id
       * @return {undefined}
       */
      self.rd = function(id) {
        var options = isValid(id.data);
        switch(options.type) {
          case "PLAY":
            this.a.play();
            ctor(this, 0);
            break;
          case "PAUSE":
            this.a.pause();
            ctor(this, 0);
            break;
          case "SEEK":
            id = options.currentTime;
            expectedHashCode = options.resumeState;
            if (null != id) {
              /** @type {number} */
              this.a.currentTime = Number(id);
            }
            if (expectedHashCode && "PLAYBACK_START" == expectedHashCode) {
              this.a.play();
              ctor(this, 0);
            } else {
              if (expectedHashCode) {
                if ("PLAYBACK_PAUSE" == expectedHashCode) {
                  this.a.pause();
                  ctor(this, 0);
                }
              }
            }
            break;
          case "STOP":
            this.b.qb().then(function() {
              ctor(this, 0);
            }.bind(this));
            break;
          case "GET_STATUS":
            ctor(this, Number(options.requestId));
            break;
          case "VOLUME":
            id = (expectedHashCode = options.volume).level;
            var expectedHashCode = expectedHashCode.muted;
            var volume = this.a.volume;
            var muted = this.a.muted;
            if (null != id) {
              /** @type {number} */
              this.a.volume = Number(id);
            }
            if (null != expectedHashCode) {
              this.a.muted = expectedHashCode;
            }
            if (!(volume == this.a.volume && muted == this.a.muted)) {
              ctor(this, 0);
            }
            break;
          case "LOAD":
            expectedHashCode = options.media.contentId;
            id = options.currentTime;
            var url = this.m(expectedHashCode);
            /** @type {boolean} */
            this.a.autoplay = true;
            this.b.load(url, id).then(function() {
              ctor(this, 0, {
                contentId : url,
                streamType : this.b.R() ? "LIVE" : "BUFFERED",
                contentType : ""
              });
            }.bind(this)).catch(function(error) {
              /** @type {string} */
              var paramType = "LOAD_FAILED";
              if (7 == error.category) {
                if (7E3 == error.code) {
                  /** @type {string} */
                  paramType = "LOAD_CANCELLED";
                }
              }
              func(this, {
                requestId : Number(options.requestId),
                type : paramType
              }, this.g);
            }.bind(this));
            break;
          default:
            func(this, {
              requestId : Number(options.requestId),
              type : "INVALID_REQUEST",
              reason : "INVALID_COMMAND"
            }, this.g);
        }
      };
      /**
       * @param {?} link
       * @param {string} term
       * @param {string} err
       * @return {undefined}
       */
      self.zc = function(link, term, err) {
        func(this, {
          type : "asyncComplete",
          id : term,
          error : err
        }, this.c, link);
      };
      var response = {
        IDLE : "IDLE",
        Ic : "PLAYING",
        Gc : "BUFFERING",
        Hc : "PAUSED"
      };
      var properties = {
        "urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b" : "org.w3.clearkey",
        "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed" : "com.widevine.alpha",
        "urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95" : "com.microsoft.playready",
        "urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb" : "com.adobe.primetime"
      };
      run("shaka.media.InitSegmentReference", inject);
      run("shaka.media.SegmentReference", complete);
      run("shaka.util.DataViewReader", Vector);
      /** @type {number} */
      var mat = 1;
      Vector.Endianness = {
        Je : 0,
        Qe : mat
      };
      /**
       * @return {?}
       */
      Vector.prototype.ba = function() {
        return this.v < this.L.byteLength;
      };
      /** @type {function (): ?} */
      Vector.prototype.hasMoreData = Vector.prototype.ba;
      /**
       * @return {?}
       */
      Vector.prototype.$c = function() {
        return this.v;
      };
      /** @type {function (): ?} */
      Vector.prototype.getPosition = Vector.prototype.$c;
      /**
       * @return {?}
       */
      Vector.prototype.Vc = function() {
        return this.L.byteLength;
      };
      /** @type {function (): ?} */
      Vector.prototype.getLength = Vector.prototype.Vc;
      /**
       * @return {?}
       */
      Vector.prototype.Jb = function() {
        try {
          var absv = this.L.getUint8(this.v);
        } catch (t) {
          charAt();
        }
        return this.v += 1, absv;
      };
      /** @type {function (): ?} */
      Vector.prototype.readUint8 = Vector.prototype.Jb;
      /**
       * @return {?}
       */
      Vector.prototype.tc = function() {
        try {
          var absv = this.L.getUint16(this.v, this.a);
        } catch (t) {
          charAt();
        }
        return this.v += 2, absv;
      };
      /** @type {function (): ?} */
      Vector.prototype.readUint16 = Vector.prototype.tc;
      /**
       * @return {?}
       */
      Vector.prototype.F = function() {
        try {
          var absv = this.L.getUint32(this.v, this.a);
        } catch (t) {
          charAt();
        }
        return this.v += 4, absv;
      };
      /** @type {function (): ?} */
      Vector.prototype.readUint32 = Vector.prototype.F;
      /**
       * @return {?}
       */
      Vector.prototype.sc = function() {
        try {
          var absv = this.L.getInt32(this.v, this.a);
        } catch (t) {
          charAt();
        }
        return this.v += 4, absv;
      };
      /** @type {function (): ?} */
      Vector.prototype.readInt32 = Vector.prototype.sc;
      /**
       * @return {?}
       */
      Vector.prototype.Ta = function() {
        try {
          if (this.a) {
            var b = this.L.getUint32(this.v, true);
            var c = this.L.getUint32(this.v + 4, true);
          } else {
            c = this.L.getUint32(this.v, false);
            b = this.L.getUint32(this.v + 4, false);
          }
        } catch (t) {
          charAt();
        }
        if (2097151 < c) {
          throw new error(2, 3, 3001);
        }
        return this.v += 8, c * Math.pow(2, 32) + b;
      };
      /** @type {function (): ?} */
      Vector.prototype.readUint64 = Vector.prototype.Ta;
      /**
       * @param {number} size
       * @return {?}
       */
      Vector.prototype.Ja = function(size) {
        if (this.v + size > this.L.byteLength) {
          charAt();
        }
        var array = this.L.buffer.slice(this.v, this.v + size);
        return this.v += size, new Uint8Array(array);
      };
      /** @type {function (number): ?} */
      Vector.prototype.readBytes = Vector.prototype.Ja;
      /**
       * @param {number} opt_attributes
       * @return {undefined}
       */
      Vector.prototype.J = function(opt_attributes) {
        if (this.v + opt_attributes > this.L.byteLength) {
          charAt();
        }
        this.v += opt_attributes;
      };
      /** @type {function (number): undefined} */
      Vector.prototype.skip = Vector.prototype.J;
      /**
       * @return {?}
       */
      Vector.prototype.Ib = function() {
        var recurring = this.v;
        for (;this.ba() && this.L.getUint8(this.v);) {
          this.v += 1;
        }
        return recurring = this.L.buffer.slice(recurring, this.v), this.v += 1, text(recurring);
      };
      /** @type {function (): ?} */
      Vector.prototype.readTerminatedString = Vector.prototype.Ib;
      run("shaka.util.Mp4Parser", store);
      /**
       * @param {string} data
       * @param {Function} obj
       * @return {?}
       */
      store.prototype.G = function(data, obj) {
        var i = index(data);
        return this.b[i] = 0, this.a[i] = obj, this;
      };
      /** @type {function (string, Function): ?} */
      store.prototype.box = store.prototype.G;
      /**
       * @param {string} arr
       * @param {Function} obj
       * @return {?}
       */
      store.prototype.aa = function(arr, obj) {
        var i = index(arr);
        return this.b[i] = 1, this.a[i] = obj, this;
      };
      /** @type {function (string, Function): ?} */
      store.prototype.fullBox = store.prototype.aa;
      /**
       * @param {string} data
       * @return {undefined}
       */
      store.prototype.parse = function(data) {
        data = new Vector(new DataView(data), 0);
        for (;data.ba();) {
          this.nb(0, data);
        }
      };
      /** @type {function (string): undefined} */
      store.prototype.parse = store.prototype.parse;
      /**
       * @param {?} tagName
       * @param {Object} data
       * @return {undefined}
       */
      store.prototype.nb = function(tagName, data) {
        var start = data.v;
        var length = data.F();
        var i = data.F();
        switch(length) {
          case 0:
            /** @type {number} */
            length = data.L.byteLength - start;
            break;
          case 1:
            length = data.Ta();
        }
        var win = this.a[i];
        if (win) {
          /** @type {null} */
          var CORDOVA_JS_BUILD_LABEL = null;
          /** @type {null} */
          var ac = null;
          if (1 == this.b[i]) {
            ac = data.F();
            /** @type {number} */
            CORDOVA_JS_BUILD_LABEL = ac >>> 24;
            ac &= 16777215;
          }
          i = 0 < (i = start + length - data.v) ? data.Ja(i).buffer : new ArrayBuffer(0);
          win({
            Ra : this,
            version : CORDOVA_JS_BUILD_LABEL,
            ac : ac,
            u : i = new Vector(new DataView(i), 0),
            size : length,
            start : start + tagName
          });
        } else {
          data.J(start + length - data.v);
        }
      };
      /** @type {function (?, Object): undefined} */
      store.prototype.parseNext = store.prototype.nb;
      /** @type {function (?): undefined} */
      store.children = results;
      /** @type {function (?): undefined} */
      store.sampleDescription = prefixed;
      /** @type {function (Function): ?} */
      store.allData = close;
      run("shaka.media.SegmentIndex", List);
      /**
       * @return {?}
       */
      List.prototype.o = function() {
        return this.a = null, Promise.resolve();
      };
      /** @type {function (): ?} */
      List.prototype.destroy = List.prototype.o;
      /**
       * @param {?} t
       * @return {?}
       */
      List.prototype.find = function(t) {
        /** @type {number} */
        var index = this.a.length - 1;
        for (;0 <= index;--index) {
          var node = this.a[index];
          if (t >= node.startTime && t < node.endTime) {
            return node.position;
          }
        }
        return this.a.length && t < this.a[0].startTime ? this.a[0].position : null;
      };
      /** @type {function (?): ?} */
      List.prototype.find = List.prototype.find;
      /**
       * @param {?} expectedHashCode
       * @return {?}
       */
      List.prototype.get = function(expectedHashCode) {
        return this.a.length ? 0 > (expectedHashCode -= this.a[0].position) || expectedHashCode >= this.a.length ? null : this.a[expectedHashCode] : null;
      };
      /** @type {function (?): ?} */
      List.prototype.get = List.prototype.get;
      /**
       * @param {Array} b
       * @return {undefined}
       */
      List.prototype.lb = function(b) {
        var i;
        var a;
        var expectedHashCode;
        /** @type {Array} */
        var e = [];
        /** @type {number} */
        var bi = i = 0;
        for (;i < this.a.length && bi < b.length;) {
          a = this.a[i];
          expectedHashCode = b[bi];
          if (a.startTime < expectedHashCode.startTime) {
            e.push(a);
            i++;
          } else {
            if (!(a.startTime > expectedHashCode.startTime)) {
              if (0.1 < Math.abs(a.endTime - expectedHashCode.endTime)) {
                expectedHashCode = new complete(a.position, expectedHashCode.startTime, expectedHashCode.endTime, expectedHashCode.a, expectedHashCode.V, expectedHashCode.K);
                e.push(expectedHashCode);
              } else {
                e.push(a);
              }
              i++;
            }
            bi++;
          }
        }
        for (;i < this.a.length;) {
          e.push(this.a[i++]);
        }
        if (e.length) {
          i = e[e.length - 1].position + 1;
          for (;bi < b.length;) {
            expectedHashCode = b[bi++];
            expectedHashCode = new complete(i++, expectedHashCode.startTime, expectedHashCode.endTime, expectedHashCode.a, expectedHashCode.V, expectedHashCode.K);
            e.push(expectedHashCode);
          }
        } else {
          /** @type {Array} */
          e = b;
        }
        this.a = e;
      };
      /** @type {function (Array): undefined} */
      List.prototype.merge = List.prototype.lb;
      /**
       * @param {number} val
       * @return {undefined}
       */
      List.prototype.wb = function(val) {
        /** @type {number} */
        var i = 0;
        for (;i < this.a.length && !(this.a[i].endTime > val);++i) {
        }
        this.a.splice(0, i);
      };
      /** @type {function (number): undefined} */
      List.prototype.evict = List.prototype.wb;
      var resultItems;
      /**
       * @return {?}
       */
      Uint8Array.prototype.ba = function() {
        return this.a.ba();
      };
      /**
       * @param {string} data
       * @param {Object} options
       * @param {?} template
       * @param {number} node
       * @return {?}
       */
      Transform.prototype.parse = function(data, options, template, node) {
        var b;
        if (options = new Uint8Array(new DataView(options)), 440786851 != jQuery(options).id) {
          throw new error(2, 3, 3008);
        }
        var that = jQuery(options);
        if (408125543 != that.id) {
          throw new error(2, 3, 3009);
        }
        options = that.a.byteOffset;
        that = new Uint8Array(that.a);
        /** @type {null} */
        b = null;
        for (;that.ba();) {
          var l = jQuery(that);
          if (357149030 == l.id) {
            b = l;
            break;
          }
        }
        if (!b) {
          throw new error(2, 3, 3010);
        }
        that = new Uint8Array(b.a);
        /** @type {number} */
        b = 1E6;
        /** @type {null} */
        l = null;
        for (;that.ba();) {
          var x = jQuery(that);
          if (2807729 == x.id) {
            b = parseFloat(x);
          } else {
            if (17545 == x.id) {
              if (4 == (l = x).a.byteLength) {
                l = l.a.getFloat32(0);
              } else {
                if (8 != l.a.byteLength) {
                  throw new error(2, 3, 3003);
                }
                l = l.a.getFloat64(0);
              }
            }
          }
        }
        if (null == l) {
          throw new error(2, 3, 3011);
        }
        if (that = b / 1E9, b = l * that, 475249515 != (data = jQuery(new Uint8Array(new DataView(data)))).id) {
          throw new error(2, 3, 3007);
        }
        return highlight(data, options, that, b, template, node);
      };
      var object = {};
      var flags = {};
      run("shaka.media.ManifestParser.registerParserByExtension", function(key, value) {
        flags[key] = value;
      });
      run("shaka.media.ManifestParser.registerParserByMime", function(key, val) {
        object[key] = val;
      });
      run("shaka.media.PresentationTimeline", item);
      /**
       * @return {?}
       */
      item.prototype.Y = function() {
        return this.a;
      };
      /** @type {function (): ?} */
      item.prototype.getDuration = item.prototype.Y;
      /**
       * @param {number} a
       * @return {undefined}
       */
      item.prototype.ea = function(a) {
        /** @type {number} */
        this.a = a;
      };
      /** @type {function (number): undefined} */
      item.prototype.setDuration = item.prototype.ea;
      /**
       * @return {?}
       */
      item.prototype.ad = function() {
        return this.c;
      };
      /** @type {function (): ?} */
      item.prototype.getPresentationStartTime = item.prototype.ad;
      /**
       * @param {?} deepDataAndEvents
       * @return {undefined}
       */
      item.prototype.Bc = function(deepDataAndEvents) {
        this.i = deepDataAndEvents;
      };
      /** @type {function (?): undefined} */
      item.prototype.setClockOffset = item.prototype.Bc;
      /**
       * @param {boolean} h
       * @return {undefined}
       */
      item.prototype.ob = function(h) {
        /** @type {boolean} */
        this.h = h;
      };
      /** @type {function (boolean): undefined} */
      item.prototype.setStatic = item.prototype.ob;
      /**
       * @return {?}
       */
      item.prototype.cd = function() {
        return this.f;
      };
      /** @type {function (): ?} */
      item.prototype.getSegmentAvailabilityDuration = item.prototype.cd;
      /**
       * @param {?} f
       * @return {undefined}
       */
      item.prototype.Dc = function(f) {
        this.f = f;
      };
      /** @type {function (?): undefined} */
      item.prototype.setSegmentAvailabilityDuration = item.prototype.Dc;
      /**
       * @param {?} j
       * @return {undefined}
       */
      item.prototype.Cc = function(j) {
        this.j = j;
      };
      /** @type {function (?): undefined} */
      item.prototype.setDelay = item.prototype.Cc;
      /**
       * @param {number} mayParseLabeledStatementInstead
       * @param {(Object|string)} data
       * @return {undefined}
       */
      item.prototype.Ga = function(mayParseLabeledStatementInstead, data) {
        if (data.length) {
          this.b = data.reduce(function(minValue, testStatus) {
            return Math.max(minValue, testStatus.endTime - testStatus.startTime);
          }, this.b);
        }
      };
      /** @type {function (number, (Object|string)): undefined} */
      item.prototype.notifySegments = item.prototype.Ga;
      /**
       * @param {?} rh
       * @return {undefined}
       */
      item.prototype.Cb = function(rh) {
        /** @type {number} */
        this.b = Math.max(this.b, rh);
      };
      /** @type {function (?): undefined} */
      item.prototype.notifyMaxSegmentDuration = item.prototype.Cb;
      /**
       * @return {?}
       */
      item.prototype.R = function() {
        return 1 / 0 == this.a && !this.h;
      };
      /** @type {function (): ?} */
      item.prototype.isLive = item.prototype.R;
      /**
       * @return {?}
       */
      item.prototype.wa = function() {
        return 1 / 0 != this.a && !this.h;
      };
      /** @type {function (): ?} */
      item.prototype.isInProgress = item.prototype.wa;
      /**
       * @return {?}
       */
      item.prototype.ia = function() {
        return this.Da(0);
      };
      /** @type {function (): ?} */
      item.prototype.getSegmentAvailabilityStart = item.prototype.ia;
      /**
       * @param {number} count
       * @return {?}
       */
      item.prototype.Da = function(count) {
        if (1 / 0 == this.f) {
          return this.g;
        }
        var len = this.va();
        return Math.max(this.g, Math.min(len - this.f + count, len));
      };
      /** @type {function (number): ?} */
      item.prototype.getSafeAvailabilityStart = item.prototype.Da;
      /**
       * @param {?} value
       * @return {undefined}
       */
      item.prototype.Ac = function(value) {
        this.g = value;
      };
      /** @type {function (?): undefined} */
      item.prototype.setAvailabilityStart = item.prototype.Ac;
      /**
       * @return {?}
       */
      item.prototype.va = function() {
        return this.R() || this.wa() ? Math.min(Math.max(0, (Date.now() + this.i) / 1E3 - this.b - this.c), this.a) : this.a;
      };
      /** @type {function (): ?} */
      item.prototype.getSegmentAvailabilityEnd = item.prototype.va;
      /**
       * @return {?}
       */
      item.prototype.kb = function() {
        return Math.max(0, this.va() - (this.R() || this.wa() ? this.j : 0));
      };
      /** @type {function (): ?} */
      item.prototype.getSeekRangeEnd = item.prototype.kb;
      run("shaka.dash.DashParser", proxy);
      /**
       * @param {?} s
       * @return {undefined}
       */
      (self = proxy.prototype).configure = function(s) {
        this.b = s;
      };
      /**
       * @param {?} expectedHashCode
       * @param {string} value
       * @return {?}
       */
      self.start = function(expectedHashCode, value) {
        return this.g = [expectedHashCode], this.a = value, find(this).then(function() {
          return this.a && onChange(this, 0), this.c;
        }.bind(this));
      };
      /**
       * @return {?}
       */
      self.stop = function() {
        return this.b = this.a = null, this.g = [], this.c = null, this.i = [], this.j = {}, null != this.f && (global.clearTimeout(this.f), this.f = null), Promise.resolve();
      };
      /**
       * @return {undefined}
       */
      self.update = function() {
        find(this).catch(function(env) {
          if (this.a) {
            this.a.onError(env);
          }
        }.bind(this));
      };
      /**
       * @return {undefined}
       */
      self.onExpirationUpdated = function() {
      };
      /**
       * @param {?} res
       * @param {Node} elem
       * @return {?}
       */
      self.Md = function(res, elem) {
        res.U = onload(elem, res.W, null);
        /** @type {boolean} */
        var r20 = false;
        var text = (data = filter(elem, "Role")).map(function(results) {
          return results.getAttribute("value");
        }).filter(el);
        var out = void 0;
        if ("text" == res.U.contentType) {
          /** @type {string} */
          out = "subtitle";
        }
        /** @type {number} */
        var i = 0;
        for (;i < data.length;i++) {
          if (null == (encodedValue = data[i].getAttribute("schemeIdUri")) || "urn:mpeg:dash:role:2011" == encodedValue) {
            switch(encodedValue = data[i].getAttribute("value")) {
              case "main":
                /** @type {boolean} */
                r20 = true;
                break;
              case "caption":
              ;
              case "subtitle":
                out = encodedValue;
            }
          }
        }
        /** @type {null} */
        var isFunction = null;
        /** @type {boolean} */
        var s = false;
        if (filter(elem, "EssentialProperty").forEach(function(results) {
          if ("http://dashif.org/guidelines/trickmode" == results.getAttribute("schemeIdUri")) {
            isFunction = results.getAttribute("value");
          } else {
            /** @type {boolean} */
            s = true;
          }
        }), s) {
          return null;
        }
        var doc = copy(data = filter(elem, "ContentProtection"), this.b.dash.customScheme, this.b.dash.ignoreDrmInfo);
        var data = toString(elem.getAttribute("lang") || "und");
        var encodedValue = elem.getAttribute("label");
        if (!(text = (i = filter(elem, "Representation")).map(this.Pd.bind(this, res, doc, out, data, encodedValue, r20, text)).filter(function(dataAndEvents) {
          return!!dataAndEvents;
        })).length) {
          throw new error(2, 4, 4003);
        }
        return res.U.contentType && "application" != res.U.contentType || (res.U.contentType = off(text[0].mimeType, text[0].codecs), text.forEach(function(c) {
          c.type = res.U.contentType;
        })), text.forEach(function(evt) {
          doc.drmInfos.forEach(function($httpProvider) {
            if (evt.keyId) {
              $httpProvider.keyIds.push(evt.keyId);
            }
          });
        }), out = i.map(function(elem) {
          return elem.getAttribute("id");
        }).filter(el), {
          id : res.U.id || "__fake__" + this.h++,
          contentType : res.U.contentType,
          language : data,
          Ab : r20,
          streams : text,
          drmInfos : doc.drmInfos,
          Tb : isFunction,
          Yd : out
        };
      };
      /**
       * @param {Date} node
       * @param {?} options
       * @param {string} kind
       * @param {Function} language
       * @param {string} lab
       * @param {boolean} primary
       * @param {Object} roles
       * @param {string} data
       * @return {?}
       */
      self.Pd = function(node, options, kind, language, lab, primary, roles, data) {
        if (node.A = onload(data, node.U, null), !_done(node.A)) {
          return null;
        }
        node.bandwidth = debug(data, "bandwidth", id) || 0;
        var arg = this.Zd.bind(this);
        if (node.A.Ua) {
          arg = range(node, arg);
        } else {
          if (node.A.pa) {
            arg = loop(node, this.j);
          } else {
            if (node.A.Va) {
              arg = Game(node, arg, this.j, !!this.c);
            } else {
              var X = node.A.X;
              var e = node.S.duration || 0;
              arg = {
                createSegmentIndex : Promise.resolve.bind(Promise),
                /**
                 * @param {number} idx
                 * @return {?}
                 */
                findSegmentPosition : function(idx) {
                  return 0 <= idx && idx < e ? 1 : null;
                },
                /**
                 * @param {number} wanted
                 * @return {?}
                 */
                getSegmentReference : function(wanted) {
                  return 1 != wanted ? null : new complete(1, 0, e, function() {
                    return X;
                  }, 0, null);
                },
                initSegmentReference : null,
                presentationTimeOffset : 0
              };
            }
          }
        }
        return data = filter(data, "ContentProtection"), data = search(data, this.b.dash.customScheme, options, this.b.dash.ignoreDrmInfo), {
          id : this.h++,
          createSegmentIndex : arg.createSegmentIndex,
          /** @type {function (number): ?} */
          findSegmentPosition : arg.findSegmentPosition,
          /** @type {function (number): ?} */
          getSegmentReference : arg.getSegmentReference,
          initSegmentReference : arg.initSegmentReference,
          presentationTimeOffset : arg.presentationTimeOffset,
          mimeType : node.A.mimeType,
          codecs : node.A.codecs,
          frameRate : node.A.frameRate,
          bandwidth : node.bandwidth,
          width : node.A.width,
          height : node.A.height,
          kind : kind,
          encrypted : 0 < options.drmInfos.length,
          keyId : data,
          /** @type {Function} */
          language : language,
          label : lab,
          type : node.U.contentType,
          primary : primary,
          trickModeVideo : null,
          containsEmsgBoxes : node.A.containsEmsgBoxes,
          roles : roles,
          channelsCount : node.A.Db
        };
      };
      /**
       * @return {undefined}
       */
      self.ue = function() {
        /** @type {null} */
        this.f = null;
        /** @type {number} */
        var t = Date.now();
        find(this).then(function() {
          if (this.a) {
            onChange(this, (Date.now() - t) / 1E3);
          }
        }.bind(this)).catch(function(err) {
          if (this.a) {
            /** @type {number} */
            err.severity = 1;
            this.a.onError(err);
            onChange(this, 0);
          }
        }.bind(this));
      };
      /**
       * @param {number} s
       * @param {number} len
       * @param {Node} data
       * @return {undefined}
       */
      self.Od = function(s, len, data) {
        var endpoint = data.getAttribute("schemeIdUri") || "";
        var x = data.getAttribute("value") || "";
        var duration = debug(data, "timescale", insert) || 1;
        filter(data, "Event").forEach(function(data) {
          var time = debug(data, "presentationTime", insert) || 0;
          var width = debug(data, "duration", insert) || 0;
          width = (time = time / duration + s) + width / duration;
          if (null != len) {
            /** @type {number} */
            time = Math.min(time, s + len);
            /** @type {number} */
            width = Math.min(width, s + len);
          }
          data = {
            schemeIdUri : endpoint,
            value : x,
            startTime : time,
            endTime : width,
            id : data.getAttribute("id") || "",
            eventElement : data
          };
          this.a.onTimelineRegionAdded(data);
        }.bind(this));
      };
      /**
       * @param {Object} args
       * @param {string} tp
       * @param {string} descr
       * @return {?}
       */
      self.Zd = function(args, tp, descr) {
        return args = shift(args, this.b.retryParameters), null != tp && (args.headers.Range = "bytes=" + tp + "-" + (null != descr ? descr : "")), this.a.networkingEngine.request(1, args).then(function(messageEvent) {
          return messageEvent.data;
        });
      };
      /** @type {function (): undefined} */
      flags.mpd = proxy;
      /** @type {function (): undefined} */
      object["application/dash+xml"] = proxy;
      /**
       * @return {?}
       */
      Benchmark.prototype.toString = function() {
        return this.value ? "#" + this.name + ":" + this.value : 0 < this.a.length ? "#" + this.name + ":" + this.a.map(function(exception) {
          return exception.name + '="' + exception.value + '"';
        }).join(",") : "#" + this.name;
      };
      /**
       * @param {string} value
       * @return {?}
       */
      Benchmark.prototype.getAttribute = function(value) {
        var $current_el = this.a.filter(function(match) {
          return match.name == value;
        });
        return $current_el.length ? $current_el[0] : null;
      };
      /** @type {Array.<string>} */
      var names = "EXT-X-TARGETDURATION EXT-X-MEDIA-SEQUENCE EXT-X-DISCONTINUITY-SEQUENCE EXT-X-PLAYLIST-TYPE EXT-X-MAP EXT-X-I-FRAMES-ONLY EXT-X-ENDLIST".split(" ");
      /** @type {Array.<string>} */
      var textOnly = "EXTINF EXT-X-BYTERANGE EXT-X-DISCONTINUITY EXT-X-PROGRAM-DATE-TIME EXT-X-KEY EXT-X-DATERANGE".split(" ");
      run("shaka.net.DataUriPlugin", module);
      /**
       * @param {string} data
       * @return {?}
       */
      module.parse = function(data) {
        if (2 > (options = data.split(":")).length || "data" != options[0]) {
          throw new error(2, 1, 1004, data);
        }
        if (2 > (options = options.slice(1).join(":").split(",")).length) {
          throw new error(2, 1, 1004, data);
        }
        var source = options[0];
        var options = global.decodeURIComponent(options.slice(1).join(","));
        /** @type {null} */
        var member = null;
        if (1 < (source = source.split(";")).length && (member = source[1]), "base64" == member) {
          data = reset(options).buffer;
        } else {
          if (member) {
            throw new error(2, 1, 1005, data);
          }
          data = encode(options);
        }
        return{
          data : data,
          contentType : source[0]
        };
      };
      /** @type {function (?): ?} */
      settings.data = module;
      run("shaka.hls.HlsParser", val);
      /**
       * @param {?} value
       * @return {undefined}
       */
      (self = val.prototype).configure = function(value) {
        this.h = value;
      };
      /**
       * @param {?} expectedHashCode
       * @param {string} value
       * @return {?}
       */
      self.start = function(expectedHashCode, value) {
        return this.b = value, this.m = expectedHashCode, apply(this, expectedHashCode).then(function(ec) {
          return execute(this, ec.data, expectedHashCode).then(function() {
            return after(this, this.c), this.B;
          }.bind(this));
        }.bind(this));
      };
      /**
       * @return {?}
       */
      self.stop = function() {
        return this.h = this.b = null, this.g = {}, this.C = {}, this.B = null, Promise.resolve();
      };
      /**
       * @return {?}
       */
      self.update = function() {
        if (this.f) {
          /** @type {Array} */
          var ret = [];
          /** @type {Array.<string>} */
          var diffs = Object.keys(this.s);
          /** @type {number} */
          var x = 0;
          for (;x < diffs.length;x++) {
            /** @type {string} */
            var i = diffs[x];
            ret.push(push(this, this.s[i], i));
          }
          return Promise.all(ret);
        }
      };
      /**
       * @return {undefined}
       */
      self.onExpirationUpdated = function() {
      };
      var types = {
        audio : [/^vorbis$/, /^opus$/, /^flac$/, /^mp4a/, /^[ae]c-3$/],
        video : [/^avc/, /^hev/, /^hvc/, /^vp0?[89]/, /^av1$/],
        text : [/^vtt$/, /^wvtt/, /^stpp/]
      };
      var obj = {
        audio : {
          mp4 : "audio/mp4",
          m4s : "audio/mp4",
          m4i : "audio/mp4",
          m4a : "audio/mp4",
          ts : "video/mp2t"
        },
        video : {
          mp4 : "video/mp4",
          m4s : "video/mp4",
          m4i : "video/mp4",
          m4v : "video/mp4",
          ts : "video/mp2t"
        },
        text : {
          mp4 : "application/mp4",
          m4s : "application/mp4",
          m4i : "application/mp4",
          vtt : "text/vtt",
          ttml : "application/ttml+xml"
        }
      };
      /**
       * @return {undefined}
       */
      val.prototype.I = function() {
        if (this.b) {
          /** @type {null} */
          this.i = null;
          this.update().then(function() {
            after(this, this.c);
          }.bind(this)).catch(function(err) {
            if (this.b) {
              /** @type {number} */
              err.severity = 1;
              this.b.onError(err);
              after(this, 0);
            }
          }.bind(this));
        }
      };
      var methods = {
        /**
         * @param {string} el
         * @return {?}
         */
        "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed" : function(el) {
          if ("SAMPLE-AES-CENC" != getAttribute(el, "METHOD")) {
            return null;
          }
          var value = getAttribute(el, "URI");
          value = module.parse(value);
          value = token("com.widevine.alpha", [{
            initDataType : "cenc",
            initData : value = new Uint8Array(value.data)
          }]);
          return(el = promote(el, "KEYID")) && (value.keyIds = [el.substr(2).toLowerCase()]), value;
        }
      };
      /** @type {function (): undefined} */
      flags.m3u8 = val;
      /** @type {function (): undefined} */
      object["application/x-mpegurl"] = val;
      /** @type {function (): undefined} */
      object["application/vnd.apple.mpegurl"] = val;
      /**
       * @return {?}
       */
      (self = Color.prototype).o = function() {
        var e = this.b.o();
        return this.b = null, null != this.f && (global.clearInterval(this.f), this.f = null), null != this.j && (global.clearInterval(this.j), this.j = null), this.D = this.I = this.l = this.c = this.a = null, e;
      };
      /**
       * @return {?}
       */
      self.xb = function() {
        return this.g;
      };
      /**
       * @return {undefined}
       */
      self.Fb = function() {
        /** @type {boolean} */
        this.m = true;
        this.mc();
      };
      /**
       * @return {undefined}
       */
      self.Ad = function() {
        var g = this.h || 0 > this.g ? 0 : this.g;
        if (this.a.playbackRate) {
          if (this.a.playbackRate != g) {
            startDrag(this, this.a.playbackRate);
          }
        }
      };
      /**
       * @return {undefined}
       */
      self.kc = function() {
        var startTime = detect(this);
        if (0.001 > Math.abs(this.a.currentTime - startTime)) {
          callback(this.b, this.a, "seeking", this.nc.bind(this));
          callback(this.b, this.a, "playing", this.lc.bind(this));
        } else {
          match(this.b, this.a, "seeking", this.Cd.bind(this));
          this.a.currentTime = startTime;
        }
      };
      /**
       * @return {undefined}
       */
      self.Cd = function() {
        callback(this.b, this.a, "seeking", this.nc.bind(this));
        callback(this.b, this.a, "playing", this.lc.bind(this));
      };
      /**
       * @return {undefined}
       */
      self.mc = function() {
        if (this.a.readyState) {
          if (this.a.readyState != this.C) {
            /** @type {boolean} */
            this.i = false;
            this.C = this.a.readyState;
          }
          var program = this.l.smallGapLimit;
          var width = this.a.currentTime;
          var value = this.a.buffered;
          if (width < this.c.presentationTimeline.ia()) {
            value = max(this, width);
            isReady(this, width, value);
          } else {
            t: {
              if (value && (value.length && !(1 == value.length && 1E-6 > value.end(0) - value.start(0)))) {
                /** @type {number} */
                var expectedHashCode = 0.1;
                if (/(Edge\/|Trident\/|Tizen)/.test(navigator.userAgent)) {
                  /** @type {number} */
                  expectedHashCode = 0.5;
                }
                /** @type {number} */
                var i = 0;
                for (;i < value.length;i++) {
                  if (value.start(i) > width && (!i || value.end(i - 1) - width <= expectedHashCode)) {
                    /** @type {number} */
                    expectedHashCode = i;
                    break t;
                  }
                }
              }
              /** @type {null} */
              expectedHashCode = null;
            }
            if (null == expectedHashCode) {
              if (3 > this.a.readyState && 0 < this.a.playbackRate) {
                if (this.w != width) {
                  this.w = width;
                  /** @type {number} */
                  this.O = Date.now();
                  /** @type {boolean} */
                  this.s = false;
                } else {
                  if (!this.s && this.O < Date.now() - 1E3) {
                    /** @type {number} */
                    expectedHashCode = 0;
                    for (;expectedHashCode < value.length;expectedHashCode++) {
                      if (width >= value.start(expectedHashCode) && width < value.end(expectedHashCode) - 0.5) {
                        this.a.currentTime += 0.1;
                        this.w = this.a.currentTime;
                        /** @type {boolean} */
                        this.s = true;
                        break;
                      }
                    }
                  }
                }
              }
            } else {
              if ((expectedHashCode || this.m) && !((i = value.start(expectedHashCode)) >= this.c.presentationTimeline.kb())) {
                /** @type {number} */
                var event = i - width;
                /** @type {boolean} */
                var inverse = false;
                if (!(program = event <= program)) {
                  if (!this.i) {
                    /** @type {boolean} */
                    this.i = true;
                    event = new EventObject("largegap", {
                      currentTime : width,
                      gapSize : event
                    });
                    /** @type {boolean} */
                    event.cancelable = true;
                    this.D(event);
                    if (this.l.jumpLargeGaps) {
                      if (!event.defaultPrevented) {
                        /** @type {boolean} */
                        inverse = true;
                      }
                    }
                  }
                }
                if (program || inverse) {
                  if (expectedHashCode) {
                    value.end(expectedHashCode - 1);
                  }
                  isReady(this, width, i);
                }
              }
            }
          }
        }
      };
      /**
       * @return {undefined}
       */
      self.nc = function() {
        /** @type {boolean} */
        this.m = false;
        var t2 = this.a.currentTime;
        var t1 = max(this, t2);
        if (0.001 < Math.abs(t1 - t2)) {
          isReady(this, t2, t1);
        } else {
          /** @type {boolean} */
          this.i = false;
          this.I();
        }
      };
      /**
       * @return {undefined}
       */
      self.lc = function() {
        var t2 = this.a.currentTime;
        var t1 = max(this, t2);
        if (0.001 < Math.abs(t1 - t2)) {
          isReady(this, t2, t1);
        }
      };
      /**
       * @return {?}
       */
      B.prototype.o = function() {
        var j = this.j ? this.j.o() : Promise.resolve();
        return this.j = null, onTouchMove(this), this.C = this.h = this.l = this.w = this.g = this.B = this.a = null, this.c = [], j;
      };
      /**
       * @param {?} expectedHashCode
       * @return {undefined}
       */
      B.prototype.s = function(expectedHashCode) {
        if (!this.c.some(function(self) {
          return self.info.schemeIdUri == expectedHashCode.schemeIdUri && (self.info.startTime == expectedHashCode.startTime && self.info.endTime == expectedHashCode.endTime);
        })) {
          var pdataOld = {
            info : expectedHashCode,
            status : 1
          };
          this.c.push(pdataOld);
          var r20 = new EventObject("timelineregionadded", {
            detail : unsubscribe(expectedHashCode)
          });
          this.h(r20);
          this.m(true, pdataOld);
        }
      };
      /**
       * @param {?} expectedHashCode
       * @param {string} value
       * @return {undefined}
       */
      B.prototype.m = function(expectedHashCode, value) {
        /** @type {number} */
        var color = value.info.startTime > this.a.currentTime ? 1 : value.info.endTime < this.a.currentTime ? 3 : 2;
        /** @type {boolean} */
        var program = 2 == value.status;
        /** @type {boolean} */
        var inverse = 2 == color;
        if (color != value.status) {
          if (!expectedHashCode || (program || inverse)) {
            if (!program) {
              this.h(new EventObject("timelineregionenter", {
                detail : unsubscribe(value.info)
              }));
            }
            if (!inverse) {
              this.h(new EventObject("timelineregionexit", {
                detail : unsubscribe(value.info)
              }));
            }
          }
          /** @type {number} */
          value.status = color;
        }
      };
      /**
       * @return {undefined}
       */
      B.prototype.D = function() {
        /** @type {null} */
        this.f = null;
        handleEvent(this);
        if ((i = isArray(this.g, this.a.currentTime)) != this.i) {
          if (-1 != this.i) {
            this.C();
          }
          this.i = i;
        }
        var i = parent(this.a.buffered, this.a.currentTime);
        var observer = timerangeToArray(this.a.buffered);
        var cur = this.g.presentationTimeline;
        var yDelta = cur.va();
        /** @type {boolean} */
        var _stop = "ended" == this.B.readyState;
        observer = cur.R() && observer >= yDelta || (this.a.ended || _stop);
        if (this.b) {
          /** @type {number} */
          cur = 1 * Math.max(this.g.minBufferTime || 0, this.w.rebufferingGoal);
          if (observer || i >= cur) {
            if (0 != this.b) {
              /** @type {boolean} */
              this.b = false;
              this.l(false);
            }
          }
        } else {
          if (!observer) {
            if (0.5 > i) {
              if (1 != this.b) {
                /** @type {boolean} */
                this.b = true;
                this.l(true);
              }
            }
          }
        }
        this.c.forEach(this.m.bind(this, false));
      };
      /**
       * @return {?}
       */
      (self = valueRef.prototype).o = function() {
        var key;
        for (key in this.c) {
          isString(this.c[key]);
        }
        return this.h = this.c = this.j = this.g = this.m = this.b = this.a = null, this.f = true, Promise.resolve();
      };
      /**
       * @param {?} value
       * @return {undefined}
       */
      self.configure = function(value) {
        this.h = value;
        this.w = new calcPoint({
          maxAttempts : Math.max(value.retryParameters.maxAttempts, 2),
          baseDelay : value.retryParameters.baseDelay,
          backoffFactor : value.retryParameters.backoffFactor,
          fuzzFactor : value.retryParameters.fuzzFactor,
          timeout : 0
        }, true);
      };
      /**
       * @return {?}
       */
      self.init = function() {
        var options = this.a.gc(this.b.periods[isArray(this.b, hasOwnProperty(this.a.Sa))]);
        return options.variant || options.text ? setOptions(this, options).then(function() {
          if (this.a) {
            if (this.a.sd) {
              this.a.sd();
            }
          }
        }.bind(this)) : Promise.reject(new error(2, 5, 5005));
      };
      /**
       * @param {Object} i
       * @return {?}
       */
      self.xe = function(i) {
        if (!this.f && (!i.ya && (null != i.qa && !i.ta))) {
          if (i.qa = null, i.ra) {
            ok(this, i, i.sb);
          } else {
            try {
              var names = action(this, i);
              if (null != names) {
                valueOf(this, i, names);
                /** @type {boolean} */
                i.Pa = false;
              }
            } catch (GET) {
              return void runTest(this, GET);
            }
            names = keys(this.c);
            addEventHandler(this, i);
            if (names.every(function(dataAndEvents) {
              return dataAndEvents.endOfStream;
            })) {
              this.a.M.endOfStream().then(function() {
                this.b.presentationTimeline.ea(this.a.M.Y());
              }.bind(this));
            }
          }
        }
      };
      /**
       * @param {Object} child
       * @param {Object} animation
       * @param {Text} data
       * @return {undefined}
       */
      self.Nd = function(child, animation, data) {
        var schemeIdUri = data.u.Ib();
        var origValue = data.u.Ib();
        var timescale = data.u.F();
        var time = data.u.F();
        var offset = data.u.F();
        var pageId = data.u.F();
        data = data.u.Ja(data.u.L.byteLength - data.u.v);
        child = child.startTime + animation.startTime + time / timescale;
        if ("urn:mpeg:dash:event:2012" == schemeIdUri) {
          this.a.td();
        } else {
          this.a.onEvent(new EventObject("emsg", {
            detail : {
              startTime : child,
              endTime : child + offset / timescale,
              schemeIdUri : schemeIdUri,
              value : origValue,
              timescale : timescale,
              presentationTimeDelta : time,
              eventDuration : offset,
              id : pageId,
              messageData : data
            }
          }));
        }
      };
      run("shaka.net.HttpPlugin", apiMethod);
      /** @type {function (string, Object): ?} */
      settings.http = apiMethod;
      /** @type {function (string, Object): ?} */
      settings.https = apiMethod;
      /**
       * @param {?} options
       * @param {boolean} selector
       * @return {?}
       */
      (self = KlassA.prototype).init = function(options, selector) {
        return _init(this, options, selector).then(function() {
          /** @type {Array.<string>} */
          var args = Object.keys(options);
          return Promise.all(args.map(function(data) {
            return save(this, data).then(function(value) {
              this.c[data] = value;
            }.bind(this));
          }.bind(this)));
        }.bind(this));
      };
      /**
       * @return {?}
       */
      self.o = function() {
        return Promise.all(this.b.map(function(item) {
          try {
            item.transaction.abort();
          } catch (t) {
          }
          return item.N.catch(paths);
        })).then(function() {
          if (this.a) {
            this.a.close();
            /** @type {null} */
            this.a = null;
          }
        }.bind(this));
      };
      /**
       * @param {?} expectedHashCode
       * @param {?} value
       * @return {?}
       */
      self.get = function(expectedHashCode, value) {
        var match;
        return remove(this, expectedHashCode, "readonly", function($templateCache) {
          match = $templateCache.get(value);
        }).then(function() {
          return match.result;
        });
      };
      /**
       * @param {Function} elem
       * @param {Function} iterator
       * @return {?}
       */
      self.forEach = function(elem, iterator) {
        return remove(this, elem, "readonly", function(index) {
          /**
           * @param {(Object|string)} self
           * @return {undefined}
           */
          index.openCursor().onsuccess = function(self) {
            if (self = self.target.result) {
              iterator(self.value);
              self.continue();
            }
          };
        });
      };
      /**
       * @param {?} keepData
       * @param {?} key
       * @return {?}
       */
      self.remove = function(keepData, key) {
        return remove(this, keepData, "readwrite", function(keys) {
          keys.delete(key);
        });
      };
      var arg = {
        manifest : "key",
        segment : "key"
      };
      /**
       * @return {?}
       */
      Matrix.prototype.o = function() {
        var failuresLink = this.j;
        var W = this.l;
        var p = this.i || Promise.resolve();
        return W.length && (p = p.then(function() {
          return unbind(failuresLink, W);
        })), this.b = {}, this.l = [], this.i = this.a = this.w = this.s = this.j = this.m = null, p;
      };
      /**
       * @return {undefined}
       */
      (self = original.prototype).configure = function() {
      };
      /**
       * @param {?} expectedHashCode
       * @return {?}
       */
      self.start = function(expectedHashCode) {
        /** @type {(Array.<string>|null)} */
        var regExpResultArray = /^offline:([0-9]+)$/.exec(expectedHashCode);
        if (!regExpResultArray) {
          return Promise.reject(new error(2, 1, 9004, expectedHashCode));
        }
        /** @type {number} */
        var camelKey = Number(regExpResultArray[1]);
        var self = toObject();
        return this.a = camelKey, self ? self.init(arg).then(function() {
          return self.get("manifest", camelKey);
        }).then(function(syntax) {
          if (!syntax) {
            throw new error(2, 9, 9003, camelKey);
          }
          return traverse(syntax);
        }).then(function(dataAndEvents) {
          return self.o().then(function() {
            return dataAndEvents;
          });
        }, function(dataAndEvents) {
          return self.o().then(function() {
            throw dataAndEvents;
          });
        }) : Promise.reject(new error(2, 9, 9E3));
      };
      /**
       * @return {?}
       */
      self.stop = function() {
        return Promise.resolve();
      };
      /**
       * @return {undefined}
       */
      self.update = function() {
      };
      /**
       * @param {string} boundary
       * @param {?} deepDataAndEvents
       * @return {undefined}
       */
      self.onExpirationUpdated = function(boundary, deepDataAndEvents) {
        var self = toObject();
        self.init(arg).then(function() {
          return self.get("manifest", this.a);
        }.bind(this)).then(function(result) {
          if (result && (!(0 > result.sessionIds.indexOf(boundary)) && (void 0 == result.expiration || result.expiration > deepDataAndEvents))) {
            return result.expiration = deepDataAndEvents, del(self, "manifest", result);
          }
        }).catch(function() {
        }).then(function() {
          return self.o();
        });
      };
      /** @type {function (): undefined} */
      object["application/x-offline-manifest"] = original;
      run("shaka.offline.OfflineScheme", success);
      /** @type {function (number): ?} */
      settings.offline = success;
      run("shaka.text.SimpleTextDisplayer", Item);
      /**
       * @param {?} keepData
       * @param {?} key
       * @return {?}
       */
      Item.prototype.remove = function(keepData, key) {
        return!!this.a && (last(this, function(record) {
          return!(record.startTime >= key || record.endTime <= keepData);
        }), true);
      };
      /** @type {function (?, ?): ?} */
      Item.prototype.remove = Item.prototype.remove;
      /**
       * @param {Array} items
       * @return {undefined}
       */
      Item.prototype.append = function(items) {
        /** @type {Array} */
        var parents = [];
        /** @type {number} */
        var i = 0;
        for (;i < items.length;i++) {
          var expectedHashCode = render(items[i]);
          if (expectedHashCode) {
            parents.push(expectedHashCode);
          }
        }
        parents.slice().sort(function(a, b) {
          return a.startTime != b.startTime ? a.startTime - b.startTime : a.endTime != b.endTime ? a.endTime - b.startTime : parents.indexOf(b) - parents.indexOf(a);
        }).forEach(function(env) {
          this.a.addCue(env);
        }.bind(this));
      };
      /** @type {function (Array): undefined} */
      Item.prototype.append = Item.prototype.append;
      /**
       * @return {?}
       */
      Item.prototype.o = function() {
        return this.a && last(this, function() {
          return true;
        }), this.a = null, Promise.resolve();
      };
      /** @type {function (): ?} */
      Item.prototype.destroy = Item.prototype.o;
      /**
       * @return {?}
       */
      Item.prototype.isTextVisible = function() {
        return "showing" == this.a.mode;
      };
      /** @type {function (): ?} */
      Item.prototype.isTextVisible = Item.prototype.isTextVisible;
      /**
       * @param {boolean} deepDataAndEvents
       * @return {undefined}
       */
      Item.prototype.setTextVisibility = function(deepDataAndEvents) {
        /** @type {string} */
        this.a.mode = deepDataAndEvents ? "showing" : "hidden";
      };
      /** @type {function (boolean): undefined} */
      Item.prototype.setTextVisibility = Item.prototype.setTextVisibility;
      /**
       * @param {Function} selector
       * @return {?}
       */
      controller.prototype.then = function(selector) {
        return this.a = this.a.then(selector).then(function(val) {
          return this.b ? (this.g(), Promise.reject(this.h)) : Promise.resolve(val);
        }.bind(this)), this;
      };
      /**
       * @param {?} h
       * @return {?}
       */
      controller.prototype.cancel = function(h) {
        return this.c ? Promise.resolve() : (this.b = true, this.h = h, this.i);
      };
      __extends(constructor);
      run("shaka.Player", constructor);
      /**
       * @return {?}
       */
      constructor.prototype.o = function() {
        /** @type {boolean} */
        this.I = true;
        var promise = Promise.resolve();
        return this.D && (promise = this.D.cancel(new error(2, 7, 7E3))), promise.then(function() {
          var t = Promise.all([this.Oa, play(this), this.m ? this.m.o() : null, this.s ? this.s.o() : null]);
          return this.f = null, this.gb = false, this.c = this.s = this.g = this.m = null, t;
        }.bind(this));
      };
      /** @type {function (): ?} */
      constructor.prototype.destroy = constructor.prototype.o;
      /** @type {string} */
      constructor.version = "v2.2.1";
      var files = {};
      /**
       * @param {?} name
       * @param {?} file
       * @return {undefined}
       */
      constructor.registerSupportPlugin = function(name, file) {
        files[name] = file;
      };
      /**
       * @return {?}
       */
      constructor.isBrowserSupported = function() {
        return!!(global.Promise && (global.Uint8Array && (Array.prototype.forEach && (global.MediaSource && (MediaSource.isTypeSupported && (global.MediaKeys && (global.navigator && (global.navigator.requestMediaKeySystemAccess && (global.MediaKeySystemAccess && global.MediaKeySystemAccess.prototype.getConfiguration)))))))));
      };
      /**
       * @return {?}
       */
      constructor.probeSupport = function() {
        return fetch().then(function(safe) {
          safe = {
            manifest : eachEvent(),
            media : renderSection(),
            drm : safe
          };
          var i;
          for (i in files) {
            safe[i] = files[i]();
          }
          return safe;
        });
      };
      /**
       * @param {?} expectedHashCode
       * @param {Function} id
       * @param {?} fn
       * @return {?}
       */
      constructor.prototype.load = function(expectedHashCode, id, fn) {
        var memo = this.qb();
        var d = new controller;
        this.D = d;
        this.dispatchEvent(new EventObject("loading"));
        /** @type {number} */
        var o = Date.now();
        return doRequest(d.then(function() {
          return memo;
        }).then(function() {
          return this.i = {
            width : NaN,
            height : NaN,
            streamBandwidth : NaN,
            decodedFrames : NaN,
            droppedFrames : NaN,
            estimatedBandwidth : NaN,
            loadLatency : NaN,
            playTime : 0,
            bufferingTime : 0,
            switchHistory : [],
            stateHistory : []
          }, callback(this.m, this.f, "playing", this.Wa.bind(this)), callback(this.m, this.f, "pause", this.Wa.bind(this)), callback(this.m, this.f, "ended", this.Wa.bind(this)), this.g = new this.c.abrFactory, prep(this), this.w = new this.c.textDisplayFactory, this.w.setTextVisibility(this.gb), process(expectedHashCode, this.s, this.c.manifest.retryParameters, fn);
        }.bind(this)).then(function(pdataOld) {
          return this.l = new pdataOld, this.l.configure(this.c.manifest), pdataOld = {
            networkingEngine : this.s,
            filterNewPeriod : this.hb.bind(this),
            filterAllPeriods : this.Qb.bind(this),
            onTimelineRegionAdded : this.Gd.bind(this),
            onEvent : this.pb.bind(this),
            onError : this.La.bind(this)
          }, 2 < this.l.start.length ? this.l.start(expectedHashCode, this.s, pdataOld.filterNewPeriod, pdataOld.onError, pdataOld.onEvent) : this.l.start(expectedHashCode, pdataOld);
        }.bind(this)).then(function(options) {
          if (options.periods.some(function(self) {
            return self.variants.some(function(obj) {
              return obj.video && obj.audio;
            });
          }) && options.periods.forEach(function(base) {
            base.variants = base.variants.filter(function(obj) {
              return obj.video && obj.audio;
            });
          }), 0 == options.periods.length) {
            throw new error(2, 4, 4014);
          }
          return this.b = options, this.fb = expectedHashCode, this.j = new load(this.s, this.La.bind(this), this.ne.bind(this), this.me.bind(this)), this.j.configure(this.c.drm), this.j.init(options, false);
        }.bind(this)).then(function() {
          this.Qb(this.b.periods);
          /** @type {number} */
          this.$a = Date.now() / 1E3;
          this.na = this.c.preferredAudioLanguage;
          this.Xa = this.c.preferredTextLanguage;
          var b = this.b.presentationTimeline.Y();
          var a = this.c.playRangeEnd;
          var udataCur = this.c.playRangeStart;
          return 0 < udataCur && (this.R() || this.b.presentationTimeline.Ac(udataCur)), a < b && (this.R() || this.b.presentationTimeline.ea(a)), Promise.all([resolve(this.j, this.f), this.cb]);
        }.bind(this)).then(function() {
          return this.g.chooseStreams ? this.g.init(this.Ae.bind(this)) : this.g.init(this.Fc.bind(this)), this.h = new Color(this.f, this.b, this.c.streaming, id || (this.c.playRangeStart || null), this.oe.bind(this), this.pb.bind(this)), this.B = new B(this.f, this.O, this.b, this.c.streaming, this.Ec.bind(this), this.pb.bind(this), this.le.bind(this)), this.Ma = new Element(this.f, this.O, this.w), this.a = new valueRef(this.b, {
            Sa : this.h,
            M : this.Ma,
            nd : this.s,
            gc : this.od.bind(this),
            fc : this.Mc.bind(this),
            onError : this.La.bind(this),
            onEvent : this.pb.bind(this),
            td : this.ud.bind(this),
            Fb : this.Dd.bind(this),
            filterNewPeriod : this.hb.bind(this),
            filterAllPeriods : this.Qb.bind(this)
          }), this.a.configure(this.c.streaming), read(this), this.a.init();
        }.bind(this)).then(function() {
          if (this.c.streaming.startAtSegmentBoundary) {
            var udataCur = slice(this, hasOwnProperty(this.h));
            isPlainObject(this.h, udataCur);
          }
          this.b.periods.forEach(this.hb.bind(this));
          bootstrap(this);
          change(this);
          var pdataCur = loaded(udataCur = Number(this.a), this.na, this.Ya);
          this.g.setVariants(pdataCur);
          udataCur.variants.some(function(servers) {
            return servers.primary;
          });
          this.eb.forEach(this.B.s.bind(this.B));
          /** @type {Array} */
          this.eb = [];
          match(this.m, this.f, "loadeddata", function() {
            /** @type {number} */
            this.i.loadLatency = (Date.now() - o) / 1E3;
          }.bind(this));
          /** @type {null} */
          this.D = null;
        }.bind(this))).catch(function(error) {
          return this.D == d && (this.D = null, this.dispatchEvent(new EventObject("unloading"))), Promise.reject(error);
        }.bind(this));
      };
      /** @type {function (?, Function, ?): ?} */
      constructor.prototype.load = constructor.prototype.load;
      /**
       * @param {?} options
       * @return {undefined}
       */
      constructor.prototype.configure = function(options) {
        if (options.abr && options.abr.manager) {
          var manager = options.abr.manager;
          delete options.abr.manager;
          /**
           * @return {?}
           */
          options.abrFactory = function() {
            return manager;
          };
        }
        if (options.streaming) {
          if (null != options.streaming.infiniteRetriesForLiveStreams) {
            /** @type {boolean} */
            this.Wb = !!options.streaming.infiniteRetriesForLiveStreams;
            delete options.streaming.infiniteRetriesForLiveStreams;
          }
        }
        inherit(this.c, options, listen(this), configure(), "");
        parse_workbook(this);
      };
      /** @type {function (?): undefined} */
      constructor.prototype.configure = constructor.prototype.configure;
      /**
       * @return {?}
       */
      constructor.prototype.getConfiguration = function() {
        var Shape = listen(this);
        return inherit(Shape, this.c, listen(this), configure(), ""), Shape;
      };
      /** @type {function (): ?} */
      constructor.prototype.getConfiguration = constructor.prototype.getConfiguration;
      /**
       * @return {undefined}
       */
      constructor.prototype.$d = function() {
        this.c = listen(this);
        parse_workbook(this);
      };
      /** @type {function (): undefined} */
      constructor.prototype.resetConfiguration = constructor.prototype.$d;
      /**
       * @return {?}
       */
      constructor.prototype.Xc = function() {
        return this.f;
      };
      /** @type {function (): ?} */
      constructor.prototype.getMediaElement = constructor.prototype.Xc;
      /**
       * @return {?}
       */
      constructor.prototype.cc = function() {
        return this.s;
      };
      /** @type {function (): ?} */
      constructor.prototype.getNetworkingEngine = constructor.prototype.cc;
      /**
       * @return {?}
       */
      constructor.prototype.Wc = function() {
        return this.fb;
      };
      /** @type {function (): ?} */
      constructor.prototype.getManifestUri = constructor.prototype.Wc;
      /**
       * @return {?}
       */
      constructor.prototype.R = function() {
        return!!this.b && this.b.presentationTimeline.R();
      };
      /** @type {function (): ?} */
      constructor.prototype.isLive = constructor.prototype.R;
      /**
       * @return {?}
       */
      constructor.prototype.wa = function() {
        return!!this.b && this.b.presentationTimeline.wa();
      };
      /** @type {function (): ?} */
      constructor.prototype.isInProgress = constructor.prototype.wa;
      /**
       * @return {?}
       */
      constructor.prototype.hd = function() {
        if (!this.b || !this.b.periods.length) {
          return false;
        }
        var codeSegments = this.b.periods[0].variants;
        return!!codeSegments.length && !codeSegments[0].video;
      };
      /** @type {function (): ?} */
      constructor.prototype.isAudioOnly = constructor.prototype.hd;
      /**
       * @return {?}
       */
      constructor.prototype.be = function() {
        /** @type {number} */
        var minIdx = 0;
        /** @type {number} */
        var transitionEnd = 0;
        return this.b && (transitionEnd = this.b.presentationTimeline, minIdx = transitionEnd.ia(), transitionEnd = transitionEnd.kb()), {
          start : minIdx,
          end : transitionEnd
        };
      };
      /** @type {function (): ?} */
      constructor.prototype.seekRange = constructor.prototype.be;
      /**
       * @return {?}
       */
      constructor.prototype.keySystem = function() {
        return this.j ? this.j.keySystem() : "";
      };
      /** @type {function (): ?} */
      constructor.prototype.keySystem = constructor.prototype.keySystem;
      /**
       * @return {?}
       */
      constructor.prototype.drmInfo = function() {
        return this.j ? this.j.b : null;
      };
      /** @type {function (): ?} */
      constructor.prototype.drmInfo = constructor.prototype.drmInfo;
      /**
       * @return {?}
       */
      constructor.prototype.jb = function() {
        return this.j ? this.j.jb() : 1 / 0;
      };
      /** @type {function (): ?} */
      constructor.prototype.getExpiration = constructor.prototype.jb;
      /**
       * @return {?}
       */
      constructor.prototype.jd = function() {
        return this.Na;
      };
      /** @type {function (): ?} */
      constructor.prototype.isBuffering = constructor.prototype.jd;
      /**
       * @return {?}
       */
      constructor.prototype.qb = function() {
        if (this.I) {
          return Promise.resolve();
        }
        this.dispatchEvent(new EventObject("unloading"));
        var promise = Promise.resolve();
        return this.D && (promise = this.D.cancel(new error(2, 7, 7E3))), promise.then(function() {
          return this.Oa || (this.Oa = promise(this).then(function() {
            /** @type {null} */
            this.Oa = null;
          }.bind(this))), this.Oa;
        }.bind(this));
      };
      /** @type {function (): ?} */
      constructor.prototype.unload = constructor.prototype.qb;
      /**
       * @return {?}
       */
      constructor.prototype.xb = function() {
        return this.h ? this.h.xb() : 0;
      };
      /** @type {function (): ?} */
      constructor.prototype.getPlaybackRate = constructor.prototype.xb;
      /**
       * @param {number} deepDataAndEvents
       * @return {undefined}
       */
      constructor.prototype.Be = function(deepDataAndEvents) {
        if (this.h) {
          startDrag(this.h, deepDataAndEvents);
        }
        if (this.a) {
          addStream(this.a, 1 != deepDataAndEvents);
        }
      };
      /** @type {function (number): undefined} */
      constructor.prototype.trickPlay = constructor.prototype.Be;
      /**
       * @return {undefined}
       */
      constructor.prototype.Nc = function() {
        if (this.h) {
          startDrag(this.h, 1);
        }
        if (this.a) {
          addStream(this.a, false);
        }
      };
      /** @type {function (): undefined} */
      constructor.prototype.cancelTrickPlay = constructor.prototype.Nc;
      /**
       * @return {?}
       */
      constructor.prototype.fd = function() {
        if (!this.b) {
          return[];
        }
        var i = isArray(this.b, hasOwnProperty(this.h));
        var media = this.C[i] || {};
        return message(this.b.periods[i], media.audio, media.video);
      };
      /** @type {function (): ?} */
      constructor.prototype.getVariantTracks = constructor.prototype.fd;
      /**
       * @return {?}
       */
      constructor.prototype.ed = function() {
        if (!this.b) {
          return[];
        }
        var i = isArray(this.b, hasOwnProperty(this.h));
        return print(this.b.periods[i], (this.C[i] || {}).text).filter(function(evt) {
          return 0 > this.ab.indexOf(evt.id);
        }.bind(this));
      };
      /** @type {function (): ?} */
      constructor.prototype.getTextTracks = constructor.prototype.ed;
      /**
       * @param {string} func
       * @return {undefined}
       */
      constructor.prototype.fe = function(func) {
        if (this.a) {
          if (func = serialize(Number(this.a), func)) {
            handle(this, func, false);
            if (this.ga) {
              /** @type {string} */
              this.fa = func;
            } else {
              each(this.a, func, true);
            }
          }
        }
      };
      /** @type {function (string): undefined} */
      constructor.prototype.selectTextTrack = constructor.prototype.fe;
      /**
       * @param {Element} pos
       * @param {boolean} deepDataAndEvents
       * @return {undefined}
       */
      constructor.prototype.ge = function(pos, deepDataAndEvents) {
        if (this.a) {
          var key = cmp(Number(this.a), pos);
          if (key) {
            if (key.allowedByApplication) {
              if (key.allowedByKeySystem) {
                fn(this, key, false);
                cloneNode(this, key, deepDataAndEvents);
              }
            }
          }
        }
      };
      /** @type {function (Element, boolean): undefined} */
      constructor.prototype.selectVariantTrack = constructor.prototype.ge;
      /**
       * @return {?}
       */
      constructor.prototype.Uc = function() {
        return this.a ? unique(Number(this.a).variants).map(function(localize) {
          return localize.language;
        }).filter(src) : [];
      };
      /** @type {function (): ?} */
      constructor.prototype.getAudioLanguages = constructor.prototype.Uc;
      /**
       * @return {?}
       */
      constructor.prototype.dd = function() {
        return this.a ? Number(this.a).textStreams.map(function(localize) {
          return localize.language;
        }).filter(src) : [];
      };
      /** @type {function (): ?} */
      constructor.prototype.getTextLanguages = constructor.prototype.dd;
      /**
       * @param {?} byNumber
       * @param {string} classNames
       * @return {undefined}
       */
      constructor.prototype.de = function(byNumber, classNames) {
        if (this.a) {
          var b = Number(this.a);
          this.na = byNumber;
          this.Ya = classNames || "";
          getter(this, b);
        }
      };
      /** @type {function (?, string): undefined} */
      constructor.prototype.selectAudioLanguage = constructor.prototype.de;
      /**
       * @param {?} dataAndEvents
       * @param {string} classNames
       * @return {undefined}
       */
      constructor.prototype.ee = function(dataAndEvents, classNames) {
        if (this.a) {
          var b = Number(this.a);
          this.Xa = dataAndEvents;
          this.tb = classNames || "";
          getter(this, b);
        }
      };
      /** @type {function (?, string): undefined} */
      constructor.prototype.selectTextLanguage = constructor.prototype.ee;
      /**
       * @return {?}
       */
      constructor.prototype.ld = function() {
        return this.w ? this.w.isTextVisible() : this.gb;
      };
      /** @type {function (): ?} */
      constructor.prototype.isTextTrackVisible = constructor.prototype.ld;
      /**
       * @param {boolean} deepDataAndEvents
       * @return {undefined}
       */
      constructor.prototype.je = function(deepDataAndEvents) {
        if (this.w) {
          this.w.setTextVisibility(deepDataAndEvents);
        } else {
          /** @type {boolean} */
          this.gb = deepDataAndEvents;
        }
        pause(this);
      };
      /** @type {function (boolean): undefined} */
      constructor.prototype.setTextTrackVisibility = constructor.prototype.je;
      /**
       * @return {?}
       */
      constructor.prototype.Zc = function() {
        return this.b ? new Date(1E3 * this.b.presentationTimeline.c + 1E3 * this.f.currentTime) : null;
      };
      /** @type {function (): ?} */
      constructor.prototype.getPlayheadTimeAsDate = constructor.prototype.Zc;
      /**
       * @return {?}
       */
      constructor.prototype.bd = function() {
        return this.b ? new Date(1E3 * this.b.presentationTimeline.c) : null;
      };
      /** @type {function (): ?} */
      constructor.prototype.getPresentationStartTimeAsDate = constructor.prototype.bd;
      /**
       * @return {?}
       */
      constructor.prototype.getStats = function() {
        brighten(this);
        this.Wa();
        /** @type {null} */
        var root = null;
        /** @type {null} */
        var options = null;
        var el = (el = this.f) && el.getVideoPlaybackQuality ? el.getVideoPlaybackQuality() : {};
        return this.h && (this.b && (root = isArray(this.b, hasOwnProperty(this.h)), options = this.C[root], options = objEquiv(options.audio, options.video, this.b.periods[root].variants), root = options.video || {})), root || (root = {}), options || (options = {}), {
          width : root.width || 0,
          height : root.height || 0,
          streamBandwidth : options.bandwidth || 0,
          decodedFrames : Number(el.totalVideoFrames),
          droppedFrames : Number(el.droppedVideoFrames),
          estimatedBandwidth : this.g ? this.g.getBandwidthEstimate() : NaN,
          loadLatency : this.i.loadLatency,
          playTime : this.i.playTime,
          bufferingTime : this.i.bufferingTime,
          switchHistory : $(this.i.switchHistory),
          stateHistory : $(this.i.stateHistory)
        };
      };
      /** @type {function (): ?} */
      constructor.prototype.getStats = constructor.prototype.getStats;
      /**
       * @param {string} captionData
       * @param {string} language
       * @param {string} i
       * @param {?} mimeType
       * @param {string} kind
       * @param {Node} label
       * @return {?}
       */
      constructor.prototype.addTextTrack = function(captionData, language, i, mimeType, kind, label) {
        if (!this.a) {
          return Promise.reject();
        }
        var a;
        var b = Number(this.a);
        /** @type {number} */
        var conditionIndex = 0;
        for (;conditionIndex < this.b.periods.length;conditionIndex++) {
          if (this.b.periods[conditionIndex] == b) {
            if (conditionIndex == this.b.periods.length - 1) {
              if (a = this.b.presentationTimeline.Y() - b.startTime, 1 / 0 == a) {
                return Promise.reject();
              }
            } else {
              /** @type {number} */
              a = this.b.periods[conditionIndex + 1].startTime - b.startTime;
            }
            break;
          }
        }
        var expectedHashCode = {
          id : this.Jc++,
          createSegmentIndex : Promise.resolve.bind(Promise),
          /**
           * @return {?}
           */
          findSegmentPosition : function() {
            return 1;
          },
          /**
           * @param {number} wanted
           * @return {?}
           */
          getSegmentReference : function(wanted) {
            return 1 != wanted ? null : new complete(1, 0, a, function() {
              return[captionData];
            }, 0, null);
          },
          initSegmentReference : null,
          presentationTimeOffset : 0,
          mimeType : mimeType,
          codecs : kind || "",
          kind : i,
          encrypted : false,
          keyId : null,
          language : language,
          label : label || null,
          type : "text",
          primary : false,
          trickModeVideo : null,
          containsEmsgBoxes : false,
          roles : [],
          channelsCount : null
        };
        return this.ab.push(expectedHashCode.id), b.textStreams.push(expectedHashCode), setOptions(this.a, {
          text : expectedHashCode
        }).then(function() {
          if (!this.I) {
            var idx = this.b.periods.indexOf(b);
            var elem = exists(this.a);
            return elem.text && (this.C[idx].text = elem.text.id), this.ab.splice(this.ab.indexOf(expectedHashCode.id), 1), getter(this, b), bootstrap(this), {
              id : expectedHashCode.id,
              active : false,
              type : "text",
              bandwidth : 0,
              language : language,
              label : label || null,
              kind : i,
              width : null,
              height : null
            };
          }
        }.bind(this));
      };
      /** @type {function (string, string, string, ?, string, Node): ?} */
      constructor.prototype.addTextTrack = constructor.prototype.addTextTrack;
      /**
       * @param {number} opt_attributes
       * @param {number} expectedNumberOfNonCommentArgs
       * @return {undefined}
       */
      constructor.prototype.Pb = function(opt_attributes, expectedNumberOfNonCommentArgs) {
        /** @type {number} */
        this.bb.width = opt_attributes;
        /** @type {number} */
        this.bb.height = expectedNumberOfNonCommentArgs;
      };
      /** @type {function (number, number): undefined} */
      constructor.prototype.setMaxHardwareResolution = constructor.prototype.Pb;
      /**
       * @return {?}
       */
      constructor.prototype.xc = function() {
        if (this.a) {
          var item = this.a;
          if (item.f) {
            /** @type {boolean} */
            item = false;
          } else {
            if (item.l) {
              /** @type {boolean} */
              item = false;
            } else {
              var name;
              for (name in item.c) {
                var section = item.c[name];
                if (section.Pa) {
                  /** @type {boolean} */
                  section.Pa = false;
                  valueOf(item, section, 0.1);
                }
              }
              /** @type {boolean} */
              item = true;
            }
          }
        } else {
          /** @type {boolean} */
          item = false;
        }
        return item;
      };
      /** @type {function (): ?} */
      constructor.prototype.retryStreaming = constructor.prototype.xc;
      /**
       * @param {Error} error
       * @return {undefined}
       */
      (self = constructor.prototype).Qc = function(error) {
        /** @type {Array} */
        var _this = [1001, 1002, 1003];
        if (this.R()) {
          if (this.Wb) {
            if (0 <= _this.indexOf(error.code)) {
              /** @type {number} */
              error.severity = 1;
              this.xc();
            }
          }
        }
      };
      /**
       * @param {Array} assertions
       * @return {undefined}
       */
      self.Qb = function(assertions) {
        var empty = this.a ? exists(this.a) : {};
        assertions.forEach(function(fn) {
          map(this.j, empty, fn);
        }.bind(this));
        /** @type {number} */
        var i = 0;
        if (assertions.forEach(function(self) {
          if (0 < unique(self.variants).length) {
            i++;
          }
        }.bind(this)), !i) {
          throw new error(2, 4, 9009);
        }
        if (i < assertions.length) {
          throw new error(2, 4, 4011);
        }
        assertions.forEach(function(self) {
          if (formatError(self, this.c.restrictions, this.bb) && (this.a && (Number(this.a) == self && bootstrap(this))), 1 > unique(self.variants).length) {
            throw new error(2, 4, 4012);
          }
        }.bind(this));
      };
      /**
       * @param {boolean} self
       * @return {undefined}
       */
      self.hb = function(self) {
        var empty = this.a ? exists(this.a) : {};
        if (map(this.j, empty, self), empty = 0 < unique(self.variants).length, formatError(self, this.c.restrictions, this.bb) && (this.a && (Number(this.a) == self && bootstrap(this))), self = 1 > unique(self.variants).length, !empty) {
          throw new error(2, 4, 4011);
        }
        if (self) {
          throw new error(2, 4, 4012);
        }
      };
      /**
       * @param {number} deepDataAndEvents
       * @param {number} dataAndEvents
       * @return {undefined}
       */
      self.pe = function(deepDataAndEvents, dataAndEvents) {
        if (this.g) {
          this.g.segmentDownloaded(deepDataAndEvents, dataAndEvents);
        }
      };
      /**
       * @param {?} h
       * @return {undefined}
       */
      self.Ec = function(h) {
        if (brighten(this), this.Na = h, this.Wa(), this.h) {
          var e = this.h;
          if (h != e.h) {
            e.h = h;
            startDrag(e, e.g);
          }
        }
        this.dispatchEvent(new EventObject("buffering", {
          buffering : h
        }));
      };
      /**
       * @return {undefined}
       */
      self.le = function() {
        bootstrap(this);
      };
      /**
       * @return {undefined}
       */
      self.Wa = function() {
        if (!this.I) {
          /** @type {string} */
          var state = this.Na ? "buffering" : this.f.ended ? "ended" : this.f.paused ? "paused" : "playing";
          /** @type {number} */
          var time = Date.now() / 1E3;
          if (this.i.stateHistory.length) {
            var me = this.i.stateHistory[this.i.stateHistory.length - 1];
            if (me.duration = time - me.timestamp, state == me.state) {
              return;
            }
          }
          this.i.stateHistory.push({
            timestamp : time,
            state : state,
            duration : 0
          });
        }
      };
      /**
       * @return {undefined}
       */
      self.oe = function() {
        if (this.B) {
          var _this = this.B;
          _this.c.forEach(_this.m.bind(_this, true));
        }
        if (this.a) {
          size(this.a);
        }
      };
      /**
       * @param {Object} config
       * @return {?}
       */
      self.od = function(config) {
        /** @type {boolean} */
        this.ga = true;
        this.g.disable();
        var opts = {
          audio : false,
          text : false
        };
        var data = loaded(config, this.na, this.Ya, opts);
        return config = build(config, this.Xa, this.tb, opts), data = template(this, data), config = config[0] || null, this.fa = this.sa = null, data && fn(this, data, true), config && (handle(this, config, true), !assetLoaded(this.a) && (data && (data.audio && (opts.text && (config.language != data.audio.language && (this.w.setTextVisibility(true), pause(this))))))), {
          variant : data,
          text : config
        };
      };
      /**
       * @return {undefined}
       */
      self.Mc = function() {
        /** @type {boolean} */
        this.ga = false;
        if (this.c.abr.enabled) {
          this.g.enable();
        }
        if (this.sa) {
          reduce(this.a, this.sa, this.Vb);
          /** @type {null} */
          this.sa = null;
        }
        if (this.fa) {
          each(this.a, this.fa, true);
          /** @type {null} */
          this.fa = null;
        }
      };
      /**
       * @return {undefined}
       */
      self.ud = function() {
        if (this.l) {
          if (this.l.update) {
            this.l.update();
          }
        }
      };
      /**
       * @return {undefined}
       */
      self.Dd = function() {
        if (this.h) {
          this.h.Fb();
        }
      };
      /**
       * @param {Object} stream
       * @param {boolean} deepDataAndEvents
       * @return {undefined}
       */
      self.Fc = function(stream, deepDataAndEvents) {
        fn(this, stream, true);
        if (this.a) {
          reduce(this.a, stream, deepDataAndEvents || false);
          change(this);
        }
      };
      /**
       * @param {Object} i
       * @param {boolean} deepDataAndEvents
       * @return {undefined}
       */
      self.Ae = function(i, deepDataAndEvents) {
        if (this.a) {
          var acc = assetLoaded(this.a);
          if (acc = streaming(i.audio, i.video, acc ? acc.variants : [])) {
            this.Fc(acc, deepDataAndEvents);
          }
        }
      };
      /**
       * @param {Object} error
       * @return {undefined}
       */
      self.La = function(error) {
        if (!this.I) {
          var event = new EventObject("error", {
            detail : error
          });
          this.dispatchEvent(event);
          if (event.defaultPrevented) {
            /** @type {boolean} */
            error.handled = true;
          }
        }
      };
      /**
       * @param {?} expectedHashCode
       * @return {undefined}
       */
      self.Gd = function(expectedHashCode) {
        if (this.B) {
          this.B.s(expectedHashCode);
        } else {
          this.eb.push(expectedHashCode);
        }
      };
      /**
       * @param {string} event
       * @return {undefined}
       */
      self.pb = function(event) {
        this.dispatchEvent(event);
      };
      /**
       * @return {undefined}
       */
      self.Hd = function() {
        if (this.f.error) {
          var result = this.f.error.code;
          if (1 != result) {
            var dstUri = this.f.error.msExtendedCode;
            if (dstUri) {
              if (0 > dstUri) {
                dstUri += Math.pow(2, 32);
              }
              dstUri = dstUri.toString(16);
            }
            this.La(new error(2, 3, 3016, result, dstUri, this.f.error.message));
          }
        }
      };
      /**
       * @param {Object} updated_doc
       * @return {undefined}
       */
      self.ne = function(updated_doc) {
        /** @type {Array} */
        var map = ["output-restricted", "internal-error"];
        var b = Number(this.a);
        /** @type {boolean} */
        var r = false;
        /** @type {boolean} */
        var keyId = 1 == Object.keys(updated_doc).length && "00" == Object.keys(updated_doc)[0];
        b.variants.forEach(function(item) {
          /** @type {Array} */
          var series = [];
          if (item.audio) {
            series.push(item.audio);
          }
          if (item.video) {
            series.push(item.video);
          }
          series.forEach(function(boundary) {
            var value = item.allowedByKeySystem;
            if (boundary.keyId) {
              boundary = updated_doc[keyId ? "00" : boundary.keyId];
              /** @type {boolean} */
              item.allowedByKeySystem = !!boundary && 0 > map.indexOf(boundary);
            }
            if (value != item.allowedByKeySystem) {
              /** @type {boolean} */
              r = true;
            }
          });
        });
        var media = exists(this.a);
        if (media = streaming(media.audio, media.video, b.variants)) {
          if (!media.allowedByKeySystem) {
            getter(this, b);
          }
        }
        if (r) {
          bootstrap(this);
        }
      };
      /**
       * @param {string} boundary
       * @param {?} deepDataAndEvents
       * @return {undefined}
       */
      self.me = function(boundary, deepDataAndEvents) {
        if (this.l) {
          if (this.l.onExpirationUpdated) {
            this.l.onExpirationUpdated(boundary, deepDataAndEvents);
          }
        }
        this.dispatchEvent(new EventObject("expirationupdated"));
      };
      run("shaka.offline.Storage", t);
      /** @type {function (): ?} */
      t.support = support;
      /**
       * @return {?}
       */
      t.prototype.o = function() {
        var a = this.a;
        var i = this.i ? this.i.o().catch(function() {
        }).then(function() {
          if (a) {
            return a.o();
          }
        }) : Promise.resolve();
        return this.b = this.g = this.i = this.a = null, i;
      };
      /** @type {function (): ?} */
      t.prototype.destroy = t.prototype.o;
      /**
       * @param {?} options
       * @return {undefined}
       */
      t.prototype.configure = function(options) {
        inherit(this.b, options, submit(this), {}, "");
      };
      /** @type {function (?): undefined} */
      t.prototype.configure = t.prototype.configure;
      /**
       * @param {?} expectedHashCode
       * @param {string} value
       * @param {Object} expectedNumberOfNonCommentArgs
       * @return {?}
       */
      t.prototype.ye = function(expectedHashCode, value, expectedNumberOfNonCommentArgs) {
        /**
         * @param {?} value
         * @return {undefined}
         */
        function val(value) {
          mode = value;
        }
        if (this.s) {
          return Promise.reject(new error(2, 9, 9006));
        }
        /** @type {boolean} */
        this.s = true;
        var pdataCur;
        /** @type {null} */
        var mode = null;
        return readdir(this).then(function() {
          return forEach(this), start(this, expectedHashCode, val, expectedNumberOfNonCommentArgs);
        }.bind(this)).then(function(a) {
          if (forEach(this), this.f = a.manifest, this.c = a.Rc, this.f.presentationTimeline.R() || this.f.presentationTimeline.wa()) {
            throw new error(2, 9, 9005, expectedHashCode);
          }
          this.m(this.f.periods);
          /** @type {number} */
          this.h = this.a.c.manifest++;
          /** @type {number} */
          this.l = 0;
          a = value || {};
          var periods = this.f.periods.map(this.C.bind(this));
          var b = this.c.b;
          var codeSegments = pluck(this.c);
          if (b) {
            if (!codeSegments.length) {
              throw new error(2, 9, 9007, expectedHashCode);
            }
            /** @type {Array} */
            b.initData = [];
          }
          return pdataCur = {
            key : this.h,
            originalManifestUri : expectedHashCode,
            duration : this.l,
            size : 0,
            expiration : this.c.jb(),
            periods : periods,
            sessionIds : this.b.usePersistentLicense ? codeSegments : [],
            drmInfo : b,
            appMetadata : a
          }, one(this.i, pdataCur);
        }.bind(this)).then(function() {
          if (forEach(this), mode) {
            throw mode;
          }
          return strictParse(this);
        }.bind(this)).then(function() {
          return listener(pdataCur);
        }.bind(this)).catch(function(dataAndEvents) {
          return strictParse(this).catch(paths).then(function() {
            throw dataAndEvents;
          });
        }.bind(this));
      };
      /** @type {function (?, string, Object): ?} */
      t.prototype.store = t.prototype.ye;
      /**
       * @param {?} keepData
       * @return {?}
       */
      t.prototype.remove = function(keepData) {
        /**
         * @param {?} error
         * @return {undefined}
         */
        function onError(error) {
          if (6013 != error.code) {
            lastError = error;
          }
        }
        var text = keepData.offlineUri;
        /** @type {(Array.<string>|null)} */
        var code = /^offline:([0-9]+)$/.exec(text);
        if (!code) {
          return Promise.reject(new error(2, 9, 9004, text));
        }
        var obj;
        var a;
        /** @type {null} */
        var lastError = null;
        /** @type {number} */
        var camelKey = Number(code[1]);
        return readdir(this).then(function() {
          return forEach(this), this.a.get("manifest", camelKey);
        }.bind(this)).then(function(val) {
          if (forEach(this), !val) {
            throw new error(2, 9, 9003, text);
          }
          return obj = val, val = traverse(obj), (a = new load(this.g.s, onError, function() {
          }, function() {
          })).configure(this.g.getConfiguration().drm), a.init(val, this.b.usePersistentLicense || false);
        }.bind(this)).then(function() {
          return wrap(a, obj.sessionIds);
        }.bind(this)).then(function() {
          return a.o();
        }.bind(this)).then(function() {
          if (forEach(this), lastError) {
            throw lastError;
          }
          var args = obj.periods.map(function(user) {
            return user.streams.map(function(result) {
              var _arr = result.segments.map(function(value) {
                return value = /^offline:[0-9]+\/[0-9]+\/([0-9]+)$/.exec(value.uri), Number(value[1]);
              });
              return result.initSegmentUri && (result = /^offline:[0-9]+\/[0-9]+\/([0-9]+)$/.exec(result.initSegmentUri), _arr.push(Number(result[1]))), _arr;
            }).reduce(options, []);
          }).reduce(options, []);
          /** @type {number} */
          var count = 0;
          var l = args.length;
          var progressCallback = this.b.progressCallback;
          return unbind(this.a, args, function() {
            progressCallback(keepData, ++count / l);
          });
        }.bind(this)).then(function() {
          return forEach(this), this.b.progressCallback(keepData, 1), this.a.remove("manifest", camelKey);
        }.bind(this));
      };
      /** @type {function (?): ?} */
      t.prototype.remove = t.prototype.remove;
      /**
       * @return {?}
       */
      t.prototype.list = function() {
        /** @type {Array} */
        var _results = [];
        return readdir(this).then(function() {
          return forEach(this), this.a.forEach("manifest", function(data) {
            _results.push(listener(data));
          });
        }.bind(this)).then(function() {
          return _results;
        });
      };
      /** @type {function (): ?} */
      t.prototype.list = t.prototype.list;
      /**
       * @param {?} expectedHashCode
       * @return {?}
       */
      t.prototype.B = function(expectedHashCode) {
        var names;
        /** @type {Array} */
        var ret = [];
        var environment = toString(this.g.getConfiguration().preferredAudioLanguage);
        /** @type {Array} */
        var codeSegments = [0, requestFeedForFirstButton, pkgConfig];
        var a = expectedHashCode.filter(function(statement) {
          return "variant" == statement.type;
        });
        /** @type {Array.<?>} */
        codeSegments = codeSegments.map(function(i) {
          return a.filter(function(str) {
            return str = toString(str.language), plural(i, environment, str);
          });
        });
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          if (codeSegments[i].length) {
            names = codeSegments[i];
            break;
          }
        }
        if (!names) {
          if ((codeSegments = a.filter(function(servers) {
            return servers.primary;
          })).length) {
            names = codeSegments;
          }
        }
        if (!names) {
          names = a;
          a.map(function(localize) {
            return localize.language;
          }).filter(src);
        }
        var files = names.filter(function(readBuffer) {
          return readBuffer.height && 480 >= readBuffer.height;
        });
        return files.length && (files.sort(function(b, a) {
          return a.height - b.height;
        }), names = files.filter(function(size1) {
          return size1.height == files[0].height;
        })), names.sort(function(a, b) {
          return a.bandwidth - b.bandwidth;
        }), names.length && ret.push(names[Math.floor(names.length / 2)]), ret.push.apply(ret, expectedHashCode.filter(function(a) {
          return "text" == a.type;
        })), ret;
      };
      /**
       * @param {?} expectedHashCode
       * @return {undefined}
       */
      t.prototype.m = function(expectedHashCode) {
        expectedHashCode.forEach(this.w.bind(this));
      };
      /**
       * @param {?} expectedHashCode
       * @return {undefined}
       */
      t.prototype.w = function(expectedHashCode) {
        var p = {};
        if (this.j) {
          var b = this.j.filter(function(statement) {
            return "variant" == statement.type;
          });
          /** @type {null} */
          var data = null;
          if (b.length) {
            data = cmp(expectedHashCode, b[0]);
          }
          if (data) {
            if (data.video) {
              p.video = data.video;
            }
            if (data.audio) {
              p.audio = data.audio;
            }
          }
        }
        map(this.c, p, expectedHashCode);
        formatError(expectedHashCode, this.g.getConfiguration().restrictions, {
          width : 1 / 0,
          height : 1 / 0
        });
      };
      /**
       * @param {Object} value
       * @return {?}
       */
      t.prototype.C = function(value) {
        var options;
        var x;
        var items = message(value, null, null);
        var i = print(value, null);
        items = this.b.trackSelectionCallback(items.concat(i));
        if (!this.j) {
          this.j = items;
          this.m(this.f.periods);
        }
        /** @type {number} */
        i = items.length - 1;
        for (;0 < i;--i) {
          /** @type {boolean} */
          var errors = false;
          /** @type {number} */
          x = i - 1;
          for (;0 <= x;--x) {
            if (items[i].type == items[x].type && (items[i].kind == items[x].kind && items[i].language == items[x].language)) {
              /** @type {boolean} */
              errors = true;
              break;
            }
          }
          if (errors) {
            break;
          }
        }
        /** @type {Array} */
        errors = [];
        /** @type {number} */
        i = 0;
        for (;i < items.length;i++) {
          if (options = cmp(value, items[i])) {
            if (options.audio) {
              if (x = errors.filter(function(elem) {
                return elem.id == options.audio.id;
              })[0]) {
                x.variantIds.push(options.id);
              } else {
                x = options.video ? options.bandwidth / 2 : options.bandwidth;
                errors.push(add(this, value, options.audio, x, options.id));
              }
            }
            if (options.video) {
              if (x = errors.filter(function(elem) {
                return elem.id == options.video.id;
              })[0]) {
                x.variantIds.push(options.id);
              } else {
                x = options.audio ? options.bandwidth / 2 : options.bandwidth;
                errors.push(add(this, value, options.video, x, options.id));
              }
            }
          } else {
            errors.push(add(this, value, serialize(value, items[i]), 0));
          }
        }
        return{
          startTime : value.startTime,
          streams : errors
        };
      };
      /** @type {function (): ?} */
      files.offline = support;
      run("shaka.polyfill.installAll", function() {
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;++i) {
          codeSegments[i]();
        }
      });
      /** @type {Array} */
      var codeSegments = [];
      run("shaka.polyfill.register", expected);
      expected(function() {
        if (global.Document) {
          var element = Element.prototype;
          /** @type {function (this:Element): ?} */
          element.requestFullscreen = element.requestFullscreen || (element.mozRequestFullScreen || (element.msRequestFullscreen || element.webkitRequestFullscreen));
          /** @type {function (this:Document): ?} */
          (element = Document.prototype).exitFullscreen = element.exitFullscreen || (element.mozCancelFullScreen || (element.msExitFullscreen || element.webkitExitFullscreen));
          if (!("fullscreenElement" in document)) {
            Object.defineProperty(document, "fullscreenElement", {
              /**
               * @return {?}
               */
              get : function() {
                return document.mozFullScreenElement || (document.msFullscreenElement || document.webkitFullscreenElement);
              }
            });
            Object.defineProperty(document, "fullscreenEnabled", {
              /**
               * @return {?}
               */
              get : function() {
                return document.mozFullScreenEnabled || (document.msFullscreenEnabled || document.webkitFullscreenEnabled);
              }
            });
          }
          document.addEventListener("webkitfullscreenchange", onTouchEnd);
          document.addEventListener("webkitfullscreenerror", onTouchEnd);
          document.addEventListener("mozfullscreenchange", onTouchEnd);
          document.addEventListener("mozfullscreenerror", onTouchEnd);
          document.addEventListener("MSFullscreenChange", onTouchEnd);
          document.addEventListener("MSFullscreenError", onTouchEnd);
        }
      });
      expected(function() {
        /** @type {string} */
        var UA = navigator.userAgent;
        if (UA) {
          if (0 <= UA.indexOf("CrKey")) {
            delete global.indexedDB;
          }
        }
      });
      var addEventListener;
      expected(function() {
        if (!(0 > navigator.userAgent.indexOf("Trident/"))) {
          if (!(HTMLInputElement.prototype.addEventListener == eventHandler)) {
            /** @type {function (this:Node, string, (EventListener|function ((Event|null)): (boolean|undefined)|null), boolean): undefined} */
            addEventListener = HTMLInputElement.prototype.addEventListener;
            /** @type {function (string, Function, boolean): undefined} */
            HTMLInputElement.prototype.addEventListener = eventHandler;
          }
        }
      });
      expected(function() {
        if (4503599627370497 != Math.round(4503599627370497)) {
          /** @type {function (*): number} */
          var round = Math.round;
          /**
           * @param {*} x
           * @return {number}
           */
          Math.round = function(x) {
            /** @type {*} */
            var left = x;
            return 4503599627370496 >= x && (left = round(x)), left;
          };
        }
      });
      /**
       * @param {?} expectedHashCode
       * @return {undefined}
       */
      d.prototype.c = function(expectedHashCode) {
        if (!(1 < expectedHashCode.version)) {
          var copies = cycle(expectedHashCode.u.Ja(16));
          /** @type {Array} */
          var assigns = [];
          if (0 < expectedHashCode.version) {
            var attributes = expectedHashCode.u.F();
            /** @type {number} */
            var i = 0;
            for (;i < attributes;++i) {
              var vvar = cycle(expectedHashCode.u.Ja(16));
              assigns.push(vvar);
            }
          }
          attributes = expectedHashCode.u.F();
          expectedHashCode.u.J(attributes);
          this.b.push.apply(this.b, assigns);
          this.f.push(copies);
          this.a.push({
            start : expectedHashCode.start,
            end : expectedHashCode.start + expectedHashCode.size - 1
          });
        }
      };
      /**
       * @return {?}
       */
      win.prototype.createMediaKeys = function() {
        var val = new Sprite(this.keySystem);
        return Promise.resolve(val);
      };
      /**
       * @return {?}
       */
      win.prototype.getConfiguration = function() {
        return this.a;
      };
      /**
       * @param {string} update
       * @return {?}
       */
      Sprite.prototype.createSession = function(update) {
        if ("temporary" != (update || "temporary")) {
          throw new TypeError("Session type " + update + " is unsupported on this platform.");
        }
        return new Map(this.a);
      };
      /**
       * @return {?}
       */
      Sprite.prototype.setServerCertificate = function() {
        return Promise.resolve(false);
      };
      __extends(Map);
      /**
       * @param {?} v00
       * @param {?} array
       * @return {?}
       */
      (self = Map.prototype).generateRequest = function(v00, array) {
        this.a = new Point;
        try {
          this.c = this.g.createSession("video/mp4", new Uint8Array(array), null);
          callback(this.f, this.c, "mskeymessage", this.yd.bind(this));
          callback(this.f, this.c, "mskeyadded", this.wd.bind(this));
          callback(this.f, this.c, "mskeyerror", this.xd.bind(this));
          triggerEvent(this, "status-pending");
        } catch (ex) {
          this.a.reject(ex);
        }
        return this.a;
      };
      /**
       * @return {?}
       */
      self.load = function() {
        return Promise.reject(Error("MediaKeySession.load not yet supported"));
      };
      /**
       * @param {string} bytes
       * @return {?}
       */
      self.update = function(bytes) {
        this.b = new Point;
        try {
          this.c.update(new Uint8Array(bytes));
        } catch (ex) {
          this.b.reject(ex);
        }
        return this.b;
      };
      /**
       * @return {?}
       */
      self.close = function() {
        try {
          this.c.close();
          this.closed.resolve();
          clean(this.f);
        } catch (ex) {
          this.closed.reject(ex);
        }
        return this.closed;
      };
      /**
       * @return {?}
       */
      self.remove = function() {
        return Promise.reject(Error("MediaKeySession.remove is only applicable for persistent licenses, which are not supported on this platform"));
      };
      /**
       * @param {Error} e
       * @return {undefined}
       */
      self.yd = function(e) {
        if (this.a) {
          this.a.resolve();
          /** @type {null} */
          this.a = null;
        }
        this.dispatchEvent(new EventObject("message", {
          messageType : void 0 == this.keyStatuses.a ? "licenserequest" : "licenserenewal",
          message : e.message.buffer
        }));
      };
      /**
       * @return {undefined}
       */
      self.wd = function() {
        if (this.a) {
          triggerEvent(this, "usable");
          this.a.resolve();
          /** @type {null} */
          this.a = null;
        } else {
          if (this.b) {
            triggerEvent(this, "usable");
            this.b.resolve();
            /** @type {null} */
            this.b = null;
          }
        }
      };
      /**
       * @return {undefined}
       */
      self.xd = function() {
        /** @type {Error} */
        var e = Error("EME PatchedMediaKeysMs key error");
        if (e.errorCode = this.c.error, this.a) {
          this.a.reject(e);
          /** @type {null} */
          this.a = null;
        } else {
          if (this.b) {
            this.b.reject(e);
            /** @type {null} */
            this.b = null;
          } else {
            switch(this.c.error.code) {
              case MSMediaKeyError.MS_MEDIA_KEYERR_OUTPUT:
              ;
              case MSMediaKeyError.MS_MEDIA_KEYERR_HARDWARECHANGE:
                triggerEvent(this, "output-not-allowed");
              default:
                triggerEvent(this, "internal-error");
            }
          }
        }
      };
      var computed;
      /**
       * @param {Function} elem
       * @return {undefined}
       */
      (self = Anchor.prototype).forEach = function(elem) {
        if (this.a) {
          elem(this.a, computed);
        }
      };
      /**
       * @param {?} expectedHashCode
       * @return {?}
       */
      self.get = function(expectedHashCode) {
        if (this.has(expectedHashCode)) {
          return this.a;
        }
      };
      /**
       * @param {?} expectedHashCode
       * @return {?}
       */
      self.has = function(expectedHashCode) {
        var result = computed;
        return!(!this.a || !drag(new Uint8Array(expectedHashCode), new Uint8Array(result)));
      };
      /**
       * @return {undefined}
       */
      self.entries = function() {
      };
      /**
       * @return {undefined}
       */
      self.keys = function() {
      };
      /**
       * @return {undefined}
       */
      self.values = function() {
      };
      /**
       * @return {undefined}
       */
      _URL.prototype.createSession = function() {
      };
      /**
       * @return {undefined}
       */
      _URL.prototype.setServerCertificate = function() {
      };
      /**
       * @return {undefined}
       */
      fromUtf8.prototype.getConfiguration = function() {
      };
      /**
       * @return {undefined}
       */
      fromUtf8.prototype.createMediaKeys = function() {
      };
      /** @type {string} */
      var fromIndex = "";
      /**
       * @return {?}
       */
      log.prototype.createMediaKeys = function() {
        var val = new matrixTransform(this.a);
        return Promise.resolve(val);
      };
      /**
       * @return {?}
       */
      log.prototype.getConfiguration = function() {
        return this.b;
      };
      /**
       * @param {string} b
       * @return {?}
       */
      (self = matrixTransform.prototype).createSession = function(b) {
        var expectedHashCode = b || "temporary";
        if ("temporary" != expectedHashCode && "persistent-license" != expectedHashCode) {
          throw new TypeError("Session type " + b + " is unsupported on this platform.");
        }
        return(b = this.b || document.createElement("video")).src || (b.src = "about:blank"), expectedHashCode = new draw(b, this.g, expectedHashCode), this.c.push(expectedHashCode), expectedHashCode;
      };
      /**
       * @return {?}
       */
      self.setServerCertificate = function() {
        return Promise.resolve(false);
      };
      /**
       * @param {?} item
       * @return {undefined}
       */
      self.Ld = function(item) {
        /** @type {(Event|null)} */
        var event = document.createEvent("CustomEvent");
        event.initCustomEvent("encrypted", false, false, null);
        /** @type {string} */
        event.initDataType = "webm";
        event.initData = item.initData;
        this.b.dispatchEvent(event);
      };
      /**
       * @param {Object} e
       * @return {undefined}
       */
      self.Kd = function(e) {
        var c = cache(this, e.sessionId);
        if (c) {
          e = new EventObject("message", {
            messageType : void 0 == c.keyStatuses.a ? "licenserequest" : "licenserenewal",
            message : e.message
          });
          if (c.b) {
            c.b.resolve();
            /** @type {null} */
            c.b = null;
          }
          c.dispatchEvent(e);
        }
      };
      /**
       * @param {Object} d
       * @return {undefined}
       */
      self.Id = function(d) {
        if (d = cache(this, d.sessionId)) {
          radius(d, "usable");
          if (d.a) {
            d.a.resolve();
          }
          /** @type {null} */
          d.a = null;
        }
      };
      /**
       * @param {Object} req
       * @return {undefined}
       */
      self.Jd = function(req) {
        var d = cache(this, req.sessionId);
        if (d) {
          /** @type {Error} */
          var err = Error("EME v0.1b key error");
          err.errorCode = req.errorCode;
          err.errorCode.systemCode = req.systemCode;
          if (!req.sessionId && d.b) {
            /** @type {string} */
            err.method = "generateRequest";
            if (45 == req.systemCode) {
              /** @type {string} */
              err.message = "Unsupported session type.";
            }
            d.b.reject(err);
            /** @type {null} */
            d.b = null;
          } else {
            if (req.sessionId && d.a) {
              /** @type {string} */
              err.method = "update";
              d.a.reject(err);
              /** @type {null} */
              d.a = null;
            } else {
              err = req.systemCode;
              if (req.errorCode.code == MediaKeyError.MEDIA_KEYERR_OUTPUT) {
                radius(d, "output-restricted");
              } else {
                if (1 == err) {
                  radius(d, "expired");
                } else {
                  radius(d, "internal-error");
                }
              }
            }
          }
        }
      };
      __extends(draw);
      /**
       * @param {?} args
       * @param {(Object|number)} value
       * @return {undefined}
       */
      (self = draw.prototype).Rb = function(args, value) {
        if (this.a) {
          this.a.then(this.Rb.bind(this, args, value)).catch(this.Rb.bind(this, args, value));
        } else {
          if (this.a = args, "webkit-org.w3.clearkey" == this.c) {
            var data = text(value);
            /** @type {*} */
            var config = JSON.parse(data);
            if ("oct" != config.keys[0].kty) {
              this.a.reject(Error("Response is not a valid JSON Web Key Set."));
              /** @type {null} */
              this.a = null;
            }
            data = reset(config.keys[0].k);
            config = reset(config.keys[0].kid);
          } else {
            /** @type {Uint8Array} */
            data = new Uint8Array(value);
            /** @type {null} */
            config = null;
          }
          var name = capitalize("addKey");
          try {
            this.f[name](this.c, data, config, this.sessionId);
          } catch (ex) {
            this.a.reject(ex);
            /** @type {null} */
            this.a = null;
          }
        }
      };
      /**
       * @param {?} v00
       * @param {?} k
       * @return {?}
       */
      self.generateRequest = function(v00, k) {
        return set(this, k, null);
      };
      /**
       * @param {string} url
       * @return {?}
       */
      self.load = function(url) {
        return "persistent-license" == this.g ? set(this, null, url) : Promise.reject(Error("Not a persistent session."));
      };
      /**
       * @param {string} bytes
       * @return {?}
       */
      self.update = function(bytes) {
        var typePattern = new Point;
        return this.Rb(typePattern, bytes), typePattern;
      };
      /**
       * @return {?}
       */
      self.close = function() {
        if ("persistent-license" != this.g) {
          if (!this.sessionId) {
            return this.closed.reject(Error("The session is not callable.")), this.closed;
          }
          var desc = capitalize("cancelKeyRequest");
          try {
            this.f[desc](this.c, this.sessionId);
          } catch (t) {
          }
        }
        return this.closed.resolve(), this.closed;
      };
      /**
       * @return {?}
       */
      self.remove = function() {
        return "persistent-license" != this.g ? Promise.reject(Error("Not a persistent session.")) : this.close();
      };
      var ber;
      /**
       * @param {Function} elem
       * @return {undefined}
       */
      (self = Particle.prototype).forEach = function(elem) {
        if (this.a) {
          elem(this.a, ber);
        }
      };
      /**
       * @param {?} expectedHashCode
       * @return {?}
       */
      self.get = function(expectedHashCode) {
        if (this.has(expectedHashCode)) {
          return this.a;
        }
      };
      /**
       * @param {?} expectedHashCode
       * @return {?}
       */
      self.has = function(expectedHashCode) {
        var array = ber;
        return!(!this.a || !drag(new Uint8Array(expectedHashCode), new Uint8Array(array)));
      };
      /**
       * @return {undefined}
       */
      self.entries = function() {
      };
      /**
       * @return {undefined}
       */
      self.keys = function() {
      };
      /**
       * @return {undefined}
       */
      self.values = function() {
      };
      expected(function() {
        if (!!global.HTMLVideoElement) {
          if (!(navigator.requestMediaKeySystemAccess && MediaKeySystemAccess.prototype.getConfiguration)) {
            if (HTMLMediaElement.prototype.webkitGenerateKeyRequest) {
              define("webkit");
            } else {
              if (HTMLMediaElement.prototype.generateKeyRequest) {
                define("");
              } else {
                if (global.MSMediaKeys) {
                  /** @type {ArrayBuffer} */
                  computed = (new Uint8Array([0])).buffer;
                  delete HTMLMediaElement.prototype.mediaKeys;
                  /** @type {null} */
                  HTMLMediaElement.prototype.mediaKeys = null;
                  /** @type {function (Error): ?} */
                  HTMLMediaElement.prototype.setMediaKeys = CLASS;
                  /** @type {function (Function): undefined} */
                  global.MediaKeys = Sprite;
                  /** @type {function (Function, Array): ?} */
                  global.MediaKeySystemAccess = win;
                  /** @type {function (Function, Function): ?} */
                  navigator.requestMediaKeySystemAccess = condition;
                } else {
                  /** @type {function (): ?} */
                  navigator.requestMediaKeySystemAccess = fallback;
                  delete HTMLMediaElement.prototype.mediaKeys;
                  /** @type {null} */
                  HTMLMediaElement.prototype.mediaKeys = null;
                  /** @type {function (Array): ?} */
                  HTMLMediaElement.prototype.setMediaKeys = emit;
                  /** @type {function (): ?} */
                  global.MediaKeys = _URL;
                  /** @type {function (): ?} */
                  global.MediaKeySystemAccess = fromUtf8;
                }
              }
            }
          }
        }
      });
      expected(function() {
        if (global.MediaSource) {
          if (global.cast && (cast.__platform__ && cast.__platform__.canDisplayType)) {
            throttledUpdate();
          } else {
            if (navigator.vendor && 0 <= navigator.vendor.indexOf("Apple")) {
              /** @type {string} */
              var appVersion = navigator.appVersion;
              if (0 <= appVersion.indexOf("Version/8")) {
                /** @type {null} */
                global.MediaSource = null;
              } else {
                if (0 <= appVersion.indexOf("Version/9")) {
                  objectToString();
                } else {
                  if (0 <= appVersion.indexOf("Version/10")) {
                    objectToString();
                    addToWrapper();
                  }
                }
              }
            }
          }
        }
      });
      /** @type {number} */
      var opt_type = 0;
      /**
       * @param {Function} selector
       * @param {Function} rejectCallback
       * @return {?}
       */
      Promise.prototype.then = function(selector, rejectCallback) {
        var self = new Promise;
        switch(this.Aa) {
          case 1:
            notify(this, self, selector);
            break;
          case 2:
            notify(this, self, rejectCallback);
            break;
          case opt_type:
            this.c.push({
              N : self,
              /** @type {Function} */
              vb : selector
            });
            this.b.push({
              N : self,
              /** @type {Function} */
              vb : rejectCallback
            });
        }
        return self;
      };
      /**
       * @param {Function} rejectCallback
       * @return {?}
       */
      Promise.prototype.catch = function(rejectCallback) {
        return this.then(void 0, rejectCallback);
      };
      /**
       * @param {?} n
       * @return {undefined}
       */
      Promise.prototype.ka = function(n) {
        if (this.Aa == opt_type) {
          this.rb = n;
          /** @type {number} */
          this.Aa = 1;
          /** @type {number} */
          n = 0;
          for (;n < this.c.length;++n) {
            notify(this, this.c[n].N, this.c[n].vb);
          }
          /** @type {Array} */
          this.c = [];
          /** @type {Array} */
          this.b = [];
        }
      };
      /**
       * @param {?} expectedHashCode
       * @return {undefined}
       */
      Promise.prototype.a = function(expectedHashCode) {
        if (this.Aa == opt_type) {
          this.rb = expectedHashCode;
          /** @type {number} */
          this.Aa = 2;
          /** @type {number} */
          expectedHashCode = 0;
          for (;expectedHashCode < this.b.length;++expectedHashCode) {
            notify(this, this.b[expectedHashCode].N, this.b[expectedHashCode].vb);
          }
          /** @type {Array} */
          this.c = [];
          /** @type {Array} */
          this.b = [];
        }
      };
      /** @type {null} */
      var modId = null;
      /** @type {Array} */
      var yels = [];
      expected(function(dataAndEvents) {
        if (global.setImmediate) {
          /**
           * @param {Function} f
           * @return {?}
           */
          tryIt = function(f) {
            return global.setImmediate(f);
          };
          /**
           * @param {?} id
           * @return {?}
           */
          cancelAnimationFrame = function(id) {
            return global.clearImmediate(id);
          };
        } else {
          /**
           * @param {Function} f
           * @return {?}
           */
          tryIt = function(f) {
            return global.setTimeout(f, 0);
          };
          /**
           * @param {?} id
           * @return {?}
           */
          cancelAnimationFrame = function(id) {
            return global.clearTimeout(id);
          };
        }
        if (!(global.Promise && !dataAndEvents)) {
          /** @type {function (Function): undefined} */
          global.Promise = Promise;
          /** @type {function (boolean): ?} */
          global.Promise.resolve = transport;
          /** @type {function (?): ?} */
          global.Promise.reject = assertHashcodeEquals;
          /** @type {function (Array): ?} */
          global.Promise.all = chain;
          /** @type {function (Array): ?} */
          global.Promise.race = sync;
          /** @type {function (Function, Function): ?} */
          global.Promise.prototype.then = Promise.prototype.then;
          /** @type {function (Function): ?} */
          global.Promise.prototype.catch = Promise.prototype.catch;
        }
      });
      expected(function() {
        if (global.HTMLMediaElement) {
          /** @type {function (this:HTMLMediaElement): ?} */
          var matcherFunction = HTMLMediaElement.prototype.play;
          /**
           * @return {?}
           */
          HTMLMediaElement.prototype.play = function() {
            var promise = matcherFunction.apply(this, arguments);
            return promise && promise.catch(function() {
            }), promise;
          };
        }
      });
      expected(function() {
        if (global.HTMLVideoElement) {
          var el = HTMLVideoElement.prototype;
          if (!el.getVideoPlaybackQuality) {
            if ("webkitDroppedFrameCount" in el) {
              /** @type {function (): ?} */
              el.getVideoPlaybackQuality = node;
            }
          }
        }
      });
      expected(function() {
        if (!global.VTTCue && global.TextTrackCue) {
          var cnl = TextTrackCue.length;
          if (3 == cnl) {
            /** @type {function (number, number, string): ?} */
            global.VTTCue = createDom;
          } else {
            if (6 == cnl) {
              /** @type {function (string, number, string): ?} */
              global.VTTCue = value;
            } else {
              try {
                /** @type {boolean} */
                var n = !!createDom(1, 2, "");
              } catch (t) {
                /** @type {boolean} */
                n = false;
              }
              if (n) {
                /** @type {function (number, number, string): ?} */
                global.VTTCue = createDom;
              }
            }
          }
        }
      });
      run("shaka.text.Cue", format);
      /** @type {string} */
      var AUTO = "auto";
      format.positionAlign = {
        LEFT : "line-left",
        RIGHT : "line-right",
        CENTER : "center",
        AUTO : AUTO
      };
      /** @type {string} */
      var CENTER = "center";
      var KEY_NAMES = {
        LEFT : "left",
        RIGHT : "right",
        CENTER : CENTER,
        START : "start",
        END : "end"
      };
      format.textAlign = KEY_NAMES;
      /** @type {string} */
      var j = "before";
      var pathParts = {
        BEFORE : j,
        CENTER : "center",
        AFTER : "after"
      };
      format.displayAlign = pathParts;
      /** @type {number} */
      var b = 0;
      /** @type {number} */
      var m = 2;
      /** @type {number} */
      var y = 3;
      format.writingDirection = {
        Me : b,
        Ne : 1,
        Ve : m,
        We : y
      };
      /** @type {number} */
      var v = 0;
      /** @type {number} */
      var g = 1;
      format.lineInterpretation = {
        Oe : v,
        Te : g
      };
      /** @type {string} */
      var h = "center";
      var textNodes = {
        CENTER : h,
        START : "start",
        END : "end"
      };
      format.lineAlign = textNodes;
      /** @type {number} */
      var D = 400;
      format.fontWeight = {
        Re : D,
        Ke : 700
      };
      /** @type {string} */
      var NORMAL = "normal";
      var fontStyle = {
        NORMAL : NORMAL,
        ITALIC : "italic",
        OBLIQUE : "oblique"
      };
      format.fontStyle = fontStyle;
      format.textDecoration = {
        Ue : "underline",
        Pe : "lineThrough",
        Se : "overline"
      };
      /**
       * @return {undefined}
       */
      pdataCur.prototype.parseInit = function() {
      };
      /**
       * @param {(Object|number)} scope
       * @param {?} opt_attributes
       * @return {?}
       */
      pdataCur.prototype.parseMedia = function(scope, opt_attributes) {
        var value = text(scope);
        /** @type {Array} */
        var eventPath = [];
        /** @type {DOMParser} */
        var parser = new DOMParser;
        /** @type {null} */
        var xml = null;
        try {
          /** @type {(Document|null)} */
          xml = parser.parseFromString(value, "text/xml");
        } catch (t) {
          throw new error(2, 2, 2005);
        }
        if (xml) {
          var n = xml.getElementsByTagName("tt")[0];
          if (!n) {
            throw new error(2, 2, 2005);
          }
          parser = n.getAttribute("ttp:frameRate");
          xml = n.getAttribute("ttp:subFrameRate");
          var m4 = n.getAttribute("ttp:frameRateMultiplier");
          var i = n.getAttribute("ttp:tickRate");
          if ("default" != (value = n.getAttribute("xml:space") || "default") && "preserve" != value) {
            throw new error(2, 2, 2005);
          }
          /** @type {boolean} */
          value = "default" == value;
          parser = new getParam(parser, xml, m4, i);
          xml = parseNode(n.getElementsByTagName("styling")[0]);
          m4 = parseNode(n.getElementsByTagName("layout")[0]);
          n = parseNode(n.getElementsByTagName("body")[0]);
          /** @type {number} */
          i = 0;
          for (;i < n.length;i++) {
            var node = n[i];
            var expectedHashCode = opt_attributes.periodStart;
            var camelKey = parser;
            var pdataCur = xml;
            var item = m4;
            /** @type {boolean} */
            var ret = value;
            if (node.hasAttribute("begin") || (node.hasAttribute("end") || !/^\s*$/.test(node.textContent))) {
              convert(node, ret);
              ret = parseTime(node.getAttribute("begin"), camelKey);
              var data = parseTime(node.getAttribute("end"), camelKey);
              camelKey = parseTime(node.getAttribute("dur"), camelKey);
              var id = node.textContent;
              if (null == data && (null != camelKey && (data = ret + camelKey)), null == ret || null == data) {
                throw new error(2, 2, 2001);
              }
              expectedHashCode = new format(ret + expectedHashCode, data + expectedHashCode, id);
              ret = put(node, "region", item);
              item = expectedHashCode;
              if (data = transform(node, ret, pdataCur, "tts:extent")) {
                if (data = rquickExpr.exec(data)) {
                  /** @type {number} */
                  item.size = Number(data[1]);
                }
              }
              if ("rtl" == transform(node, ret, pdataCur, "tts:direction")) {
                /** @type {number} */
                item.b = 1;
              }
              if ("tb" == (data = transform(node, ret, pdataCur, "tts:writingMode")) || "tblr" == data) {
                /** @type {number} */
                item.b = m;
              } else {
                if ("tbrl" == data) {
                  /** @type {number} */
                  item.b = y;
                } else {
                  if ("rltb" == data || "rl" == data) {
                    /** @type {number} */
                    item.b = 1;
                  } else {
                    if (data) {
                      /** @type {number} */
                      item.b = b;
                    }
                  }
                }
              }
              if (data = transform(node, ret, pdataCur, "tts:origin")) {
                if (data = rquickExpr.exec(data)) {
                  if (item.b == b || 1 == item.b) {
                    /** @type {number} */
                    item.position = Number(data[1]);
                    /** @type {number} */
                    item.c = Number(data[2]);
                  } else {
                    /** @type {number} */
                    item.position = Number(data[2]);
                    /** @type {number} */
                    item.c = Number(data[1]);
                  }
                  /** @type {number} */
                  item.g = g;
                }
              }
              if (data = transform(node, ret, pdataCur, "tts:textAlign")) {
                item.i = textAlignMap[data];
                item.h = offsets[data];
                item.f = KEY_NAMES[data.toUpperCase()];
              }
              if (data = transform(node, ret, pdataCur, "tts:displayAlign")) {
                item.j = pathParts[data.toUpperCase()];
              }
              if (data = transform(node, ret, pdataCur, "tts:color")) {
                item.s = data;
              }
              if (data = transform(node, ret, pdataCur, "tts:backgroundColor")) {
                item.m = data;
              }
              if (data = transform(node, ret, pdataCur, "tts:fontFamily")) {
                item.w = data;
              }
              if (data = transform(node, ret, pdataCur, "tts:fontWeight")) {
                if ("bold" == data) {
                  /** @type {number} */
                  item.D = 700;
                }
              }
              if (data = transform(node, ret, pdataCur, "tts:wrapOption")) {
                if ("noWrap" == data) {
                  /** @type {boolean} */
                  item.O = false;
                }
              }
              if (data = transform(node, ret, pdataCur, "tts:lineHeight")) {
                if (data.match(typePattern)) {
                  item.I = data;
                }
              }
              if (data = transform(node, ret, pdataCur, "tts:fontSize")) {
                if (data.match(typePattern)) {
                  item.B = data;
                }
              }
              if (data = transform(node, ret, pdataCur, "tts:fontStyle")) {
                item.C = fontStyle[data.toUpperCase()];
              }
              if (ret = xor(ret, pdataCur, "tts:textDecoration")) {
                validator(item, ret);
              }
              if (node = traverseNode(node, pdataCur, "tts:textDecoration")) {
                validator(item, node);
              }
            } else {
              /** @type {null} */
              expectedHashCode = null;
            }
            if (expectedHashCode) {
              eventPath.push(expectedHashCode);
            }
          }
        }
        return eventPath;
      };
      /** @type {RegExp} */
      var spaceRe = /^(\d{2,}):(\d{2}):(\d{2}):(\d{2})\.?(\d+)?$/;
      /** @type {RegExp} */
      var re = /^(?:(\d{2,}):)?(\d{2}):(\d{2})$/;
      /** @type {RegExp} */
      var cx = /^(?:(\d{2,}):)?(\d{2}):(\d{2}\.\d{2,})$/;
      /** @type {RegExp} */
      var reName = /^(\d*\.?\d*)f$/;
      /** @type {RegExp} */
      var rsingleTag = /^(\d*\.?\d*)t$/;
      /** @type {RegExp} */
      var args = /^(?:(\d*\.?\d*)h)?(?:(\d*\.?\d*)m)?(?:(\d*\.?\d*)s)?(?:(\d*\.?\d*)ms)?$/;
      /** @type {RegExp} */
      var rquickExpr = /^(\d{1,2}|100)% (\d{1,2}|100)%$/;
      /** @type {RegExp} */
      var typePattern = /^(\d+px|\d+em)$/;
      var offsets = {
        left : "start",
        center : "center",
        right : "end",
        start : "start",
        end : "end"
      };
      var textAlignMap = {
        left : "line-left",
        center : "center",
        right : "line-right"
      };
      fix("application/ttml+xml", pdataCur);
      /**
       * @param {string} s
       * @return {undefined}
       */
      className.prototype.parseInit = function(s) {
        /** @type {boolean} */
        var e = false;
        if ((new store).G("moov", results).G("trak", results).G("mdia", results).G("minf", results).G("stbl", results).aa("stsd", prefixed).G("stpp", function() {
          /** @type {boolean} */
          e = true;
        }).parse(s), !e) {
          throw new error(2, 2, 2007);
        }
      };
      /**
       * @param {string} s
       * @param {?} opt_attributes
       * @return {?}
       */
      className.prototype.parseMedia = function(s, opt_attributes) {
        /** @type {boolean} */
        var n = false;
        /** @type {Array} */
        var retrievedContext = [];
        if ((new store).G("mdat", close(function(a) {
          /** @type {boolean} */
          n = true;
          retrievedContext = this.a.parseMedia(a.buffer, opt_attributes);
        }.bind(this))).parse(s), !n) {
          throw new error(2, 2, 2007);
        }
        return retrievedContext;
      };
      fix('application/mp4; codecs="stpp"', className);
      fix('application/mp4; codecs="stpp.TTML.im1t"', className);
      /**
       * @return {undefined}
       */
      ctorA.prototype.parseInit = function() {
      };
      /**
       * @param {(Object|number)} selector
       * @param {?} opt_attributes
       * @return {?}
       */
      ctorA.prototype.parseMedia = function(selector, opt_attributes) {
        var match = (match = (match = text(selector)).replace(/\r\n|\r(?=[^\n]|$)/gm, "\n")).split(/\n{2,}/m);
        if (!/^WEBVTT($|[ \t\n])/m.test(match[0])) {
          throw new error(2, 2, 2E3);
        }
        var destination = opt_attributes.segmentStart;
        if (0 <= match[0].indexOf("X-TIMESTAMP-MAP")) {
          var i = match[0].match(/LOCAL:((?:(\d{1,}):)?(\d{2}):(\d{2})\.(\d{3}))/m);
          var parsedData = match[0].match(/MPEGTS:(\d+)/m);
          if (i) {
            if (parsedData) {
              destination = sign(new _overlap_interval(i[1]));
              destination = opt_attributes.periodStart + (Number(parsedData[1]) / 9E4 - destination);
            }
          }
        }
        /** @type {Array} */
        parsedData = [];
        /** @type {number} */
        i = 1;
        for (;i < match.length;i++) {
          var stack = match[i].split("\n");
          var result = destination;
          if (1 == stack.length && !stack[0] || /^NOTE($|[ \t])/.test(stack[0])) {
            /** @type {null} */
            var expectedHashCode = null
          } else {
            /** @type {null} */
            expectedHashCode = null;
            if (0 > stack[0].indexOf("--\x3e")) {
              expectedHashCode = stack[0];
              stack.splice(0, 1);
            }
            var data = new _overlap_interval(stack[0]);
            var diff = sign(data);
            var str = encodeURIComponent(data, /[ \t]+--\x3e[ \t]+/g);
            var header = sign(data);
            if (null == diff || (!str || null == header)) {
              throw new error(2, 2, 2001);
            }
            stack = new format(diff + result, header + result, stack.slice(1).join("\n").trim());
            encodeURIComponent(data, /[ \t]+/gm);
            result = escape(data);
            for (;result;) {
              center(stack, result);
              encodeURIComponent(data, /[ \t]+/gm);
              result = escape(data);
            }
            if (null != expectedHashCode) {
              stack.id = expectedHashCode;
            }
            expectedHashCode = stack;
          }
          if (expectedHashCode) {
            parsedData.push(expectedHashCode);
          }
        }
        return parsedData;
      };
      fix("text/vtt", ctorA);
      fix('text/vtt; codecs="vtt"', ctorA);
      /**
       * @param {string} s
       * @return {undefined}
       */
      udataCur.prototype.parseInit = function(s) {
        /** @type {boolean} */
        var e = false;
        if ((new store).G("moov", results).G("trak", results).G("mdia", results).aa("mdhd", function(b) {
          if (0 == b.version) {
            b.u.J(4);
            b.u.J(4);
            this.a = b.u.F();
            b.u.J(4);
          } else {
            b.u.J(8);
            b.u.J(8);
            this.a = b.u.F();
            b.u.J(8);
          }
          b.u.J(4);
        }.bind(this)).G("minf", results).G("stbl", results).aa("stsd", prefixed).G("wvtt", function() {
          /** @type {boolean} */
          e = true;
        }).parse(s), !this.a) {
          throw new error(2, 2, 2008);
        }
        if (!e) {
          throw new error(2, 2, 2008);
        }
      };
      /**
       * @param {string} s
       * @param {?} opt_attributes
       * @return {?}
       */
      udataCur.prototype.parseMedia = function(s, opt_attributes) {
        /** @type {number} */
        var id_ = 0;
        /** @type {Array} */
        var codeSegments = [];
        /** @type {Array} */
        var data = [];
        /** @type {Array} */
        var out = [];
        /** @type {boolean} */
        var object = false;
        /** @type {boolean} */
        var property = false;
        /** @type {boolean} */
        var c = false;
        /** @type {null} */
        var duration = null;
        if ((new store).G("moof", results).G("traf", results).aa("tfdt", function(b) {
          /** @type {boolean} */
          object = true;
          id_ = b.version ? b.u.Ta() : b.u.F();
        }).aa("tfhd", function(params) {
          var len = params.ac;
          (params = params.u).J(4);
          if (1 & len) {
            params.J(8);
          }
          if (2 & len) {
            params.J(4);
          }
          duration = 8 & len ? params.F() : null;
        }).aa("trun", function(obj) {
          /** @type {boolean} */
          property = true;
          var p = obj.version;
          var terse = obj.ac;
          var padLength = (obj = obj.u).F();
          if (1 & terse) {
            obj.J(4);
          }
          if (4 & terse) {
            obj.J(4);
          }
          /** @type {Array} */
          var eventPath = [];
          /** @type {number} */
          var i = 0;
          for (;i < padLength;i++) {
            var expectedHashCode = {
              duration : null,
              Sb : null
            };
            if (256 & terse) {
              expectedHashCode.duration = obj.F();
            }
            if (512 & terse) {
              obj.J(4);
            }
            if (1024 & terse) {
              obj.J(4);
            }
            if (2048 & terse) {
              expectedHashCode.Sb = p ? obj.sc() : obj.F();
            }
            eventPath.push(expectedHashCode);
          }
          /** @type {Array} */
          codeSegments = eventPath;
        }).G("vtte", function() {
          data.push(null);
        }).G("vttc", close(function(options) {
          data.push(options.buffer);
        })).G("mdat", function(expectedHashCode) {
          /** @type {boolean} */
          c = true;
          results(expectedHashCode);
        }).parse(s), !c && (!object && !property)) {
          throw new error(2, 2, 2008);
        }
        var current = id_;
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          var a = codeSegments[i];
          var item = data[i];
          var b = a.duration || duration;
          if (b) {
            a = a.Sb ? id_ + a.Sb : current;
            current = a + b;
            if (item) {
              out.push(fetchData(item, opt_attributes.periodStart + a / this.a, opt_attributes.periodStart + current / this.a));
            }
          }
        }
        return out.filter(el);
      };
      fix('application/mp4; codecs="wvtt"', udataCur);
    }).call(self, this);
    if (void 0 !== opts && opts.exports) {
      opts.exports = self.shaka;
    } else {
      if (void 0 !== (result = function() {
        return self.shaka;
      }.call(arg, mapper, arg, opts))) {
        opts.exports = result;
      }
    }
  }();
}]);
